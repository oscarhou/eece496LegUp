//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 3.0 (http://legup.org)
// Compiled: Mon Jan 21 20:17:46 2013
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Sat Mar 23 15:40:13 2013
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 7
`define MEMORY_CONTROLLER_TAG_SIZE 9
`define TAG_NULL `MEMORY_CONTROLLER_TAG_SIZE'd0
`define TAG_PROCESSOR `MEMORY_CONTROLLER_TAG_SIZE'd1
// @RC = internal unnamed_addr constant [24 x i16] [i16 1, i16 -32638, i16 -32630, i16 -32768, i16 -32629, i16 1, i16 -32639, i16 -32759, i16 138, i16 136, i16 -32759, i16 10, i16 -32629, i16 139, i16 -32631, i16 -32765, i16 -32766, i16 128, i16 -32758, i16 10, i16 -32639, i16 -32640, i16 1, i16 -32760], align 2

`define TAG_g_RC `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_g_RC_a {`TAG_g_RC, 23'b0}
// @.str10 = private unnamed_addr constant [5 x i8] c"loop\00"

`define TAG_g__str10 `MEMORY_CONTROLLER_TAG_SIZE'd4
`define TAG_g__str10_a {`TAG_g__str10, 23'b0}
// @rotateArray = internal unnamed_addr constant [5 x [5 x i16]] [[5 x i16] [i16 0, i16 1, i16 62, i16 28, i16 27], [5 x i16] [i16 36, i16 44, i16 6, i16 55, i16 20], [5 x i16] [i16 3, i16 10, i16 43, i16 25, i16 39], [5 x i16] [i16 41, i16 45, i16 15, i16 21, i16 8], [5 x i16] [i16 18, i16 2, i16 61, i16 56, i16 14]], align 2

`define TAG_g_rotateArray `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_rotateArray_a {`TAG_g_rotateArray, 23'b0}
//   %A = alloca [5 x [5 x i16]], align 2
`define TAG_main_0_A `MEMORY_CONTROLLER_TAG_SIZE'd8
`define TAG_main_0_A_a {`TAG_main_0_A, 23'b0}
//   %B.i = alloca [5 x [5 x i16]], align 2
`define TAG_main_0_B_i `MEMORY_CONTROLLER_TAG_SIZE'd7
`define TAG_main_0_B_i_a {`TAG_main_0_B_i, 23'b0}
//   %C.i = alloca [5 x i16], align 2
`define TAG_main_0_C_i `MEMORY_CONTROLLER_TAG_SIZE'd5
`define TAG_main_0_C_i_a {`TAG_main_0_C_i, 23'b0}
//   %D.i = alloca [5 x i16], align 2
`define TAG_main_0_D_i `MEMORY_CONTROLLER_TAG_SIZE'd6
`define TAG_main_0_D_i_a {`TAG_main_0_D_i, 23'b0}

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

module top
	(
		clk,
		reset,
		start,
		finish,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

assign memory_controller_waitrequest = 0;

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_out_a( memory_controller_out_a ),
	.memory_controller_out_b( memory_controller_out_b )
);

endmodule
`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);


input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;

reg [4:0] RC_address_a;
reg [4:0] RC_address_b;
reg RC_write_enable_a;
reg RC_write_enable_b;
reg [15:0] RC_in_a;
reg [15:0] RC_in_b;
wire [15:0] RC_out_a;
wire [15:0] RC_out_b;

// @RC = internal unnamed_addr constant [24 x i16] [i16 1, i16 -32638, i16 -32630, i16 -32768, i16 -32629, i16 1, i16 -32639, i16 -32759, i16 138, i16 136, i16 -32759, i16 10, i16 -32629, i16 139, i16 -32631, i16 -32765, i16 -32766, i16 128, i16 -32758, i16 10, i16 -32639, i16 -32640, i16 1, i16 -32760], align 2

ram_dual_port RC (
	.clk( clk ),
	.address_a( RC_address_a ),
	.address_b( RC_address_b ),
	.wren_a( RC_write_enable_a ),
	.wren_b( RC_write_enable_b ),
	.data_a( RC_in_a ),
	.data_b( RC_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( RC_out_a ),
	.q_b( RC_out_b)
);
defparam RC.width_a = 16;
defparam RC.width_b = 16;
defparam RC.widthad_a = 5;
defparam RC.widthad_b = 5;
defparam RC.width_be_a = 1;
defparam RC.width_be_b = 1;
defparam RC.numwords_a = 24;
defparam RC.numwords_b = 24;
defparam RC.init_file = "RC.mif";


reg [4:0] rotateArray_address_a;
reg [4:0] rotateArray_address_b;
reg rotateArray_write_enable_a;
reg rotateArray_write_enable_b;
reg [15:0] rotateArray_in_a;
reg [15:0] rotateArray_in_b;
wire [15:0] rotateArray_out_a;
wire [15:0] rotateArray_out_b;

// @rotateArray = internal unnamed_addr constant [5 x [5 x i16]] [[5 x i16] [i16 0, i16 1, i16 62, i16 28, i16 27], [5 x i16] [i16 36, i16 44, i16 6, i16 55, i16 20], [5 x i16] [i16 3, i16 10, i16 43, i16 25, i16 39], [5 x i16] [i16 41, i16 45, i16 15, i16 21, i16 8], [5 x i16] [i16 18, i16 2, i16 61, i16 56, i16 14]], align 2

ram_dual_port rotateArray (
	.clk( clk ),
	.address_a( rotateArray_address_a ),
	.address_b( rotateArray_address_b ),
	.wren_a( rotateArray_write_enable_a ),
	.wren_b( rotateArray_write_enable_b ),
	.data_a( rotateArray_in_a ),
	.data_b( rotateArray_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( rotateArray_out_a ),
	.q_b( rotateArray_out_b)
);
defparam rotateArray.width_a = 16;
defparam rotateArray.width_b = 16;
defparam rotateArray.widthad_a = 5;
defparam rotateArray.widthad_b = 5;
defparam rotateArray.width_be_a = 1;
defparam rotateArray.width_be_b = 1;
defparam rotateArray.numwords_a = 25;
defparam rotateArray.numwords_b = 25;
defparam rotateArray.init_file = "rotateArray.mif";


reg [2:0] _str10_address_a;
reg [2:0] _str10_address_b;
reg _str10_write_enable_a;
reg _str10_write_enable_b;
reg [7:0] _str10_in_a;
reg [7:0] _str10_in_b;
wire [7:0] _str10_out_a;
wire [7:0] _str10_out_b;

// @.str10 = private unnamed_addr constant [5 x i8] c"loop\00"

ram_dual_port _str10 (
	.clk( clk ),
	.address_a( _str10_address_a ),
	.address_b( _str10_address_b ),
	.wren_a( _str10_write_enable_a ),
	.wren_b( _str10_write_enable_b ),
	.data_a( _str10_in_a ),
	.data_b( _str10_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( _str10_out_a ),
	.q_b( _str10_out_b)
);
defparam _str10.width_a = 8;
defparam _str10.width_b = 8;
defparam _str10.widthad_a = 3;
defparam _str10.widthad_b = 3;
defparam _str10.width_be_a = 1;
defparam _str10.width_be_b = 1;
defparam _str10.numwords_a = 5;
defparam _str10.numwords_b = 5;
defparam _str10.init_file = "_str10.mif";


reg [2:0] main_0_C_i_address_a;
reg [2:0] main_0_C_i_address_b;
reg main_0_C_i_write_enable_a;
reg main_0_C_i_write_enable_b;
reg [15:0] main_0_C_i_in_a;
reg [15:0] main_0_C_i_in_b;
wire [15:0] main_0_C_i_out_a;
wire [15:0] main_0_C_i_out_b;

//   %C.i = alloca [5 x i16], align 2
ram_dual_port main_0_C_i (
	.clk( clk ),
	.address_a( main_0_C_i_address_a ),
	.address_b( main_0_C_i_address_b ),
	.wren_a( main_0_C_i_write_enable_a ),
	.wren_b( main_0_C_i_write_enable_b ),
	.data_a( main_0_C_i_in_a ),
	.data_b( main_0_C_i_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( main_0_C_i_out_a ),
	.q_b( main_0_C_i_out_b)
);
defparam main_0_C_i.width_a = 16;
defparam main_0_C_i.width_b = 16;
defparam main_0_C_i.widthad_a = 3;
defparam main_0_C_i.widthad_b = 3;
defparam main_0_C_i.width_be_a = 1;
defparam main_0_C_i.width_be_b = 1;
defparam main_0_C_i.numwords_a = 5;
defparam main_0_C_i.numwords_b = 5;


reg [2:0] main_0_D_i_address_a;
reg [2:0] main_0_D_i_address_b;
reg main_0_D_i_write_enable_a;
reg main_0_D_i_write_enable_b;
reg [15:0] main_0_D_i_in_a;
reg [15:0] main_0_D_i_in_b;
wire [15:0] main_0_D_i_out_a;
wire [15:0] main_0_D_i_out_b;

//   %D.i = alloca [5 x i16], align 2
ram_dual_port main_0_D_i (
	.clk( clk ),
	.address_a( main_0_D_i_address_a ),
	.address_b( main_0_D_i_address_b ),
	.wren_a( main_0_D_i_write_enable_a ),
	.wren_b( main_0_D_i_write_enable_b ),
	.data_a( main_0_D_i_in_a ),
	.data_b( main_0_D_i_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( main_0_D_i_out_a ),
	.q_b( main_0_D_i_out_b)
);
defparam main_0_D_i.width_a = 16;
defparam main_0_D_i.width_b = 16;
defparam main_0_D_i.widthad_a = 3;
defparam main_0_D_i.widthad_b = 3;
defparam main_0_D_i.width_be_a = 1;
defparam main_0_D_i.width_be_b = 1;
defparam main_0_D_i.numwords_a = 5;
defparam main_0_D_i.numwords_b = 5;


reg [4:0] main_0_B_i_address_a;
reg [4:0] main_0_B_i_address_b;
reg main_0_B_i_write_enable_a;
reg main_0_B_i_write_enable_b;
reg [15:0] main_0_B_i_in_a;
reg [15:0] main_0_B_i_in_b;
wire [15:0] main_0_B_i_out_a;
wire [15:0] main_0_B_i_out_b;

//   %B.i = alloca [5 x [5 x i16]], align 2
ram_dual_port main_0_B_i (
	.clk( clk ),
	.address_a( main_0_B_i_address_a ),
	.address_b( main_0_B_i_address_b ),
	.wren_a( main_0_B_i_write_enable_a ),
	.wren_b( main_0_B_i_write_enable_b ),
	.data_a( main_0_B_i_in_a ),
	.data_b( main_0_B_i_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( main_0_B_i_out_a ),
	.q_b( main_0_B_i_out_b)
);
defparam main_0_B_i.width_a = 16;
defparam main_0_B_i.width_b = 16;
defparam main_0_B_i.widthad_a = 5;
defparam main_0_B_i.widthad_b = 5;
defparam main_0_B_i.width_be_a = 1;
defparam main_0_B_i.width_be_b = 1;
defparam main_0_B_i.numwords_a = 25;
defparam main_0_B_i.numwords_b = 25;


reg [4:0] main_0_A_address_a;
reg [4:0] main_0_A_address_b;
reg main_0_A_write_enable_a;
reg main_0_A_write_enable_b;
reg [15:0] main_0_A_in_a;
reg [15:0] main_0_A_in_b;
wire [15:0] main_0_A_out_a;
wire [15:0] main_0_A_out_b;

//   %A = alloca [5 x [5 x i16]], align 2
ram_dual_port main_0_A (
	.clk( clk ),
	.address_a( main_0_A_address_a ),
	.address_b( main_0_A_address_b ),
	.wren_a( main_0_A_write_enable_a ),
	.wren_b( main_0_A_write_enable_b ),
	.data_a( main_0_A_in_a ),
	.data_b( main_0_A_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( main_0_A_out_a ),
	.q_b( main_0_A_out_b)
);
defparam main_0_A.width_a = 16;
defparam main_0_A.width_b = 16;
defparam main_0_A.widthad_a = 5;
defparam main_0_A.widthad_b = 5;
defparam main_0_A.width_be_a = 1;
defparam main_0_A.width_be_b = 1;
defparam main_0_A.numwords_a = 25;
defparam main_0_A.numwords_b = 25;

wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_a;
assign tag_a = memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
reg [2:0] prevAddr_a;
reg [1:0] prevSize_a;
reg [2:0] prevSize_a_and;

always @(posedge clk)
begin
	prevAddr_a <= memory_controller_address_a[2:0];
	prevSize_a <= memory_controller_size_a;
end
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_b;
assign tag_b = memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
reg [2:0] prevAddr_b;
reg [1:0] prevSize_b;
reg [2:0] prevSize_b_and;

always @(posedge clk)
begin
	prevAddr_b <= memory_controller_address_b[2:0];
	prevSize_b <= memory_controller_size_b;
end

reg [2:0] select_not_struct_a;

wire select_RC_a;
assign select_RC_a = (tag_a ==`TAG_g_RC);
reg select_RC_reg_a;
wire [15:0] memory_controller_RC_out_a;
assign memory_controller_RC_out_a = {16{ select_RC_reg_a}} & RC_out_a;

wire select_rotateArray_a;
assign select_rotateArray_a = (tag_a ==`TAG_g_rotateArray);
reg select_rotateArray_reg_a;
wire [15:0] memory_controller_rotateArray_out_a;
assign memory_controller_rotateArray_out_a = {16{ select_rotateArray_reg_a}} & rotateArray_out_a;

wire select__str10_a;
assign select__str10_a = (tag_a ==`TAG_g__str10);
reg select__str10_reg_a;
wire [7:0] memory_controller__str10_out_a;
assign memory_controller__str10_out_a = {8{ select__str10_reg_a}} & _str10_out_a;

wire select_main_0_C_i_a;
assign select_main_0_C_i_a = (tag_a ==`TAG_main_0_C_i);
reg select_main_0_C_i_reg_a;
wire [15:0] memory_controller_main_0_C_i_out_a;
assign memory_controller_main_0_C_i_out_a = {16{ select_main_0_C_i_reg_a}} & main_0_C_i_out_a;

wire select_main_0_D_i_a;
assign select_main_0_D_i_a = (tag_a ==`TAG_main_0_D_i);
reg select_main_0_D_i_reg_a;
wire [15:0] memory_controller_main_0_D_i_out_a;
assign memory_controller_main_0_D_i_out_a = {16{ select_main_0_D_i_reg_a}} & main_0_D_i_out_a;

wire select_main_0_B_i_a;
assign select_main_0_B_i_a = (tag_a ==`TAG_main_0_B_i);
reg select_main_0_B_i_reg_a;
wire [15:0] memory_controller_main_0_B_i_out_a;
assign memory_controller_main_0_B_i_out_a = {16{ select_main_0_B_i_reg_a}} & main_0_B_i_out_a;

wire select_main_0_A_a;
assign select_main_0_A_a = (tag_a ==`TAG_main_0_A);
reg select_main_0_A_reg_a;
wire [15:0] memory_controller_main_0_A_out_a;
assign memory_controller_main_0_A_out_a = {16{ select_main_0_A_reg_a}} & main_0_A_out_a;

always @(*)
begin
	RC_address_a = memory_controller_address_a [5-1+1:1] & {5{select_RC_a}};
	RC_write_enable_a = memory_controller_write_enable_a & select_RC_a;
	RC_in_a [16-1:0] = memory_controller_in_a[16-1:0];

	rotateArray_address_a = memory_controller_address_a [5-1+1:1] & {5{select_rotateArray_a}};
	rotateArray_write_enable_a = memory_controller_write_enable_a & select_rotateArray_a;
	rotateArray_in_a [16-1:0] = memory_controller_in_a[16-1:0];

	_str10_address_a = memory_controller_address_a [3-1+0:0] & {3{select__str10_a}};
	_str10_write_enable_a = memory_controller_write_enable_a & select__str10_a;
	_str10_in_a [8-1:0] = memory_controller_in_a[8-1:0];

	main_0_C_i_address_a = memory_controller_address_a [3-1+1:1] & {3{select_main_0_C_i_a}};
	main_0_C_i_write_enable_a = memory_controller_write_enable_a & select_main_0_C_i_a;
	main_0_C_i_in_a [16-1:0] = memory_controller_in_a[16-1:0];

	main_0_D_i_address_a = memory_controller_address_a [3-1+1:1] & {3{select_main_0_D_i_a}};
	main_0_D_i_write_enable_a = memory_controller_write_enable_a & select_main_0_D_i_a;
	main_0_D_i_in_a [16-1:0] = memory_controller_in_a[16-1:0];

	main_0_B_i_address_a = memory_controller_address_a [5-1+1:1] & {5{select_main_0_B_i_a}};
	main_0_B_i_write_enable_a = memory_controller_write_enable_a & select_main_0_B_i_a;
	main_0_B_i_in_a [16-1:0] = memory_controller_in_a[16-1:0];

	main_0_A_address_a = memory_controller_address_a [5-1+1:1] & {5{select_main_0_A_a}};
	main_0_A_write_enable_a = memory_controller_write_enable_a & select_main_0_A_a;
	main_0_A_in_a [16-1:0] = memory_controller_in_a[16-1:0];

end
always @(*)
begin
	select_not_struct_a [2:0] = 3'b0 | {1{select_RC_reg_a}} | {1{select_rotateArray_reg_a}} | {1{select_main_0_C_i_reg_a}} | {1{select_main_0_D_i_reg_a}} | {1{select_main_0_B_i_reg_a}} | {1{select_main_0_A_reg_a}};
	if (prevAddr_a[2:0] & select_not_struct_a[2:0] != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_a_and[0] = prevSize_a[1] | prevSize_a[0];
	prevSize_a_and[1] = prevSize_a[1];
	prevSize_a_and[2] = prevSize_a[1] & prevSize_a[0];
	if ((prevAddr_a & prevSize_a_and) != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram size!");
		$finish;
	end
	memory_controller_out_prev_a = memory_controller_out_reg_a & { 64{!memory_controller_enable_reg_a}};
	memory_controller_out_a = 1'b0 | memory_controller_out_prev_a | memory_controller_RC_out_a | memory_controller_rotateArray_out_a | memory_controller__str10_out_a | memory_controller_main_0_C_i_out_a | memory_controller_main_0_D_i_out_a | memory_controller_main_0_B_i_out_a | memory_controller_main_0_A_out_a;
end

always @(posedge clk)
begin
memory_controller_out_reg_a <= memory_controller_out_a;
memory_controller_enable_reg_a <= memory_controller_enable_a;
select_RC_reg_a <= select_RC_a;
select_rotateArray_reg_a <= select_rotateArray_a;
select__str10_reg_a <= select__str10_a;
select_main_0_C_i_reg_a <= select_main_0_C_i_a;
select_main_0_D_i_reg_a <= select_main_0_D_i_a;
select_main_0_B_i_reg_a <= select_main_0_B_i_a;
select_main_0_A_reg_a <= select_main_0_A_a;
end

reg [2:0] select_not_struct_b;

wire select_RC_b;
assign select_RC_b = (tag_b ==`TAG_g_RC);
reg select_RC_reg_b;
wire [15:0] memory_controller_RC_out_b;
assign memory_controller_RC_out_b = {16{ select_RC_reg_b}} & RC_out_b;

wire select_rotateArray_b;
assign select_rotateArray_b = (tag_b ==`TAG_g_rotateArray);
reg select_rotateArray_reg_b;
wire [15:0] memory_controller_rotateArray_out_b;
assign memory_controller_rotateArray_out_b = {16{ select_rotateArray_reg_b}} & rotateArray_out_b;

wire select__str10_b;
assign select__str10_b = (tag_b ==`TAG_g__str10);
reg select__str10_reg_b;
wire [7:0] memory_controller__str10_out_b;
assign memory_controller__str10_out_b = {8{ select__str10_reg_b}} & _str10_out_b;

wire select_main_0_C_i_b;
assign select_main_0_C_i_b = (tag_b ==`TAG_main_0_C_i);
reg select_main_0_C_i_reg_b;
wire [15:0] memory_controller_main_0_C_i_out_b;
assign memory_controller_main_0_C_i_out_b = {16{ select_main_0_C_i_reg_b}} & main_0_C_i_out_b;

wire select_main_0_D_i_b;
assign select_main_0_D_i_b = (tag_b ==`TAG_main_0_D_i);
reg select_main_0_D_i_reg_b;
wire [15:0] memory_controller_main_0_D_i_out_b;
assign memory_controller_main_0_D_i_out_b = {16{ select_main_0_D_i_reg_b}} & main_0_D_i_out_b;

wire select_main_0_B_i_b;
assign select_main_0_B_i_b = (tag_b ==`TAG_main_0_B_i);
reg select_main_0_B_i_reg_b;
wire [15:0] memory_controller_main_0_B_i_out_b;
assign memory_controller_main_0_B_i_out_b = {16{ select_main_0_B_i_reg_b}} & main_0_B_i_out_b;

wire select_main_0_A_b;
assign select_main_0_A_b = (tag_b ==`TAG_main_0_A);
reg select_main_0_A_reg_b;
wire [15:0] memory_controller_main_0_A_out_b;
assign memory_controller_main_0_A_out_b = {16{ select_main_0_A_reg_b}} & main_0_A_out_b;

always @(*)
begin
	RC_address_b = memory_controller_address_b [5-1+1:1] & {5{select_RC_b}};
	RC_write_enable_b = memory_controller_write_enable_b & select_RC_b;
	RC_in_b [16-1:0] = memory_controller_in_b[16-1:0];

	rotateArray_address_b = memory_controller_address_b [5-1+1:1] & {5{select_rotateArray_b}};
	rotateArray_write_enable_b = memory_controller_write_enable_b & select_rotateArray_b;
	rotateArray_in_b [16-1:0] = memory_controller_in_b[16-1:0];

	_str10_address_b = memory_controller_address_b [3-1+0:0] & {3{select__str10_b}};
	_str10_write_enable_b = memory_controller_write_enable_b & select__str10_b;
	_str10_in_b [8-1:0] = memory_controller_in_b[8-1:0];

	main_0_C_i_address_b = memory_controller_address_b [3-1+1:1] & {3{select_main_0_C_i_b}};
	main_0_C_i_write_enable_b = memory_controller_write_enable_b & select_main_0_C_i_b;
	main_0_C_i_in_b [16-1:0] = memory_controller_in_b[16-1:0];

	main_0_D_i_address_b = memory_controller_address_b [3-1+1:1] & {3{select_main_0_D_i_b}};
	main_0_D_i_write_enable_b = memory_controller_write_enable_b & select_main_0_D_i_b;
	main_0_D_i_in_b [16-1:0] = memory_controller_in_b[16-1:0];

	main_0_B_i_address_b = memory_controller_address_b [5-1+1:1] & {5{select_main_0_B_i_b}};
	main_0_B_i_write_enable_b = memory_controller_write_enable_b & select_main_0_B_i_b;
	main_0_B_i_in_b [16-1:0] = memory_controller_in_b[16-1:0];

	main_0_A_address_b = memory_controller_address_b [5-1+1:1] & {5{select_main_0_A_b}};
	main_0_A_write_enable_b = memory_controller_write_enable_b & select_main_0_A_b;
	main_0_A_in_b [16-1:0] = memory_controller_in_b[16-1:0];

end
always @(*)
begin
	select_not_struct_b [2:0] = 3'b0 | {1{select_RC_reg_b}} | {1{select_rotateArray_reg_b}} | {1{select_main_0_C_i_reg_b}} | {1{select_main_0_D_i_reg_b}} | {1{select_main_0_B_i_reg_b}} | {1{select_main_0_A_reg_b}};
	if (prevAddr_b[2:0] & select_not_struct_b[2:0] != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_b_and[0] = prevSize_b[1] | prevSize_b[0];
	prevSize_b_and[1] = prevSize_b[1];
	prevSize_b_and[2] = prevSize_b[1] & prevSize_b[0];
	if ((prevAddr_b & prevSize_b_and) != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram size!");
		$finish;
	end
	memory_controller_out_prev_b = memory_controller_out_reg_b & { 64{!memory_controller_enable_reg_b}};
	memory_controller_out_b = 1'b0 | memory_controller_out_prev_b | memory_controller_RC_out_b | memory_controller_rotateArray_out_b | memory_controller__str10_out_b | memory_controller_main_0_C_i_out_b | memory_controller_main_0_D_i_out_b | memory_controller_main_0_B_i_out_b | memory_controller_main_0_A_out_b;
end

always @(posedge clk)
begin
memory_controller_out_reg_b <= memory_controller_out_b;
memory_controller_enable_reg_b <= memory_controller_enable_b;
select_RC_reg_b <= select_RC_b;
select_rotateArray_reg_b <= select_rotateArray_b;
select__str10_reg_b <= select__str10_b;
select_main_0_C_i_reg_b <= select_main_0_C_i_b;
select_main_0_D_i_reg_b <= select_main_0_D_i_b;
select_main_0_B_i_reg_b <= select_main_0_B_i_b;
select_main_0_A_reg_b <= select_main_0_A_b;
end

endmodule 
`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	return_val,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest
);

parameter [8:0] LEGUP_0 = 9'd0;
parameter [8:0] LEGUP_F_main_BB_0_1 = 9'd1;
parameter [8:0] LEGUP_F_main_BB_1_2 = 9'd2;
parameter [8:0] LEGUP_F_main_BB_4_3 = 9'd3;
parameter [8:0] LEGUP_F_main_BB_legup_memset_2_exit_4 = 9'd4;
parameter [8:0] LEGUP_F_main_BB_legup_memset_2_exit_5 = 9'd5;
parameter [8:0] LEGUP_F_main_BB_legup_memset_2_exit_6 = 9'd6;
parameter [8:0] LEGUP_F_main_BB_66_7 = 9'd7;
parameter [8:0] LEGUP_F_main_BB_69_8 = 9'd8;
parameter [8:0] LEGUP_F_main_BB_69_9 = 9'd9;
parameter [8:0] LEGUP_F_main_BB_69_10 = 9'd10;
parameter [8:0] LEGUP_F_main_BB_69_11 = 9'd11;
parameter [8:0] LEGUP_F_main_BB_69_12 = 9'd12;
parameter [8:0] LEGUP_F_main_BB_69_13 = 9'd13;
parameter [8:0] LEGUP_F_main_BB_80_14 = 9'd14;
parameter [8:0] LEGUP_F_main_BB_80_15 = 9'd15;
parameter [8:0] LEGUP_F_main_BB_80_16 = 9'd16;
parameter [8:0] LEGUP_F_main_BB_80_17 = 9'd17;
parameter [8:0] LEGUP_F_main_BB_80_18 = 9'd18;
parameter [8:0] LEGUP_F_main_BB_92_19 = 9'd19;
parameter [8:0] LEGUP_F_main_BB_92_20 = 9'd20;
parameter [8:0] LEGUP_F_main_BB_92_21 = 9'd21;
parameter [8:0] LEGUP_F_main_BB_92_22 = 9'd22;
parameter [8:0] LEGUP_F_main_BB_92_23 = 9'd23;
parameter [8:0] LEGUP_F_main_BB_92_24 = 9'd24;
parameter [8:0] LEGUP_F_main_BB_92_25 = 9'd25;
parameter [8:0] LEGUP_F_main_BB_92_26 = 9'd26;
parameter [8:0] LEGUP_F_main_BB_92_27 = 9'd27;
parameter [8:0] LEGUP_F_main_BB_92_28 = 9'd28;
parameter [8:0] LEGUP_F_main_BB_92_29 = 9'd29;
parameter [8:0] LEGUP_F_main_BB_92_30 = 9'd30;
parameter [8:0] LEGUP_F_main_BB_92_31 = 9'd31;
parameter [8:0] LEGUP_F_main_BB_92_32 = 9'd32;
parameter [8:0] LEGUP_F_main_BB_92_33 = 9'd33;
parameter [8:0] LEGUP_F_main_BB_92_34 = 9'd34;
parameter [8:0] LEGUP_F_main_BB_92_35 = 9'd35;
parameter [8:0] LEGUP_F_main_BB_92_36 = 9'd36;
parameter [8:0] LEGUP_F_main_BB_92_37 = 9'd37;
parameter [8:0] LEGUP_F_main_BB_92_38 = 9'd38;
parameter [8:0] LEGUP_F_main_BB_92_39 = 9'd39;
parameter [8:0] LEGUP_F_main_BB_92_40 = 9'd40;
parameter [8:0] LEGUP_F_main_BB_92_41 = 9'd41;
parameter [8:0] LEGUP_F_main_BB_92_42 = 9'd42;
parameter [8:0] LEGUP_F_main_BB_92_43 = 9'd43;
parameter [8:0] LEGUP_F_main_BB_92_44 = 9'd44;
parameter [8:0] LEGUP_F_main_BB_92_45 = 9'd45;
parameter [8:0] LEGUP_F_main_BB_92_46 = 9'd46;
parameter [8:0] LEGUP_F_main_BB_92_47 = 9'd47;
parameter [8:0] LEGUP_F_main_BB_92_48 = 9'd48;
parameter [8:0] LEGUP_F_main_BB_92_49 = 9'd49;
parameter [8:0] LEGUP_F_main_BB_92_50 = 9'd50;
parameter [8:0] LEGUP_F_main_BB_92_51 = 9'd51;
parameter [8:0] LEGUP_F_main_BB_92_52 = 9'd52;
parameter [8:0] LEGUP_F_main_BB_92_53 = 9'd53;
parameter [8:0] LEGUP_F_main_BB_92_54 = 9'd54;
parameter [8:0] LEGUP_F_main_BB_92_55 = 9'd55;
parameter [8:0] LEGUP_F_main_BB_92_56 = 9'd56;
parameter [8:0] LEGUP_F_main_BB_103_57 = 9'd57;
parameter [8:0] LEGUP_F_main_BB_103_58 = 9'd58;
parameter [8:0] LEGUP_F_main_BB_103_59 = 9'd59;
parameter [8:0] LEGUP_F_main_BB_103_60 = 9'd60;
parameter [8:0] LEGUP_F_main_BB_103_61 = 9'd61;
parameter [8:0] LEGUP_F_main_BB__preheader6_i_62 = 9'd62;
parameter [8:0] LEGUP_F_main_BB_116_63 = 9'd63;
parameter [8:0] LEGUP_F_main_BB_116_64 = 9'd64;
parameter [8:0] LEGUP_F_main_BB_116_65 = 9'd65;
parameter [8:0] LEGUP_F_main_BB_116_66 = 9'd66;
parameter [8:0] LEGUP_F_main_BB_120_67 = 9'd67;
parameter [8:0] LEGUP_F_main_BB___preheader6_crit_edge_i_68 = 9'd68;
parameter [8:0] LEGUP_F_main_BB___preheader6_crit_edge_i_69 = 9'd69;
parameter [8:0] LEGUP_F_main_BB___preheader6_crit_edge_i_70 = 9'd70;
parameter [8:0] LEGUP_F_main_BB_122_71 = 9'd71;
parameter [8:0] LEGUP_F_main_BB_122_72 = 9'd72;
parameter [8:0] LEGUP_F_main_BB_122_73 = 9'd73;
parameter [8:0] LEGUP_F_main_BB_122_74 = 9'd74;
parameter [8:0] LEGUP_F_main_BB_122_75 = 9'd75;
parameter [8:0] LEGUP_F_main_BB_122_76 = 9'd76;
parameter [8:0] LEGUP_F_main_BB_122_77 = 9'd77;
parameter [8:0] LEGUP_F_main_BB_122_78 = 9'd78;
parameter [8:0] LEGUP_F_main_BB_122_79 = 9'd79;
parameter [8:0] LEGUP_F_main_BB_122_80 = 9'd80;
parameter [8:0] LEGUP_F_main_BB_122_81 = 9'd81;
parameter [8:0] LEGUP_F_main_BB_122_82 = 9'd82;
parameter [8:0] LEGUP_F_main_BB_122_83 = 9'd83;
parameter [8:0] LEGUP_F_main_BB_122_84 = 9'd84;
parameter [8:0] LEGUP_F_main_BB_122_85 = 9'd85;
parameter [8:0] LEGUP_F_main_BB_122_86 = 9'd86;
parameter [8:0] LEGUP_F_main_BB_122_87 = 9'd87;
parameter [8:0] LEGUP_F_main_BB_122_88 = 9'd88;
parameter [8:0] LEGUP_F_main_BB_122_89 = 9'd89;
parameter [8:0] LEGUP_F_main_BB_122_90 = 9'd90;
parameter [8:0] LEGUP_F_main_BB_122_91 = 9'd91;
parameter [8:0] LEGUP_F_main_BB_122_92 = 9'd92;
parameter [8:0] LEGUP_F_main_BB_122_93 = 9'd93;
parameter [8:0] LEGUP_F_main_BB_122_94 = 9'd94;
parameter [8:0] LEGUP_F_main_BB_122_95 = 9'd95;
parameter [8:0] LEGUP_F_main_BB_122_96 = 9'd96;
parameter [8:0] LEGUP_F_main_BB__preheader3_i_97 = 9'd97;
parameter [8:0] LEGUP_F_main_BB_179_98 = 9'd98;
parameter [8:0] LEGUP_F_main_BB_179_99 = 9'd99;
parameter [8:0] LEGUP_F_main_BB_179_100 = 9'd100;
parameter [8:0] LEGUP_F_main_BB_179_101 = 9'd101;
parameter [8:0] LEGUP_F_main_BB_179_102 = 9'd102;
parameter [8:0] LEGUP_F_main_BB_179_103 = 9'd103;
parameter [8:0] LEGUP_F_main_BB_179_104 = 9'd104;
parameter [8:0] LEGUP_F_main_BB_179_105 = 9'd105;
parameter [8:0] LEGUP_F_main_BB_179_106 = 9'd106;
parameter [8:0] LEGUP_F_main_BB_179_107 = 9'd107;
parameter [8:0] LEGUP_F_main_BB_179_108 = 9'd108;
parameter [8:0] LEGUP_F_main_BB_179_109 = 9'd109;
parameter [8:0] LEGUP_F_main_BB_179_110 = 9'd110;
parameter [8:0] LEGUP_F_main_BB_179_111 = 9'd111;
parameter [8:0] LEGUP_F_main_BB_179_112 = 9'd112;
parameter [8:0] LEGUP_F_main_BB_179_113 = 9'd113;
parameter [8:0] LEGUP_F_main_BB_179_114 = 9'd114;
parameter [8:0] LEGUP_F_main_BB_179_115 = 9'd115;
parameter [8:0] LEGUP_F_main_BB_179_116 = 9'd116;
parameter [8:0] LEGUP_F_main_BB_179_117 = 9'd117;
parameter [8:0] LEGUP_F_main_BB_179_118 = 9'd118;
parameter [8:0] LEGUP_F_main_BB_179_119 = 9'd119;
parameter [8:0] LEGUP_F_main_BB_179_120 = 9'd120;
parameter [8:0] LEGUP_F_main_BB_179_121 = 9'd121;
parameter [8:0] LEGUP_F_main_BB_179_122 = 9'd122;
parameter [8:0] LEGUP_F_main_BB_179_123 = 9'd123;
parameter [8:0] LEGUP_F_main_BB_179_124 = 9'd124;
parameter [8:0] LEGUP_F_main_BB_179_125 = 9'd125;
parameter [8:0] LEGUP_F_main_BB_179_126 = 9'd126;
parameter [8:0] LEGUP_F_main_BB_179_127 = 9'd127;
parameter [8:0] LEGUP_F_main_BB_179_128 = 9'd128;
parameter [8:0] LEGUP_F_main_BB_179_129 = 9'd129;
parameter [8:0] LEGUP_F_main_BB_179_130 = 9'd130;
parameter [8:0] LEGUP_F_main_BB_179_131 = 9'd131;
parameter [8:0] LEGUP_F_main_BB_179_132 = 9'd132;
parameter [8:0] LEGUP_F_main_BB_179_133 = 9'd133;
parameter [8:0] LEGUP_F_main_BB_179_134 = 9'd134;
parameter [8:0] LEGUP_F_main_BB_192_135 = 9'd135;
parameter [8:0] LEGUP_F_main_BB_194_136 = 9'd136;
parameter [8:0] LEGUP_F_main_BB_194_137 = 9'd137;
parameter [8:0] LEGUP_F_main_BB_194_138 = 9'd138;
parameter [8:0] LEGUP_F_main_BB_194_139 = 9'd139;
parameter [8:0] LEGUP_F_main_BB_194_140 = 9'd140;
parameter [8:0] LEGUP_F_main_BB_194_141 = 9'd141;
parameter [8:0] LEGUP_F_main_BB_194_142 = 9'd142;
parameter [8:0] LEGUP_F_main_BB_194_143 = 9'd143;
parameter [8:0] LEGUP_F_main_BB_194_144 = 9'd144;
parameter [8:0] LEGUP_F_main_BB_194_145 = 9'd145;
parameter [8:0] LEGUP_F_main_BB_194_146 = 9'd146;
parameter [8:0] LEGUP_F_main_BB_194_147 = 9'd147;
parameter [8:0] LEGUP_F_main_BB_194_148 = 9'd148;
parameter [8:0] LEGUP_F_main_BB_194_149 = 9'd149;
parameter [8:0] LEGUP_F_main_BB_194_150 = 9'd150;
parameter [8:0] LEGUP_F_main_BB_194_151 = 9'd151;
parameter [8:0] LEGUP_F_main_BB_194_152 = 9'd152;
parameter [8:0] LEGUP_F_main_BB_194_153 = 9'd153;
parameter [8:0] LEGUP_F_main_BB_194_154 = 9'd154;
parameter [8:0] LEGUP_F_main_BB_194_155 = 9'd155;
parameter [8:0] LEGUP_F_main_BB_194_156 = 9'd156;
parameter [8:0] LEGUP_F_main_BB_194_157 = 9'd157;
parameter [8:0] LEGUP_F_main_BB_194_158 = 9'd158;
parameter [8:0] LEGUP_F_main_BB_194_159 = 9'd159;
parameter [8:0] LEGUP_F_main_BB_194_160 = 9'd160;
parameter [8:0] LEGUP_F_main_BB_194_161 = 9'd161;
parameter [8:0] LEGUP_F_main_BB__preheader_i_162 = 9'd162;
parameter [8:0] LEGUP_F_main_BB__preheader_i_163 = 9'd163;
parameter [8:0] LEGUP_F_main_BB__preheader_i_164 = 9'd164;
parameter [8:0] LEGUP_F_main_BB__preheader_i_165 = 9'd165;
parameter [8:0] LEGUP_F_main_BB__preheader_i_166 = 9'd166;
parameter [8:0] LEGUP_F_main_BB__preheader_i_167 = 9'd167;
parameter [8:0] LEGUP_F_main_BB__preheader_i_168 = 9'd168;
parameter [8:0] LEGUP_F_main_BB__preheader_i_169 = 9'd169;
parameter [8:0] LEGUP_F_main_BB__preheader_i_170 = 9'd170;
parameter [8:0] LEGUP_F_main_BB__preheader_i_171 = 9'd171;
parameter [8:0] LEGUP_F_main_BB__preheader_i_172 = 9'd172;
parameter [8:0] LEGUP_F_main_BB__preheader_i_173 = 9'd173;
parameter [8:0] LEGUP_F_main_BB__preheader_i_174 = 9'd174;
parameter [8:0] LEGUP_F_main_BB__preheader_i_175 = 9'd175;
parameter [8:0] LEGUP_F_main_BB__preheader_i_176 = 9'd176;
parameter [8:0] LEGUP_F_main_BB__preheader_i_177 = 9'd177;
parameter [8:0] LEGUP_F_main_BB__preheader_i_178 = 9'd178;
parameter [8:0] LEGUP_F_main_BB__preheader_i_179 = 9'd179;
parameter [8:0] LEGUP_F_main_BB__preheader_i_180 = 9'd180;
parameter [8:0] LEGUP_F_main_BB__preheader_i_181 = 9'd181;
parameter [8:0] LEGUP_F_main_BB__preheader_i_182 = 9'd182;
parameter [8:0] LEGUP_F_main_BB__preheader_i_183 = 9'd183;
parameter [8:0] LEGUP_F_main_BB__preheader_i_184 = 9'd184;
parameter [8:0] LEGUP_F_main_BB__preheader_i_185 = 9'd185;
parameter [8:0] LEGUP_F_main_BB__preheader_i_186 = 9'd186;
parameter [8:0] LEGUP_F_main_BB__preheader_i_187 = 9'd187;
parameter [8:0] LEGUP_F_main_BB__preheader_i_188 = 9'd188;
parameter [8:0] LEGUP_F_main_BB__preheader_i_189 = 9'd189;
parameter [8:0] LEGUP_F_main_BB__preheader_i_190 = 9'd190;
parameter [8:0] LEGUP_F_main_BB__preheader_i_191 = 9'd191;
parameter [8:0] LEGUP_F_main_BB__preheader_i_192 = 9'd192;
parameter [8:0] LEGUP_F_main_BB__preheader_i_193 = 9'd193;
parameter [8:0] LEGUP_F_main_BB__preheader_i_194 = 9'd194;
parameter [8:0] LEGUP_F_main_BB__preheader_i_195 = 9'd195;
parameter [8:0] LEGUP_F_main_BB_253_196 = 9'd196;
parameter [8:0] LEGUP_F_main_BB_253_197 = 9'd197;
parameter [8:0] LEGUP_F_main_BB_253_198 = 9'd198;
parameter [8:0] LEGUP_F_main_BB_253_199 = 9'd199;
parameter [8:0] LEGUP_F_main_BB_253_200 = 9'd200;
parameter [8:0] LEGUP_F_main_BB_261_201 = 9'd201;
parameter [8:0] LEGUP_F_main_BB_roundFunction_exit_202 = 9'd202;
parameter [8:0] LEGUP_F_main_BB_roundFunction_exit_203 = 9'd203;
parameter [8:0] LEGUP_F_main_BB_roundFunction_exit_204 = 9'd204;
parameter [8:0] LEGUP_F_main_BB_roundFunction_exit_205 = 9'd205;
parameter [8:0] LEGUP_F_main_BB_roundFunction_exit_206 = 9'd206;
parameter [8:0] LEGUP_F_main_BB_roundFunction_exit_207 = 9'd207;
parameter [8:0] LEGUP_F_main_BB_roundFunction_exit_208 = 9'd208;
parameter [8:0] LEGUP_F_main_BB_roundFunction_exit_209 = 9'd209;
parameter [8:0] LEGUP_F_main_BB_roundFunction_exit_210 = 9'd210;
parameter [8:0] LEGUP_F_main_BB_roundFunction_exit_211 = 9'd211;
parameter [8:0] LEGUP_F_main_BB_roundFunction_exit_212 = 9'd212;
parameter [8:0] LEGUP_F_main_BB_roundFunction_exit_213 = 9'd213;
parameter [8:0] LEGUP_F_main_BB_roundFunction_exit_214 = 9'd214;
parameter [8:0] LEGUP_F_main_BB_roundFunction_exit_215 = 9'd215;
parameter [8:0] LEGUP_F_main_BB_roundFunction_exit_216 = 9'd216;
parameter [8:0] LEGUP_F_main_BB_roundFunction_exit_217 = 9'd217;
parameter [8:0] LEGUP_F_main_BB_roundFunction_exit_218 = 9'd218;
parameter [8:0] LEGUP_F_main_BB_roundFunction_exit_219 = 9'd219;
parameter [8:0] LEGUP_F_main_BB_roundFunction_exit_220 = 9'd220;
parameter [8:0] LEGUP_F_main_BB_roundFunction_exit_221 = 9'd221;
parameter [8:0] LEGUP_F_main_BB_roundFunction_exit_222 = 9'd222;
parameter [8:0] LEGUP_F_main_BB_roundFunction_exit_223 = 9'd223;
parameter [8:0] LEGUP_F_main_BB_roundFunction_exit_224 = 9'd224;
parameter [8:0] LEGUP_F_main_BB_roundFunction_exit_225 = 9'd225;
parameter [8:0] LEGUP_F_main_BB_roundFunction_exit_226 = 9'd226;
parameter [8:0] LEGUP_F_main_BB_roundFunction_exit_227 = 9'd227;
parameter [8:0] LEGUP_F_main_BB_roundFunction_exit_228 = 9'd228;
parameter [8:0] LEGUP_F_main_BB_roundFunction_exit_229 = 9'd229;
parameter [8:0] LEGUP_F_main_BB_roundFunction_exit_230 = 9'd230;
parameter [8:0] LEGUP_F_main_BB_roundFunction_exit_231 = 9'd231;
parameter [8:0] LEGUP_F_main_BB_roundFunction_exit_232 = 9'd232;
parameter [8:0] LEGUP_F_main_BB_roundFunction_exit_233 = 9'd233;
parameter [8:0] LEGUP_F_main_BB_roundFunction_exit_234 = 9'd234;
parameter [8:0] LEGUP_F_main_BB_roundFunction_exit_235 = 9'd235;
parameter [8:0] LEGUP_F_main_BB_roundFunction_exit_236 = 9'd236;
parameter [8:0] LEGUP_F_main_BB_roundFunction_exit_237 = 9'd237;
parameter [8:0] LEGUP_F_main_BB_roundFunction_exit_238 = 9'd238;
parameter [8:0] LEGUP_F_main_BB_roundFunction_exit_239 = 9'd239;
parameter [8:0] LEGUP_F_main_BB_roundFunction_exit_240 = 9'd240;
parameter [8:0] LEGUP_F_main_BB_roundFunction_exit_241 = 9'd241;
parameter [8:0] LEGUP_F_main_BB_roundFunction_exit_242 = 9'd242;
parameter [8:0] LEGUP_F_main_BB_roundFunction_exit_243 = 9'd243;
parameter [8:0] LEGUP_F_main_BB_roundFunction_exit_244 = 9'd244;
parameter [8:0] LEGUP_F_main_BB_roundFunction_exit_245 = 9'd245;
parameter [8:0] LEGUP_F_main_BB_roundFunction_exit_246 = 9'd246;
parameter [8:0] LEGUP_F_main_BB_roundFunction_exit_247 = 9'd247;
parameter [8:0] LEGUP_F_main_BB_roundFunction_exit_248 = 9'd248;
parameter [8:0] LEGUP_F_main_BB_roundFunction_exit_249 = 9'd249;
parameter [8:0] LEGUP_F_main_BB_roundFunction_exit_250 = 9'd250;
parameter [8:0] LEGUP_F_main_BB_roundFunction_exit_251 = 9'd251;
parameter [8:0] LEGUP_F_main_BB_roundFunction_exit_252 = 9'd252;
parameter [8:0] LEGUP_F_main_BB_roundFunction_exit_253 = 9'd253;
parameter [8:0] LEGUP_F_main_BB_roundFunction_exit_254 = 9'd254;
parameter [8:0] LEGUP_F_main_BB_roundFunction_exit_255 = 9'd255;
parameter [8:0] LEGUP_F_main_BB_roundFunction_exit_256 = 9'd256;
parameter [8:0] LEGUP_F_main_BB_378_257 = 9'd257;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg [31:0] return_val;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
reg [8:0] cur_state;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_tmp;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_tmp_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_s_i_0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_s_i_0_reg;
reg [31:0] main_1_2;
reg [31:0] main_1_2_reg;
reg  main_1_3;
reg [31:0] main_4_5;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_4_6;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_2_exit_7;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_2_exit_7_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_2_exit_8;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_2_exit_8_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_2_exit_9;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_2_exit_9_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_2_exit_10;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_2_exit_10_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_2_exit_11;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_2_exit_11_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_2_exit_12;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_2_exit_12_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_2_exit_13;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_2_exit_13_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_2_exit_14;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_2_exit_14_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_2_exit_15;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_2_exit_15_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_2_exit_16;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_2_exit_16_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_2_exit_17;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_2_exit_17_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_2_exit_18;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_2_exit_18_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_2_exit_19;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_2_exit_19_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_2_exit_20;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_2_exit_20_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_2_exit_21;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_2_exit_21_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_2_exit_22;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_2_exit_22_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_2_exit_23;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_2_exit_23_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_2_exit_24;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_2_exit_24_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_2_exit_25;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_2_exit_25_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_2_exit_26;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_2_exit_26_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_2_exit_27;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_2_exit_27_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_2_exit_28;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_2_exit_28_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_2_exit_29;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_2_exit_29_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_2_exit_30;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_2_exit_30_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_2_exit_31;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_2_exit_31_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_2_exit_32;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_2_exit_32_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_2_exit_33;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_2_exit_33_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_2_exit_34;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_2_exit_34_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_2_exit_35;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_2_exit_35_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_2_exit_36;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_2_exit_36_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_2_exit_37;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_2_exit_37_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_2_exit_38;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_2_exit_38_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_2_exit_39;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_2_exit_39_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_2_exit_40;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_2_exit_40_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_2_exit_41;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_2_exit_41_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_2_exit_42;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_2_exit_42_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_2_exit_43;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_2_exit_43_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_2_exit_44;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_2_exit_44_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_2_exit_45;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_2_exit_45_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_2_exit_46;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_2_exit_46_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_2_exit_47;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_2_exit_47_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_2_exit_48;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_2_exit_48_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_2_exit_49;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_2_exit_49_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_2_exit_50;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_2_exit_50_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_2_exit_51;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_2_exit_51_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_2_exit_52;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_2_exit_52_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_2_exit_53;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_2_exit_53_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_2_exit_54;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_2_exit_54_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_2_exit_55;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_2_exit_55_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_2_exit_56;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_2_exit_56_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_2_exit_57;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_2_exit_57_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_2_exit_58;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_2_exit_58_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_2_exit_59;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_2_exit_59_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_2_exit_60;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_2_exit_60_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_2_exit_61;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_2_exit_61_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_2_exit_62;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_2_exit_62_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_2_exit_63;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_2_exit_63_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_2_exit_64;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_2_exit_64_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_2_exit_65;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_2_exit_65_reg;
reg [31:0] main_66_67;
reg [31:0] main_66_67_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_66_scevgep;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_66_scevgep_reg;
reg [31:0] main_69_x_010_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_69_scevgep45_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_69_scevgep46_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_69_scevgep47_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_69_scevgep47_i_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_69_scevgep48_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_69_scevgep48_i_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_69_scevgep49_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_69_scevgep49_i_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_69_scevgep50_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_69_scevgep50_i_reg;
reg [15:0] main_69_70;
reg [15:0] main_69_71;
reg [15:0] main_69_72;
reg [15:0] main_69_73;
reg [15:0] main_69_74;
reg [15:0] main_69_75;
reg [15:0] main_69_75_reg;
reg [15:0] main_69_76;
reg [15:0] main_69_77;
reg [15:0] main_69_77_reg;
reg [15:0] main_69_78;
reg [15:0] main_69_78_reg;
reg [31:0] main_69_79;
reg [31:0] main_69_79_reg;
reg  main_69_exitcond44_i;
reg  main_69_exitcond44_i_reg;
reg [15:0] main_80_81;
reg [31:0] main_80_82;
reg [31:0] main_80_82_reg;
reg [15:0] main_80_83;
reg [31:0] main_80_84;
reg [31:0] main_80_84_reg;
reg [15:0] main_80_85;
reg [31:0] main_80_86;
reg [31:0] main_80_86_reg;
reg [15:0] main_80_87;
reg [31:0] main_80_88;
reg [31:0] main_80_88_reg;
reg [15:0] main_80_89;
reg [31:0] main_80_90;
reg [31:0] main_92_x_19_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_92_scevgep42_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_92_scevgep42_i_reg;
reg [31:0] main_92_tmp43_i;
reg [31:0] main_92_tmp43_i_reg;
reg [31:0] main_92_93;
reg [31:0] main_92_93_reg;
reg  main_92_tmp39_i;
reg  main_92_tmp39_i_reg;
reg [31:0] main_92_tmp40_i;
reg [31:0] main_92_tmp40_i_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_92_94;
reg [15:0] main_92_95;
reg [15:0] main_92_96;
reg [15:0] main_92_97;
reg [15:0] main_92_98;
reg [15:0] main_92_98_reg;
reg [31:0] main_92_99;
reg [31:0] main_92_99_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_92_100;
reg [15:0] main_92_101;
reg [15:0] main_92_102;
reg [15:0] main_92_102_reg;
reg [15:0] main_103_104;
reg [15:0] main_103_104_reg;
reg [31:0] main_103_105;
reg [31:0] main_103_105_reg;
reg [15:0] main_103_106;
reg [31:0] main_103_107;
reg [31:0] main_103_107_reg;
reg [15:0] main_103_108;
reg [31:0] main_103_109;
reg [31:0] main_103_109_reg;
reg [15:0] main_103_110;
reg [31:0] main_103_111;
reg [31:0] main_103_111_reg;
reg [15:0] main_103_112;
reg [31:0] main_103_113;
reg [15:0] main__preheader6_i_115;
reg [15:0] main__preheader6_i_115_reg;
reg [31:0] main__preheader6_i_x_28_i;
reg [31:0] main__preheader6_i_x_28_i_reg;
reg [31:0] main_116_y_07_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_116_scevgep35_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_116_scevgep35_i_reg;
reg [15:0] main_116_117;
reg [15:0] main_116_118;
reg [15:0] main_116_118_reg;
reg [31:0] main_116_119;
reg [31:0] main_116_119_reg;
reg  main_116_exitcond34_i;
reg  main_116_exitcond34_i_reg;
reg [31:0] main_120_121;
reg [31:0] main_120_121_reg;
reg  main_120_exitcond36_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main___preheader6_crit_edge_i_scevgep38_phi_trans_insert_i;
reg [15:0] main___preheader6_crit_edge_i__pre_i;
reg [15:0] main_122_124;
reg [31:0] main_122_125;
reg [31:0] main_122_125_reg;
reg [15:0] main_122_126;
reg [31:0] main_122_127;
reg [31:0] main_122_127_reg;
reg [15:0] main_122_128;
reg [31:0] main_122_129;
reg [31:0] main_122_129_reg;
reg [15:0] main_122_130;
reg [31:0] main_122_131;
reg [31:0] main_122_131_reg;
reg [15:0] main_122_132;
reg [31:0] main_122_133;
reg [15:0] main_122_135;
reg [31:0] main_122_136;
reg [31:0] main_122_136_reg;
reg [15:0] main_122_137;
reg [31:0] main_122_138;
reg [31:0] main_122_138_reg;
reg [15:0] main_122_139;
reg [31:0] main_122_140;
reg [31:0] main_122_140_reg;
reg [15:0] main_122_141;
reg [31:0] main_122_142;
reg [31:0] main_122_142_reg;
reg [15:0] main_122_143;
reg [31:0] main_122_144;
reg [15:0] main_122_146;
reg [31:0] main_122_147;
reg [31:0] main_122_147_reg;
reg [15:0] main_122_148;
reg [31:0] main_122_149;
reg [31:0] main_122_149_reg;
reg [15:0] main_122_150;
reg [31:0] main_122_151;
reg [31:0] main_122_151_reg;
reg [15:0] main_122_152;
reg [31:0] main_122_153;
reg [31:0] main_122_153_reg;
reg [15:0] main_122_154;
reg [31:0] main_122_155;
reg [15:0] main_122_157;
reg [31:0] main_122_158;
reg [31:0] main_122_158_reg;
reg [15:0] main_122_159;
reg [31:0] main_122_160;
reg [31:0] main_122_160_reg;
reg [15:0] main_122_161;
reg [31:0] main_122_162;
reg [31:0] main_122_162_reg;
reg [15:0] main_122_163;
reg [31:0] main_122_164;
reg [31:0] main_122_164_reg;
reg [15:0] main_122_165;
reg [31:0] main_122_166;
reg [15:0] main_122_168;
reg [31:0] main_122_169;
reg [31:0] main_122_169_reg;
reg [15:0] main_122_170;
reg [31:0] main_122_171;
reg [31:0] main_122_171_reg;
reg [15:0] main_122_172;
reg [31:0] main_122_173;
reg [31:0] main_122_173_reg;
reg [15:0] main_122_174;
reg [31:0] main_122_175;
reg [31:0] main_122_175_reg;
reg [15:0] main_122_176;
reg [31:0] main_122_177;
reg [31:0] main__preheader3_i_x_35_i;
reg [31:0] main__preheader3_i_x_35_i_reg;
reg [31:0] main__preheader3_i_tmp30_i;
reg [31:0] main__preheader3_i_tmp30_i_reg;
reg [31:0] main_179_y_14_i;
reg [31:0] main_179_y_14_i_reg;
reg [31:0] main_179_tmp29_i;
reg [31:0] main_179_tmp27_i;
reg [31:0] main_179_tmp27_i_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_179_scevgep21_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_179_scevgep20_i;
reg [15:0] main_179_180;
reg [15:0] main_179_181;
reg [31:0] main_179_182;
reg [31:0] main_179_183;
reg [31:0] main_179_184;
reg [31:0] main_179_185;
reg [31:0] main_179_186;
reg [31:0] main_179_187;
reg [31:0] main_179_188;
reg [15:0] main_179_189;
reg [15:0] main_179_189_reg;
reg [31:0] main_179_190;
reg [31:0] main_179_190_reg;
reg [31:0] main_179_tmp23_i;
reg [31:0] main_179_scevgep22_sum_i;
reg [31:0] main_179_scevgep22_sum_i_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_179_scevgep24_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_179_scevgep24_i_reg;
reg [31:0] main_179_191;
reg [31:0] main_179_191_reg;
reg  main_179_exitcond19_i;
reg  main_179_exitcond19_i_reg;
reg [31:0] main_192_193;
reg  main_192_exitcond28_i;
reg [15:0] main_194_196;
reg [31:0] main_194_197;
reg [31:0] main_194_197_reg;
reg [15:0] main_194_198;
reg [31:0] main_194_199;
reg [31:0] main_194_199_reg;
reg [15:0] main_194_200;
reg [31:0] main_194_201;
reg [31:0] main_194_201_reg;
reg [15:0] main_194_202;
reg [31:0] main_194_203;
reg [31:0] main_194_203_reg;
reg [15:0] main_194_204;
reg [31:0] main_194_205;
reg [15:0] main_194_207;
reg [31:0] main_194_208;
reg [31:0] main_194_208_reg;
reg [15:0] main_194_209;
reg [31:0] main_194_210;
reg [31:0] main_194_210_reg;
reg [15:0] main_194_211;
reg [31:0] main_194_212;
reg [31:0] main_194_212_reg;
reg [15:0] main_194_213;
reg [31:0] main_194_214;
reg [31:0] main_194_214_reg;
reg [15:0] main_194_215;
reg [31:0] main_194_216;
reg [15:0] main_194_218;
reg [31:0] main_194_219;
reg [31:0] main_194_219_reg;
reg [15:0] main_194_220;
reg [31:0] main_194_221;
reg [31:0] main_194_221_reg;
reg [15:0] main_194_222;
reg [31:0] main_194_223;
reg [31:0] main_194_223_reg;
reg [15:0] main_194_224;
reg [31:0] main_194_225;
reg [31:0] main_194_225_reg;
reg [15:0] main_194_226;
reg [31:0] main_194_227;
reg [15:0] main_194_229;
reg [31:0] main_194_230;
reg [31:0] main_194_230_reg;
reg [15:0] main_194_231;
reg [31:0] main_194_232;
reg [31:0] main_194_232_reg;
reg [15:0] main_194_233;
reg [31:0] main_194_234;
reg [31:0] main_194_234_reg;
reg [15:0] main_194_235;
reg [31:0] main_194_236;
reg [31:0] main_194_236_reg;
reg [15:0] main_194_237;
reg [31:0] main_194_238;
reg [15:0] main_194_240;
reg [31:0] main_194_241;
reg [31:0] main_194_241_reg;
reg [15:0] main_194_242;
reg [31:0] main_194_243;
reg [31:0] main_194_243_reg;
reg [15:0] main_194_244;
reg [31:0] main_194_245;
reg [31:0] main_194_245_reg;
reg [15:0] main_194_246;
reg [31:0] main_194_247;
reg [31:0] main_194_247_reg;
reg [15:0] main_194_248;
reg [31:0] main_194_249;
reg [31:0] main__preheader_i_x_42_i;
reg [31:0] main__preheader_i_x_42_i_reg;
reg [31:0] main__preheader_i_tmp18_i;
reg [31:0] main__preheader_i_tmp18_i_reg;
reg [31:0] main__preheader_i_251;
reg [31:0] main__preheader_i_251_reg;
reg  main__preheader_i_tmp_i;
reg  main__preheader_i_tmp_i_reg;
reg [31:0] main__preheader_i_tmp14_i;
reg [31:0] main__preheader_i_tmp14_i_reg;
reg [31:0] main__preheader_i_252;
reg [31:0] main__preheader_i_252_reg;
reg [31:0] main_253_y_21_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_253_scevgep13_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_253_scevgep13_i_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_253_scevgep_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_253_scevgep11_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_253_scevgep12_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_253_scevgep12_i_reg;
reg [15:0] main_253_254;
reg [15:0] main_253_254_reg;
reg [15:0] main_253_255;
reg [15:0] main_253_256;
reg [15:0] main_253_256_reg;
reg [15:0] main_253_257;
reg [15:0] main_253_258;
reg [15:0] main_253_259;
reg [15:0] main_253_259_reg;
reg [31:0] main_253_260;
reg [31:0] main_253_260_reg;
reg  main_253_exitcond_i;
reg  main_253_exitcond_i_reg;
reg [15:0] main_roundFunction_exit_263;
reg [31:0] main_roundFunction_exit_264;
reg [31:0] main_roundFunction_exit_264_reg;
reg [15:0] main_roundFunction_exit_265;
reg [31:0] main_roundFunction_exit_266;
reg [31:0] main_roundFunction_exit_266_reg;
reg [15:0] main_roundFunction_exit_267;
reg [31:0] main_roundFunction_exit_268;
reg [31:0] main_roundFunction_exit_268_reg;
reg [15:0] main_roundFunction_exit_269;
reg [31:0] main_roundFunction_exit_270;
reg [31:0] main_roundFunction_exit_270_reg;
reg [15:0] main_roundFunction_exit_271;
reg [31:0] main_roundFunction_exit_272;
reg [15:0] main_roundFunction_exit_274;
reg [31:0] main_roundFunction_exit_275;
reg [31:0] main_roundFunction_exit_275_reg;
reg [15:0] main_roundFunction_exit_276;
reg [31:0] main_roundFunction_exit_277;
reg [31:0] main_roundFunction_exit_277_reg;
reg [15:0] main_roundFunction_exit_278;
reg [31:0] main_roundFunction_exit_279;
reg [31:0] main_roundFunction_exit_279_reg;
reg [15:0] main_roundFunction_exit_280;
reg [31:0] main_roundFunction_exit_281;
reg [31:0] main_roundFunction_exit_281_reg;
reg [15:0] main_roundFunction_exit_282;
reg [31:0] main_roundFunction_exit_283;
reg [15:0] main_roundFunction_exit_285;
reg [31:0] main_roundFunction_exit_286;
reg [31:0] main_roundFunction_exit_286_reg;
reg [15:0] main_roundFunction_exit_287;
reg [31:0] main_roundFunction_exit_288;
reg [31:0] main_roundFunction_exit_288_reg;
reg [15:0] main_roundFunction_exit_289;
reg [31:0] main_roundFunction_exit_290;
reg [31:0] main_roundFunction_exit_290_reg;
reg [15:0] main_roundFunction_exit_291;
reg [31:0] main_roundFunction_exit_292;
reg [31:0] main_roundFunction_exit_292_reg;
reg [15:0] main_roundFunction_exit_293;
reg [31:0] main_roundFunction_exit_294;
reg [15:0] main_roundFunction_exit_296;
reg [31:0] main_roundFunction_exit_297;
reg [31:0] main_roundFunction_exit_297_reg;
reg [15:0] main_roundFunction_exit_298;
reg [31:0] main_roundFunction_exit_299;
reg [31:0] main_roundFunction_exit_299_reg;
reg [15:0] main_roundFunction_exit_300;
reg [31:0] main_roundFunction_exit_301;
reg [31:0] main_roundFunction_exit_301_reg;
reg [15:0] main_roundFunction_exit_302;
reg [31:0] main_roundFunction_exit_303;
reg [31:0] main_roundFunction_exit_303_reg;
reg [15:0] main_roundFunction_exit_304;
reg [31:0] main_roundFunction_exit_305;
reg [15:0] main_roundFunction_exit_307;
reg [31:0] main_roundFunction_exit_308;
reg [31:0] main_roundFunction_exit_308_reg;
reg [15:0] main_roundFunction_exit_309;
reg [31:0] main_roundFunction_exit_310;
reg [31:0] main_roundFunction_exit_310_reg;
reg [15:0] main_roundFunction_exit_311;
reg [31:0] main_roundFunction_exit_312;
reg [31:0] main_roundFunction_exit_312_reg;
reg [15:0] main_roundFunction_exit_313;
reg [31:0] main_roundFunction_exit_314;
reg [31:0] main_roundFunction_exit_314_reg;
reg [15:0] main_roundFunction_exit_315;
reg [31:0] main_roundFunction_exit_316;
reg [15:0] main_roundFunction_exit_318;
reg [15:0] main_roundFunction_exit_319;
reg [15:0] main_roundFunction_exit_320;
reg [15:0] main_roundFunction_exit_320_reg;
reg [15:0] main_roundFunction_exit_322;
reg [31:0] main_roundFunction_exit_323;
reg [31:0] main_roundFunction_exit_323_reg;
reg [15:0] main_roundFunction_exit_324;
reg [31:0] main_roundFunction_exit_325;
reg [31:0] main_roundFunction_exit_325_reg;
reg [15:0] main_roundFunction_exit_326;
reg [31:0] main_roundFunction_exit_327;
reg [31:0] main_roundFunction_exit_327_reg;
reg [15:0] main_roundFunction_exit_328;
reg [31:0] main_roundFunction_exit_329;
reg [31:0] main_roundFunction_exit_329_reg;
reg [15:0] main_roundFunction_exit_330;
reg [31:0] main_roundFunction_exit_331;
reg [15:0] main_roundFunction_exit_333;
reg [31:0] main_roundFunction_exit_334;
reg [31:0] main_roundFunction_exit_334_reg;
reg [15:0] main_roundFunction_exit_335;
reg [31:0] main_roundFunction_exit_336;
reg [31:0] main_roundFunction_exit_336_reg;
reg [15:0] main_roundFunction_exit_337;
reg [31:0] main_roundFunction_exit_338;
reg [31:0] main_roundFunction_exit_338_reg;
reg [15:0] main_roundFunction_exit_339;
reg [31:0] main_roundFunction_exit_340;
reg [31:0] main_roundFunction_exit_340_reg;
reg [15:0] main_roundFunction_exit_341;
reg [31:0] main_roundFunction_exit_342;
reg [15:0] main_roundFunction_exit_344;
reg [31:0] main_roundFunction_exit_345;
reg [31:0] main_roundFunction_exit_345_reg;
reg [15:0] main_roundFunction_exit_346;
reg [31:0] main_roundFunction_exit_347;
reg [31:0] main_roundFunction_exit_347_reg;
reg [15:0] main_roundFunction_exit_348;
reg [31:0] main_roundFunction_exit_349;
reg [31:0] main_roundFunction_exit_349_reg;
reg [15:0] main_roundFunction_exit_350;
reg [31:0] main_roundFunction_exit_351;
reg [31:0] main_roundFunction_exit_351_reg;
reg [15:0] main_roundFunction_exit_352;
reg [31:0] main_roundFunction_exit_353;
reg [15:0] main_roundFunction_exit_355;
reg [31:0] main_roundFunction_exit_356;
reg [31:0] main_roundFunction_exit_356_reg;
reg [15:0] main_roundFunction_exit_357;
reg [31:0] main_roundFunction_exit_358;
reg [31:0] main_roundFunction_exit_358_reg;
reg [15:0] main_roundFunction_exit_359;
reg [31:0] main_roundFunction_exit_360;
reg [31:0] main_roundFunction_exit_360_reg;
reg [15:0] main_roundFunction_exit_361;
reg [31:0] main_roundFunction_exit_362;
reg [31:0] main_roundFunction_exit_362_reg;
reg [15:0] main_roundFunction_exit_363;
reg [31:0] main_roundFunction_exit_364;
reg [15:0] main_roundFunction_exit_366;
reg [31:0] main_roundFunction_exit_367;
reg [31:0] main_roundFunction_exit_367_reg;
reg [15:0] main_roundFunction_exit_368;
reg [31:0] main_roundFunction_exit_369;
reg [31:0] main_roundFunction_exit_369_reg;
reg [15:0] main_roundFunction_exit_370;
reg [31:0] main_roundFunction_exit_371;
reg [31:0] main_roundFunction_exit_371_reg;
reg [15:0] main_roundFunction_exit_372;
reg [31:0] main_roundFunction_exit_373;
reg [31:0] main_roundFunction_exit_373_reg;
reg [15:0] main_roundFunction_exit_374;
reg [31:0] main_roundFunction_exit_375;
reg [31:0] main_roundFunction_exit_377;
reg [31:0] main_roundFunction_exit_377_reg;
reg  main_roundFunction_exit_exitcond;
reg  main_roundFunction_exit_exitcond_reg;
reg [31:0] main_unsigned_modulus_32_0_op0;
reg [31:0] main_unsigned_modulus_32_0_op1;
wire [31:0] lpm_divide_main_92_99_temp_out;
wire [31:0] main_92_99_unused;
reg  lpm_divide_main_92_99_en;
reg [31:0] lpm_divide_main_92_99_out;
reg [31:0] main_unsigned_modulus_32_0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_s_i_0_phi_temp;
reg [31:0] main_1_2_phi_temp;
reg [31:0] main_66_67_phi_temp;
reg [31:0] main_69_x_010_i_phi_temp;
reg [31:0] main_92_x_19_i_phi_temp;
reg [15:0] main__preheader6_i_115_phi_temp;
reg [31:0] main__preheader6_i_x_28_i_phi_temp;
reg [31:0] main_116_y_07_i_phi_temp;
reg [31:0] main__preheader3_i_x_35_i_phi_temp;
reg [31:0] main_179_y_14_i_phi_temp;
reg [31:0] main__preheader_i_x_42_i_phi_temp;
reg [31:0] main_253_y_21_i_phi_temp;
reg [15:0] main_bitwise_XOR_16_p0i1;
reg [15:0] main_bitwise_XOR_16_p0i1_op0;
reg [15:0] main_bitwise_XOR_16_p0i1_op1;
reg [15:0] main_bitwise_XOR_16_p1i1;
reg [15:0] main_bitwise_XOR_16_p1i1_op0;
reg [15:0] main_bitwise_XOR_16_p1i1_op1;
reg [15:0] main_bitwise_XOR_16_p2i1;
reg [15:0] main_bitwise_XOR_16_p2i1_op0;
reg [15:0] main_bitwise_XOR_16_p2i1_op1;

/*   %99 = urem i32 %tmp43.i, 5*/
lpm_divide lpm_divide_main_92_99 (
	.quotient (main_92_99_unused),
	.remain (lpm_divide_main_92_99_temp_out),
	.clock (clk),
	.aclr (1'd0),
	.clken (lpm_divide_main_92_99_en),
	.numer (main_unsigned_modulus_32_0_op0),
	.denom (main_unsigned_modulus_32_0_op1)
);

defparam
	lpm_divide_main_92_99.lpm_pipeline = 32,
	lpm_divide_main_92_99.lpm_widthn = 32,
	lpm_divide_main_92_99.lpm_widthd = 32,
	lpm_divide_main_92_99.lpm_drepresentation = "UNSIGNED",
	lpm_divide_main_92_99.lpm_nrepresentation = "UNSIGNED",
	lpm_divide_main_92_99.lpm_hint = "LPM_REMAINDERPOSITIVE=FALSE";


/* Unsynthesizable Statements */
always @(posedge clk) begin
/* main: %66*/
/*   %68 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([39 x i8]* @.str11, i32 0, i32 0), i32 %67) nounwind*/
if ((cur_state == LEGUP_F_main_BB_66_7))
begin
$write("Cycle: %d Time: %d    ", ($time-50)/20, $time);
$write("---------------Round %d--------------\n", main_66_67);
// to fix quartus warning
if (^reset !== 1'bX && ^(main_66_67) === 1'bX) finish <= 0;
end
/* main: %80*/
/*   %91 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([42 x i8]* @.str, i32 0, i32 0), i32 %82, i32 %84, i32 %86, i32 %88, i32 %90) nounwind*/
if ((cur_state == LEGUP_F_main_BB_80_18))
begin
$write("Cycle: %d Time: %d    ", ($time-50)/20, $time);
$write("C Value  After theta :%d, %d, %d, %d, %d\n", main_80_82_reg, main_80_84_reg, main_80_86_reg, main_80_88_reg, main_80_90);
// to fix quartus warning
if (^reset !== 1'bX && ^(main_80_82_reg) === 1'bX) finish <= 0;
if (^reset !== 1'bX && ^(main_80_84_reg) === 1'bX) finish <= 0;
if (^reset !== 1'bX && ^(main_80_86_reg) === 1'bX) finish <= 0;
if (^reset !== 1'bX && ^(main_80_88_reg) === 1'bX) finish <= 0;
if (^reset !== 1'bX && ^(main_80_90) === 1'bX) finish <= 0;
end
/* main: %103*/
/*   %114 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([29 x i8]* @.str1, i32 0, i32 0), i32 %105, i32 %107, i32 %109, i32 %111, i32 %113) nounwind*/
if ((cur_state == LEGUP_F_main_BB_103_61))
begin
$write("Cycle: %d Time: %d    ", ($time-50)/20, $time);
$write("D Value: %d, %d, %d, %d, %d\n", main_103_105_reg, main_103_107_reg, main_103_109_reg, main_103_111_reg, main_103_113);
// to fix quartus warning
if (^reset !== 1'bX && ^(main_103_105_reg) === 1'bX) finish <= 0;
if (^reset !== 1'bX && ^(main_103_107_reg) === 1'bX) finish <= 0;
if (^reset !== 1'bX && ^(main_103_109_reg) === 1'bX) finish <= 0;
if (^reset !== 1'bX && ^(main_103_111_reg) === 1'bX) finish <= 0;
if (^reset !== 1'bX && ^(main_103_113) === 1'bX) finish <= 0;
end
/* main: %122*/
/*   %123 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([26 x i8]* @.str2, i32 0, i32 0)) nounwind*/
if ((cur_state == LEGUP_F_main_BB_122_71))
begin
$write("Cycle: %d Time: %d    ", ($time-50)/20, $time);
$write("State After Theta Step: \n");
end
/* main: %122*/
/*   %134 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([29 x i8]* @.str3, i32 0, i32 0), i32 %125, i32 %127, i32 %129, i32 %131, i32 %133) nounwind*/
if ((cur_state == LEGUP_F_main_BB_122_76))
begin
$write("Cycle: %d Time: %d    ", ($time-50)/20, $time);
$write("1st Row: %d, %d, %d, %d, %d\n", main_122_125_reg, main_122_127_reg, main_122_129_reg, main_122_131_reg, main_122_133);
// to fix quartus warning
if (^reset !== 1'bX && ^(main_122_125_reg) === 1'bX) finish <= 0;
if (^reset !== 1'bX && ^(main_122_127_reg) === 1'bX) finish <= 0;
if (^reset !== 1'bX && ^(main_122_129_reg) === 1'bX) finish <= 0;
if (^reset !== 1'bX && ^(main_122_131_reg) === 1'bX) finish <= 0;
if (^reset !== 1'bX && ^(main_122_133) === 1'bX) finish <= 0;
end
/* main: %122*/
/*   %145 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([29 x i8]* @.str4, i32 0, i32 0), i32 %136, i32 %138, i32 %140, i32 %142, i32 %144) nounwind*/
if ((cur_state == LEGUP_F_main_BB_122_81))
begin
$write("Cycle: %d Time: %d    ", ($time-50)/20, $time);
$write("2st Row: %d, %d, %d, %d, %d\n", main_122_136_reg, main_122_138_reg, main_122_140_reg, main_122_142_reg, main_122_144);
// to fix quartus warning
if (^reset !== 1'bX && ^(main_122_136_reg) === 1'bX) finish <= 0;
if (^reset !== 1'bX && ^(main_122_138_reg) === 1'bX) finish <= 0;
if (^reset !== 1'bX && ^(main_122_140_reg) === 1'bX) finish <= 0;
if (^reset !== 1'bX && ^(main_122_142_reg) === 1'bX) finish <= 0;
if (^reset !== 1'bX && ^(main_122_144) === 1'bX) finish <= 0;
end
/* main: %122*/
/*   %156 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([29 x i8]* @.str5, i32 0, i32 0), i32 %147, i32 %149, i32 %151, i32 %153, i32 %155) nounwind*/
if ((cur_state == LEGUP_F_main_BB_122_86))
begin
$write("Cycle: %d Time: %d    ", ($time-50)/20, $time);
$write("3st Row: %d, %d, %d, %d, %d\n", main_122_147_reg, main_122_149_reg, main_122_151_reg, main_122_153_reg, main_122_155);
// to fix quartus warning
if (^reset !== 1'bX && ^(main_122_147_reg) === 1'bX) finish <= 0;
if (^reset !== 1'bX && ^(main_122_149_reg) === 1'bX) finish <= 0;
if (^reset !== 1'bX && ^(main_122_151_reg) === 1'bX) finish <= 0;
if (^reset !== 1'bX && ^(main_122_153_reg) === 1'bX) finish <= 0;
if (^reset !== 1'bX && ^(main_122_155) === 1'bX) finish <= 0;
end
/* main: %122*/
/*   %167 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([29 x i8]* @.str6, i32 0, i32 0), i32 %158, i32 %160, i32 %162, i32 %164, i32 %166) nounwind*/
if ((cur_state == LEGUP_F_main_BB_122_91))
begin
$write("Cycle: %d Time: %d    ", ($time-50)/20, $time);
$write("4st Row: %d, %d, %d, %d, %d\n", main_122_158_reg, main_122_160_reg, main_122_162_reg, main_122_164_reg, main_122_166);
// to fix quartus warning
if (^reset !== 1'bX && ^(main_122_158_reg) === 1'bX) finish <= 0;
if (^reset !== 1'bX && ^(main_122_160_reg) === 1'bX) finish <= 0;
if (^reset !== 1'bX && ^(main_122_162_reg) === 1'bX) finish <= 0;
if (^reset !== 1'bX && ^(main_122_164_reg) === 1'bX) finish <= 0;
if (^reset !== 1'bX && ^(main_122_166) === 1'bX) finish <= 0;
end
/* main: %122*/
/*   %178 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([29 x i8]* @.str7, i32 0, i32 0), i32 %169, i32 %171, i32 %173, i32 %175, i32 %177) nounwind*/
if ((cur_state == LEGUP_F_main_BB_122_96))
begin
$write("Cycle: %d Time: %d    ", ($time-50)/20, $time);
$write("5st Row: %d, %d, %d, %d, %d\n", main_122_169_reg, main_122_171_reg, main_122_173_reg, main_122_175_reg, main_122_177);
// to fix quartus warning
if (^reset !== 1'bX && ^(main_122_169_reg) === 1'bX) finish <= 0;
if (^reset !== 1'bX && ^(main_122_171_reg) === 1'bX) finish <= 0;
if (^reset !== 1'bX && ^(main_122_173_reg) === 1'bX) finish <= 0;
if (^reset !== 1'bX && ^(main_122_175_reg) === 1'bX) finish <= 0;
if (^reset !== 1'bX && ^(main_122_177) === 1'bX) finish <= 0;
end
/* main: %194*/
/*   %195 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([39 x i8]* @.str8, i32 0, i32 0)) nounwind*/
if ((cur_state == LEGUP_F_main_BB_194_136))
begin
$write("Cycle: %d Time: %d    ", ($time-50)/20, $time);
$write("Temporary State (B) after Rho and Pi:\n");
end
/* main: %194*/
/*   %206 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([29 x i8]* @.str3, i32 0, i32 0), i32 %197, i32 %199, i32 %201, i32 %203, i32 %205) nounwind*/
if ((cur_state == LEGUP_F_main_BB_194_141))
begin
$write("Cycle: %d Time: %d    ", ($time-50)/20, $time);
$write("1st Row: %d, %d, %d, %d, %d\n", main_194_197_reg, main_194_199_reg, main_194_201_reg, main_194_203_reg, main_194_205);
// to fix quartus warning
if (^reset !== 1'bX && ^(main_194_197_reg) === 1'bX) finish <= 0;
if (^reset !== 1'bX && ^(main_194_199_reg) === 1'bX) finish <= 0;
if (^reset !== 1'bX && ^(main_194_201_reg) === 1'bX) finish <= 0;
if (^reset !== 1'bX && ^(main_194_203_reg) === 1'bX) finish <= 0;
if (^reset !== 1'bX && ^(main_194_205) === 1'bX) finish <= 0;
end
/* main: %194*/
/*   %217 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([29 x i8]* @.str4, i32 0, i32 0), i32 %208, i32 %210, i32 %212, i32 %214, i32 %216) nounwind*/
if ((cur_state == LEGUP_F_main_BB_194_146))
begin
$write("Cycle: %d Time: %d    ", ($time-50)/20, $time);
$write("2st Row: %d, %d, %d, %d, %d\n", main_194_208_reg, main_194_210_reg, main_194_212_reg, main_194_214_reg, main_194_216);
// to fix quartus warning
if (^reset !== 1'bX && ^(main_194_208_reg) === 1'bX) finish <= 0;
if (^reset !== 1'bX && ^(main_194_210_reg) === 1'bX) finish <= 0;
if (^reset !== 1'bX && ^(main_194_212_reg) === 1'bX) finish <= 0;
if (^reset !== 1'bX && ^(main_194_214_reg) === 1'bX) finish <= 0;
if (^reset !== 1'bX && ^(main_194_216) === 1'bX) finish <= 0;
end
/* main: %194*/
/*   %228 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([29 x i8]* @.str5, i32 0, i32 0), i32 %219, i32 %221, i32 %223, i32 %225, i32 %227) nounwind*/
if ((cur_state == LEGUP_F_main_BB_194_151))
begin
$write("Cycle: %d Time: %d    ", ($time-50)/20, $time);
$write("3st Row: %d, %d, %d, %d, %d\n", main_194_219_reg, main_194_221_reg, main_194_223_reg, main_194_225_reg, main_194_227);
// to fix quartus warning
if (^reset !== 1'bX && ^(main_194_219_reg) === 1'bX) finish <= 0;
if (^reset !== 1'bX && ^(main_194_221_reg) === 1'bX) finish <= 0;
if (^reset !== 1'bX && ^(main_194_223_reg) === 1'bX) finish <= 0;
if (^reset !== 1'bX && ^(main_194_225_reg) === 1'bX) finish <= 0;
if (^reset !== 1'bX && ^(main_194_227) === 1'bX) finish <= 0;
end
/* main: %194*/
/*   %239 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([29 x i8]* @.str6, i32 0, i32 0), i32 %230, i32 %232, i32 %234, i32 %236, i32 %238) nounwind*/
if ((cur_state == LEGUP_F_main_BB_194_156))
begin
$write("Cycle: %d Time: %d    ", ($time-50)/20, $time);
$write("4st Row: %d, %d, %d, %d, %d\n", main_194_230_reg, main_194_232_reg, main_194_234_reg, main_194_236_reg, main_194_238);
// to fix quartus warning
if (^reset !== 1'bX && ^(main_194_230_reg) === 1'bX) finish <= 0;
if (^reset !== 1'bX && ^(main_194_232_reg) === 1'bX) finish <= 0;
if (^reset !== 1'bX && ^(main_194_234_reg) === 1'bX) finish <= 0;
if (^reset !== 1'bX && ^(main_194_236_reg) === 1'bX) finish <= 0;
if (^reset !== 1'bX && ^(main_194_238) === 1'bX) finish <= 0;
end
/* main: %194*/
/*   %250 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([29 x i8]* @.str7, i32 0, i32 0), i32 %241, i32 %243, i32 %245, i32 %247, i32 %249) nounwind*/
if ((cur_state == LEGUP_F_main_BB_194_161))
begin
$write("Cycle: %d Time: %d    ", ($time-50)/20, $time);
$write("5st Row: %d, %d, %d, %d, %d\n", main_194_241_reg, main_194_243_reg, main_194_245_reg, main_194_247_reg, main_194_249);
// to fix quartus warning
if (^reset !== 1'bX && ^(main_194_241_reg) === 1'bX) finish <= 0;
if (^reset !== 1'bX && ^(main_194_243_reg) === 1'bX) finish <= 0;
if (^reset !== 1'bX && ^(main_194_245_reg) === 1'bX) finish <= 0;
if (^reset !== 1'bX && ^(main_194_247_reg) === 1'bX) finish <= 0;
if (^reset !== 1'bX && ^(main_194_249) === 1'bX) finish <= 0;
end
/* main: %roundFunction.exit*/
/*   %262 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([23 x i8]* @.str9, i32 0, i32 0)) nounwind*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_202))
begin
$write("Cycle: %d Time: %d    ", ($time-50)/20, $time);
$write("State after Chi step:\n");
end
/* main: %roundFunction.exit*/
/*   %273 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([29 x i8]* @.str3, i32 0, i32 0), i32 %264, i32 %266, i32 %268, i32 %270, i32 %272) nounwind*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_207))
begin
$write("Cycle: %d Time: %d    ", ($time-50)/20, $time);
$write("1st Row: %d, %d, %d, %d, %d\n", main_roundFunction_exit_264_reg, main_roundFunction_exit_266_reg, main_roundFunction_exit_268_reg, main_roundFunction_exit_270_reg, main_roundFunction_exit_272);
// to fix quartus warning
if (^reset !== 1'bX && ^(main_roundFunction_exit_264_reg) === 1'bX) finish <= 0;
if (^reset !== 1'bX && ^(main_roundFunction_exit_266_reg) === 1'bX) finish <= 0;
if (^reset !== 1'bX && ^(main_roundFunction_exit_268_reg) === 1'bX) finish <= 0;
if (^reset !== 1'bX && ^(main_roundFunction_exit_270_reg) === 1'bX) finish <= 0;
if (^reset !== 1'bX && ^(main_roundFunction_exit_272) === 1'bX) finish <= 0;
end
/* main: %roundFunction.exit*/
/*   %284 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([29 x i8]* @.str4, i32 0, i32 0), i32 %275, i32 %277, i32 %279, i32 %281, i32 %283) nounwind*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_212))
begin
$write("Cycle: %d Time: %d    ", ($time-50)/20, $time);
$write("2st Row: %d, %d, %d, %d, %d\n", main_roundFunction_exit_275_reg, main_roundFunction_exit_277_reg, main_roundFunction_exit_279_reg, main_roundFunction_exit_281_reg, main_roundFunction_exit_283);
// to fix quartus warning
if (^reset !== 1'bX && ^(main_roundFunction_exit_275_reg) === 1'bX) finish <= 0;
if (^reset !== 1'bX && ^(main_roundFunction_exit_277_reg) === 1'bX) finish <= 0;
if (^reset !== 1'bX && ^(main_roundFunction_exit_279_reg) === 1'bX) finish <= 0;
if (^reset !== 1'bX && ^(main_roundFunction_exit_281_reg) === 1'bX) finish <= 0;
if (^reset !== 1'bX && ^(main_roundFunction_exit_283) === 1'bX) finish <= 0;
end
/* main: %roundFunction.exit*/
/*   %295 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([29 x i8]* @.str5, i32 0, i32 0), i32 %286, i32 %288, i32 %290, i32 %292, i32 %294) nounwind*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_217))
begin
$write("Cycle: %d Time: %d    ", ($time-50)/20, $time);
$write("3st Row: %d, %d, %d, %d, %d\n", main_roundFunction_exit_286_reg, main_roundFunction_exit_288_reg, main_roundFunction_exit_290_reg, main_roundFunction_exit_292_reg, main_roundFunction_exit_294);
// to fix quartus warning
if (^reset !== 1'bX && ^(main_roundFunction_exit_286_reg) === 1'bX) finish <= 0;
if (^reset !== 1'bX && ^(main_roundFunction_exit_288_reg) === 1'bX) finish <= 0;
if (^reset !== 1'bX && ^(main_roundFunction_exit_290_reg) === 1'bX) finish <= 0;
if (^reset !== 1'bX && ^(main_roundFunction_exit_292_reg) === 1'bX) finish <= 0;
if (^reset !== 1'bX && ^(main_roundFunction_exit_294) === 1'bX) finish <= 0;
end
/* main: %roundFunction.exit*/
/*   %306 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([29 x i8]* @.str6, i32 0, i32 0), i32 %297, i32 %299, i32 %301, i32 %303, i32 %305) nounwind*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_222))
begin
$write("Cycle: %d Time: %d    ", ($time-50)/20, $time);
$write("4st Row: %d, %d, %d, %d, %d\n", main_roundFunction_exit_297_reg, main_roundFunction_exit_299_reg, main_roundFunction_exit_301_reg, main_roundFunction_exit_303_reg, main_roundFunction_exit_305);
// to fix quartus warning
if (^reset !== 1'bX && ^(main_roundFunction_exit_297_reg) === 1'bX) finish <= 0;
if (^reset !== 1'bX && ^(main_roundFunction_exit_299_reg) === 1'bX) finish <= 0;
if (^reset !== 1'bX && ^(main_roundFunction_exit_301_reg) === 1'bX) finish <= 0;
if (^reset !== 1'bX && ^(main_roundFunction_exit_303_reg) === 1'bX) finish <= 0;
if (^reset !== 1'bX && ^(main_roundFunction_exit_305) === 1'bX) finish <= 0;
end
/* main: %roundFunction.exit*/
/*   %317 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([29 x i8]* @.str7, i32 0, i32 0), i32 %308, i32 %310, i32 %312, i32 %314, i32 %316) nounwind*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_227))
begin
$write("Cycle: %d Time: %d    ", ($time-50)/20, $time);
$write("5st Row: %d, %d, %d, %d, %d\n", main_roundFunction_exit_308_reg, main_roundFunction_exit_310_reg, main_roundFunction_exit_312_reg, main_roundFunction_exit_314_reg, main_roundFunction_exit_316);
// to fix quartus warning
if (^reset !== 1'bX && ^(main_roundFunction_exit_308_reg) === 1'bX) finish <= 0;
if (^reset !== 1'bX && ^(main_roundFunction_exit_310_reg) === 1'bX) finish <= 0;
if (^reset !== 1'bX && ^(main_roundFunction_exit_312_reg) === 1'bX) finish <= 0;
if (^reset !== 1'bX && ^(main_roundFunction_exit_314_reg) === 1'bX) finish <= 0;
if (^reset !== 1'bX && ^(main_roundFunction_exit_316) === 1'bX) finish <= 0;
end
/* main: %roundFunction.exit*/
/*   %321 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([25 x i8]* @.str12, i32 0, i32 0)) nounwind*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_231))
begin
$write("Cycle: %d Time: %d    ", ($time-50)/20, $time);
$write("Final state of round : \n");
end
/* main: %roundFunction.exit*/
/*   %332 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([29 x i8]* @.str3, i32 0, i32 0), i32 %323, i32 %325, i32 %327, i32 %329, i32 %331) nounwind*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_236))
begin
$write("Cycle: %d Time: %d    ", ($time-50)/20, $time);
$write("1st Row: %d, %d, %d, %d, %d\n", main_roundFunction_exit_323_reg, main_roundFunction_exit_325_reg, main_roundFunction_exit_327_reg, main_roundFunction_exit_329_reg, main_roundFunction_exit_331);
// to fix quartus warning
if (^reset !== 1'bX && ^(main_roundFunction_exit_323_reg) === 1'bX) finish <= 0;
if (^reset !== 1'bX && ^(main_roundFunction_exit_325_reg) === 1'bX) finish <= 0;
if (^reset !== 1'bX && ^(main_roundFunction_exit_327_reg) === 1'bX) finish <= 0;
if (^reset !== 1'bX && ^(main_roundFunction_exit_329_reg) === 1'bX) finish <= 0;
if (^reset !== 1'bX && ^(main_roundFunction_exit_331) === 1'bX) finish <= 0;
end
/* main: %roundFunction.exit*/
/*   %343 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([29 x i8]* @.str4, i32 0, i32 0), i32 %334, i32 %336, i32 %338, i32 %340, i32 %342) nounwind*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_241))
begin
$write("Cycle: %d Time: %d    ", ($time-50)/20, $time);
$write("2st Row: %d, %d, %d, %d, %d\n", main_roundFunction_exit_334_reg, main_roundFunction_exit_336_reg, main_roundFunction_exit_338_reg, main_roundFunction_exit_340_reg, main_roundFunction_exit_342);
// to fix quartus warning
if (^reset !== 1'bX && ^(main_roundFunction_exit_334_reg) === 1'bX) finish <= 0;
if (^reset !== 1'bX && ^(main_roundFunction_exit_336_reg) === 1'bX) finish <= 0;
if (^reset !== 1'bX && ^(main_roundFunction_exit_338_reg) === 1'bX) finish <= 0;
if (^reset !== 1'bX && ^(main_roundFunction_exit_340_reg) === 1'bX) finish <= 0;
if (^reset !== 1'bX && ^(main_roundFunction_exit_342) === 1'bX) finish <= 0;
end
/* main: %roundFunction.exit*/
/*   %354 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([29 x i8]* @.str5, i32 0, i32 0), i32 %345, i32 %347, i32 %349, i32 %351, i32 %353) nounwind*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_246))
begin
$write("Cycle: %d Time: %d    ", ($time-50)/20, $time);
$write("3st Row: %d, %d, %d, %d, %d\n", main_roundFunction_exit_345_reg, main_roundFunction_exit_347_reg, main_roundFunction_exit_349_reg, main_roundFunction_exit_351_reg, main_roundFunction_exit_353);
// to fix quartus warning
if (^reset !== 1'bX && ^(main_roundFunction_exit_345_reg) === 1'bX) finish <= 0;
if (^reset !== 1'bX && ^(main_roundFunction_exit_347_reg) === 1'bX) finish <= 0;
if (^reset !== 1'bX && ^(main_roundFunction_exit_349_reg) === 1'bX) finish <= 0;
if (^reset !== 1'bX && ^(main_roundFunction_exit_351_reg) === 1'bX) finish <= 0;
if (^reset !== 1'bX && ^(main_roundFunction_exit_353) === 1'bX) finish <= 0;
end
/* main: %roundFunction.exit*/
/*   %365 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([29 x i8]* @.str6, i32 0, i32 0), i32 %356, i32 %358, i32 %360, i32 %362, i32 %364) nounwind*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_251))
begin
$write("Cycle: %d Time: %d    ", ($time-50)/20, $time);
$write("4st Row: %d, %d, %d, %d, %d\n", main_roundFunction_exit_356_reg, main_roundFunction_exit_358_reg, main_roundFunction_exit_360_reg, main_roundFunction_exit_362_reg, main_roundFunction_exit_364);
// to fix quartus warning
if (^reset !== 1'bX && ^(main_roundFunction_exit_356_reg) === 1'bX) finish <= 0;
if (^reset !== 1'bX && ^(main_roundFunction_exit_358_reg) === 1'bX) finish <= 0;
if (^reset !== 1'bX && ^(main_roundFunction_exit_360_reg) === 1'bX) finish <= 0;
if (^reset !== 1'bX && ^(main_roundFunction_exit_362_reg) === 1'bX) finish <= 0;
if (^reset !== 1'bX && ^(main_roundFunction_exit_364) === 1'bX) finish <= 0;
end
/* main: %roundFunction.exit*/
/*   %376 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([29 x i8]* @.str7, i32 0, i32 0), i32 %367, i32 %369, i32 %371, i32 %373, i32 %375) nounwind*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_256))
begin
$write("Cycle: %d Time: %d    ", ($time-50)/20, $time);
$write("5st Row: %d, %d, %d, %d, %d\n", main_roundFunction_exit_367_reg, main_roundFunction_exit_369_reg, main_roundFunction_exit_371_reg, main_roundFunction_exit_373_reg, main_roundFunction_exit_375);
// to fix quartus warning
if (^reset !== 1'bX && ^(main_roundFunction_exit_367_reg) === 1'bX) finish <= 0;
if (^reset !== 1'bX && ^(main_roundFunction_exit_369_reg) === 1'bX) finish <= 0;
if (^reset !== 1'bX && ^(main_roundFunction_exit_371_reg) === 1'bX) finish <= 0;
if (^reset !== 1'bX && ^(main_roundFunction_exit_373_reg) === 1'bX) finish <= 0;
if (^reset !== 1'bX && ^(main_roundFunction_exit_375) === 1'bX) finish <= 0;
end
/* main: %378*/
/*   %379 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([7 x i8]* @.str13, i32 0, i32 0)) nounwind*/
if ((cur_state == LEGUP_F_main_BB_378_257))
begin
$write("Cycle: %d Time: %d    ", ($time-50)/20, $time);
$write("Done!\n");
end
end
always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_1_2;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_1_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_1_2;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_1_2) & (memory_controller_waitrequest == 1'd0)) & (main_1_3 == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_legup_memset_2_exit_4;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_legup_memset_2_exit_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_1_2) & (memory_controller_waitrequest == 1'd0)) & (main_1_3 == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_4_3;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_4_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_4_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_4_3;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_4_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_4_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_1_2;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_legup_memset_2_exit_4) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_legup_memset_2_exit_4;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_legup_memset_2_exit_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_legup_memset_2_exit_4) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_legup_memset_2_exit_5;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_legup_memset_2_exit_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_legup_memset_2_exit_5) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_legup_memset_2_exit_5;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_legup_memset_2_exit_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_legup_memset_2_exit_5) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_legup_memset_2_exit_6;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_legup_memset_2_exit_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_legup_memset_2_exit_6) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_legup_memset_2_exit_6;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_legup_memset_2_exit_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_legup_memset_2_exit_6) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_66_7;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_66_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_66_7) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_66_7;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_66_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_66_7) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_69_8;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_69_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_69_8) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_69_8;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_69_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_69_8) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_69_9;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_69_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_69_9) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_69_9;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_69_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_69_9) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_69_10;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_69_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_69_10) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_69_10;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_69_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_69_10) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_69_11;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_69_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_69_11) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_69_11;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_69_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_69_11) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_69_12;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_69_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_69_12) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_69_12;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_69_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_69_12) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_69_13;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_69_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_69_13) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_69_13;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_69_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_69_13) & (memory_controller_waitrequest == 1'd0)) & (main_69_exitcond44_i_reg == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_80_14;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_80_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_69_13) & (memory_controller_waitrequest == 1'd0)) & (main_69_exitcond44_i_reg == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_69_8;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_69_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_80_14) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_80_14;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_80_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_80_14) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_80_15;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_80_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_80_15) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_80_15;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_80_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_80_15) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_80_16;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_80_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_80_16) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_80_16;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_80_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_80_16) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_80_17;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_80_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_80_17) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_80_17;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_80_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_80_17) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_80_18;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_80_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_80_18) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_80_18;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_80_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_80_18) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_92_19;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_92_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_92_19) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_92_19;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_92_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_92_19) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_92_20;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_92_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_92_20) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_92_20;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_92_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_92_20) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_92_21;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_92_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_92_21) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_92_21;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_92_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_92_21) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_92_22;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_92_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_92_22) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_92_22;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_92_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_92_22) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_92_23;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_92_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_92_23) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_92_23;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_92_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_92_23) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_92_24;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_92_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_92_24) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_92_24;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_92_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_92_24) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_92_25;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_92_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_92_25) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_92_25;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_92_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_92_25) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_92_26;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_92_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_92_26) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_92_26;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_92_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_92_26) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_92_27;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_92_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_92_27) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_92_27;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_92_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_92_27) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_92_28;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_92_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_92_28) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_92_28;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_92_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_92_28) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_92_29;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_92_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_92_29) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_92_29;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_92_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_92_29) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_92_30;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_92_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_92_30) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_92_30;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_92_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_92_30) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_92_31;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_92_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_92_31) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_92_31;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_92_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_92_31) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_92_32;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_92_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_92_32) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_92_32;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_92_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_92_32) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_92_33;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_92_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_92_33) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_92_33;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_92_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_92_33) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_92_34;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_92_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_92_34) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_92_34;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_92_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_92_34) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_92_35;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_92_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_92_35) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_92_35;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_92_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_92_35) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_92_36;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_92_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_92_36) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_92_36;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_92_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_92_36) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_92_37;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_92_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_92_37) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_92_37;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_92_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_92_37) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_92_38;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_92_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_92_38) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_92_38;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_92_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_92_38) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_92_39;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_92_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_92_39) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_92_39;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_92_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_92_39) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_92_40;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_92_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_92_40) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_92_40;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_92_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_92_40) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_92_41;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_92_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_92_41) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_92_41;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_92_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_92_41) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_92_42;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_92_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_92_42) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_92_42;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_92_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_92_42) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_92_43;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_92_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_92_43) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_92_43;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_92_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_92_43) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_92_44;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_92_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_92_44) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_92_44;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_92_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_92_44) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_92_45;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_92_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_92_45) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_92_45;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_92_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_92_45) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_92_46;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_92_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_92_46) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_92_46;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_92_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_92_46) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_92_47;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_92_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_92_47) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_92_47;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_92_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_92_47) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_92_48;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_92_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_92_48) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_92_48;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_92_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_92_48) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_92_49;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_92_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_92_49) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_92_49;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_92_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_92_49) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_92_50;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_92_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_92_50) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_92_50;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_92_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_92_50) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_92_51;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_92_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_92_51) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_92_51;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_92_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_92_51) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_92_52;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_92_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_92_52) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_92_52;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_92_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_92_52) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_92_53;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_92_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_92_53) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_92_53;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_92_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_92_53) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_92_54;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_92_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_92_54) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_92_54;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_92_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_92_54) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_92_55;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_92_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_92_55) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_92_55;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_92_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_92_55) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_92_56;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_92_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_92_56) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_92_56;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_92_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_92_56) & (memory_controller_waitrequest == 1'd0)) & (main_92_tmp39_i_reg == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_103_57;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_103_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_92_56) & (memory_controller_waitrequest == 1'd0)) & (main_92_tmp39_i_reg == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_92_19;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_92_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_103_57) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_103_57;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_103_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_103_57) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_103_58;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_103_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_103_58) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_103_58;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_103_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_103_58) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_103_59;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_103_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_103_59) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_103_59;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_103_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_103_59) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_103_60;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_103_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_103_60) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_103_60;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_103_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_103_60) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_103_61;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_103_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_103_61) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_103_61;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_103_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_103_61) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader6_i_62;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB__preheader6_i_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader6_i_62) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader6_i_62;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB__preheader6_i_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader6_i_62) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_116_63;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_116_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_116_63) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_116_63;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_116_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_116_63) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_116_64;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_116_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_116_64) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_116_64;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_116_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_116_64) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_116_65;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_116_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_116_65) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_116_65;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_116_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_116_65) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_116_66;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_116_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_116_66) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_116_66;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_116_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_116_66) & (memory_controller_waitrequest == 1'd0)) & (main_116_exitcond34_i_reg == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_120_67;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_120_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_116_66) & (memory_controller_waitrequest == 1'd0)) & (main_116_exitcond34_i_reg == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_116_63;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_116_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_120_67) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_120_67;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_120_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_120_67) & (memory_controller_waitrequest == 1'd0)) & (main_120_exitcond36_i == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_122_71;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_122_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_120_67) & (memory_controller_waitrequest == 1'd0)) & (main_120_exitcond36_i == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB___preheader6_crit_edge_i_68;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB___preheader6_crit_edge_i_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB___preheader6_crit_edge_i_68) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB___preheader6_crit_edge_i_68;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB___preheader6_crit_edge_i_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB___preheader6_crit_edge_i_68) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB___preheader6_crit_edge_i_69;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB___preheader6_crit_edge_i_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB___preheader6_crit_edge_i_69) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB___preheader6_crit_edge_i_69;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB___preheader6_crit_edge_i_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB___preheader6_crit_edge_i_69) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB___preheader6_crit_edge_i_70;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB___preheader6_crit_edge_i_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB___preheader6_crit_edge_i_70) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB___preheader6_crit_edge_i_70;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB___preheader6_crit_edge_i_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB___preheader6_crit_edge_i_70) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader6_i_62;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB__preheader6_i_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_122_71) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_122_71;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_122_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_122_71) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_122_72;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_122_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_122_72) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_122_72;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_122_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_122_72) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_122_73;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_122_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_122_73) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_122_73;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_122_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_122_73) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_122_74;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_122_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_122_74) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_122_74;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_122_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_122_74) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_122_75;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_122_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_122_75) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_122_75;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_122_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_122_75) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_122_76;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_122_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_122_76) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_122_76;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_122_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_122_76) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_122_77;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_122_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_122_77) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_122_77;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_122_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_122_77) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_122_78;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_122_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_122_78) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_122_78;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_122_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_122_78) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_122_79;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_122_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_122_79) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_122_79;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_122_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_122_79) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_122_80;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_122_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_122_80) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_122_80;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_122_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_122_80) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_122_81;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_122_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_122_81) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_122_81;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_122_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_122_81) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_122_82;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_122_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_122_82) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_122_82;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_122_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_122_82) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_122_83;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_122_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_122_83) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_122_83;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_122_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_122_83) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_122_84;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_122_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_122_84) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_122_84;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_122_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_122_84) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_122_85;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_122_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_122_85) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_122_85;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_122_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_122_85) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_122_86;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_122_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_122_86) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_122_86;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_122_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_122_86) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_122_87;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_122_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_122_87) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_122_87;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_122_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_122_87) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_122_88;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_122_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_122_88) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_122_88;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_122_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_122_88) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_122_89;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_122_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_122_89) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_122_89;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_122_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_122_89) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_122_90;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_122_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_122_90) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_122_90;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_122_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_122_90) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_122_91;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_122_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_122_91) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_122_91;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_122_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_122_91) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_122_92;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_122_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_122_92) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_122_92;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_122_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_122_92) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_122_93;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_122_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_122_93) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_122_93;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_122_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_122_93) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_122_94;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_122_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_122_94) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_122_94;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_122_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_122_94) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_122_95;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_122_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_122_95) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_122_95;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_122_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_122_95) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_122_96;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_122_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_122_96) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_122_96;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_122_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_122_96) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader3_i_97;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB__preheader3_i_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader3_i_97) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader3_i_97;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB__preheader3_i_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader3_i_97) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_179_98;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_179_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_179_98) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_179_98;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_179_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_179_98) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_179_99;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_179_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_179_99) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_179_99;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_179_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_179_99) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_179_100;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_179_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_179_100) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_179_100;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_179_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_179_100) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_179_101;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_179_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_179_101) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_179_101;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_179_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_179_101) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_179_102;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_179_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_179_102) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_179_102;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_179_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_179_102) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_179_103;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_179_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_179_103) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_179_103;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_179_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_179_103) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_179_104;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_179_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_179_104) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_179_104;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_179_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_179_104) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_179_105;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_179_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_179_105) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_179_105;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_179_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_179_105) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_179_106;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_179_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_179_106) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_179_106;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_179_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_179_106) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_179_107;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_179_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_179_107) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_179_107;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_179_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_179_107) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_179_108;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_179_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_179_108) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_179_108;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_179_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_179_108) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_179_109;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_179_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_179_109) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_179_109;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_179_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_179_109) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_179_110;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_179_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_179_110) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_179_110;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_179_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_179_110) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_179_111;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_179_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_179_111) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_179_111;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_179_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_179_111) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_179_112;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_179_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_179_112) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_179_112;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_179_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_179_112) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_179_113;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_179_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_179_113) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_179_113;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_179_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_179_113) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_179_114;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_179_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_179_114) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_179_114;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_179_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_179_114) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_179_115;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_179_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_179_115) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_179_115;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_179_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_179_115) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_179_116;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_179_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_179_116) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_179_116;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_179_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_179_116) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_179_117;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_179_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_179_117) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_179_117;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_179_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_179_117) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_179_118;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_179_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_179_118) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_179_118;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_179_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_179_118) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_179_119;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_179_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_179_119) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_179_119;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_179_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_179_119) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_179_120;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_179_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_179_120) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_179_120;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_179_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_179_120) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_179_121;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_179_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_179_121) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_179_121;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_179_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_179_121) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_179_122;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_179_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_179_122) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_179_122;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_179_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_179_122) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_179_123;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_179_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_179_123) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_179_123;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_179_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_179_123) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_179_124;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_179_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_179_124) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_179_124;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_179_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_179_124) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_179_125;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_179_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_179_125) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_179_125;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_179_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_179_125) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_179_126;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_179_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_179_126) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_179_126;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_179_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_179_126) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_179_127;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_179_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_179_127) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_179_127;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_179_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_179_127) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_179_128;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_179_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_179_128) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_179_128;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_179_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_179_128) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_179_129;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_179_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_179_129) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_179_129;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_179_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_179_129) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_179_130;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_179_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_179_130) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_179_130;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_179_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_179_130) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_179_131;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_179_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_179_131) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_179_131;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_179_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_179_131) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_179_132;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_179_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_179_132) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_179_132;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_179_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_179_132) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_179_133;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_179_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_179_133) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_179_133;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_179_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_179_133) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_179_134;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_179_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_179_134) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_179_134;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_179_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_179_134) & (memory_controller_waitrequest == 1'd0)) & (main_179_exitcond19_i_reg == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_192_135;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_192_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_179_134) & (memory_controller_waitrequest == 1'd0)) & (main_179_exitcond19_i_reg == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_179_98;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_179_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_192_135) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_192_135;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_192_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_192_135) & (memory_controller_waitrequest == 1'd0)) & (main_192_exitcond28_i == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_194_136;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_194_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_192_135) & (memory_controller_waitrequest == 1'd0)) & (main_192_exitcond28_i == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader3_i_97;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB__preheader3_i_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_194_136) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_194_136;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_194_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_194_136) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_194_137;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_194_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_194_137) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_194_137;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_194_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_194_137) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_194_138;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_194_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_194_138) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_194_138;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_194_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_194_138) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_194_139;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_194_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_194_139) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_194_139;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_194_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_194_139) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_194_140;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_194_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_194_140) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_194_140;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_194_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_194_140) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_194_141;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_194_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_194_141) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_194_141;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_194_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_194_141) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_194_142;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_194_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_194_142) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_194_142;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_194_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_194_142) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_194_143;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_194_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_194_143) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_194_143;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_194_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_194_143) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_194_144;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_194_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_194_144) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_194_144;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_194_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_194_144) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_194_145;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_194_145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_194_145) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_194_145;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_194_145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_194_145) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_194_146;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_194_146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_194_146) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_194_146;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_194_146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_194_146) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_194_147;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_194_147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_194_147) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_194_147;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_194_147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_194_147) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_194_148;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_194_148) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_194_148) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_194_148;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_194_148) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_194_148) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_194_149;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_194_149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_194_149) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_194_149;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_194_149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_194_149) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_194_150;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_194_150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_194_150) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_194_150;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_194_150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_194_150) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_194_151;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_194_151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_194_151) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_194_151;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_194_151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_194_151) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_194_152;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_194_152) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_194_152) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_194_152;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_194_152) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_194_152) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_194_153;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_194_153) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_194_153) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_194_153;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_194_153) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_194_153) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_194_154;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_194_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_194_154) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_194_154;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_194_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_194_154) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_194_155;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_194_155) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_194_155) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_194_155;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_194_155) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_194_155) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_194_156;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_194_156) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_194_156) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_194_156;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_194_156) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_194_156) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_194_157;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_194_157) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_194_157) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_194_157;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_194_157) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_194_157) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_194_158;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_194_158) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_194_158) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_194_158;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_194_158) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_194_158) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_194_159;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_194_159) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_194_159) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_194_159;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_194_159) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_194_159) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_194_160;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_194_160) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_194_160) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_194_160;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_194_160) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_194_160) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_194_161;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_194_161) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_194_161) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_194_161;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_194_161) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_194_161) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader_i_162;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB__preheader_i_162) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader_i_162) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader_i_162;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB__preheader_i_162) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader_i_162) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader_i_163;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB__preheader_i_163) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader_i_163) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader_i_163;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB__preheader_i_163) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader_i_163) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader_i_164;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB__preheader_i_164) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader_i_164) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader_i_164;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB__preheader_i_164) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader_i_164) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader_i_165;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB__preheader_i_165) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader_i_165) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader_i_165;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB__preheader_i_165) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader_i_165) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader_i_166;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB__preheader_i_166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader_i_166) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader_i_166;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB__preheader_i_166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader_i_166) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader_i_167;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB__preheader_i_167) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader_i_167) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader_i_167;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB__preheader_i_167) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader_i_167) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader_i_168;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB__preheader_i_168) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader_i_168) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader_i_168;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB__preheader_i_168) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader_i_168) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader_i_169;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB__preheader_i_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader_i_169) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader_i_169;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB__preheader_i_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader_i_169) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader_i_170;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB__preheader_i_170) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader_i_170) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader_i_170;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB__preheader_i_170) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader_i_170) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader_i_171;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB__preheader_i_171) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader_i_171) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader_i_171;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB__preheader_i_171) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader_i_171) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader_i_172;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB__preheader_i_172) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader_i_172) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader_i_172;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB__preheader_i_172) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader_i_172) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader_i_173;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB__preheader_i_173) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader_i_173) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader_i_173;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB__preheader_i_173) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader_i_173) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader_i_174;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB__preheader_i_174) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader_i_174) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader_i_174;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB__preheader_i_174) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader_i_174) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader_i_175;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB__preheader_i_175) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader_i_175) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader_i_175;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB__preheader_i_175) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader_i_175) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader_i_176;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB__preheader_i_176) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader_i_176) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader_i_176;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB__preheader_i_176) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader_i_176) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader_i_177;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB__preheader_i_177) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader_i_177) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader_i_177;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB__preheader_i_177) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader_i_177) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader_i_178;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB__preheader_i_178) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader_i_178) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader_i_178;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB__preheader_i_178) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader_i_178) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader_i_179;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB__preheader_i_179) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader_i_179) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader_i_179;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB__preheader_i_179) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader_i_179) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader_i_180;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB__preheader_i_180) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader_i_180) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader_i_180;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB__preheader_i_180) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader_i_180) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader_i_181;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB__preheader_i_181) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader_i_181) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader_i_181;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB__preheader_i_181) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader_i_181) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader_i_182;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB__preheader_i_182) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader_i_182) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader_i_182;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB__preheader_i_182) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader_i_182) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader_i_183;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB__preheader_i_183) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader_i_183) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader_i_183;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB__preheader_i_183) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader_i_183) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader_i_184;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB__preheader_i_184) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader_i_184) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader_i_184;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB__preheader_i_184) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader_i_184) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader_i_185;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB__preheader_i_185) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader_i_185) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader_i_185;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB__preheader_i_185) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader_i_185) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader_i_186;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB__preheader_i_186) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader_i_186) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader_i_186;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB__preheader_i_186) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader_i_186) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader_i_187;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB__preheader_i_187) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader_i_187) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader_i_187;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB__preheader_i_187) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader_i_187) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader_i_188;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB__preheader_i_188) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader_i_188) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader_i_188;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB__preheader_i_188) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader_i_188) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader_i_189;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB__preheader_i_189) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader_i_189) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader_i_189;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB__preheader_i_189) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader_i_189) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader_i_190;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB__preheader_i_190) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader_i_190) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader_i_190;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB__preheader_i_190) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader_i_190) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader_i_191;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB__preheader_i_191) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader_i_191) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader_i_191;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB__preheader_i_191) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader_i_191) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader_i_192;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB__preheader_i_192) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader_i_192) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader_i_192;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB__preheader_i_192) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader_i_192) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader_i_193;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB__preheader_i_193) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader_i_193) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader_i_193;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB__preheader_i_193) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader_i_193) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader_i_194;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB__preheader_i_194) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader_i_194) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader_i_194;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB__preheader_i_194) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader_i_194) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader_i_195;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB__preheader_i_195) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader_i_195) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader_i_195;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB__preheader_i_195) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader_i_195) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_253_196;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_253_196) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_253_196) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_253_196;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_253_196) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_253_196) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_253_197;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_253_197) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_253_197) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_253_197;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_253_197) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_253_197) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_253_198;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_253_198) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_253_198) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_253_198;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_253_198) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_253_198) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_253_199;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_253_199) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_253_199) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_253_199;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_253_199) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_253_199) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_253_200;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_253_200) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_253_200) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_253_200;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_253_200) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_253_200) & (memory_controller_waitrequest == 1'd0)) & (main_253_exitcond_i_reg == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_261_201;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_261_201) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_253_200) & (memory_controller_waitrequest == 1'd0)) & (main_253_exitcond_i_reg == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_253_196;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_253_196) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_261_201) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_261_201;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_261_201) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_261_201) & (memory_controller_waitrequest == 1'd0)) & (main__preheader_i_tmp_i_reg == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_roundFunction_exit_202;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_roundFunction_exit_202) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_261_201) & (memory_controller_waitrequest == 1'd0)) & (main__preheader_i_tmp_i_reg == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__preheader_i_162;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB__preheader_i_162) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_roundFunction_exit_202) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_roundFunction_exit_202;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_roundFunction_exit_202) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_roundFunction_exit_202) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_roundFunction_exit_203;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_roundFunction_exit_203) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_roundFunction_exit_203) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_roundFunction_exit_203;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_roundFunction_exit_203) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_roundFunction_exit_203) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_roundFunction_exit_204;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_roundFunction_exit_204) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_roundFunction_exit_204) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_roundFunction_exit_204;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_roundFunction_exit_204) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_roundFunction_exit_204) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_roundFunction_exit_205;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_roundFunction_exit_205) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_roundFunction_exit_205) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_roundFunction_exit_205;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_roundFunction_exit_205) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_roundFunction_exit_205) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_roundFunction_exit_206;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_roundFunction_exit_206) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_roundFunction_exit_206) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_roundFunction_exit_206;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_roundFunction_exit_206) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_roundFunction_exit_206) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_roundFunction_exit_207;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_roundFunction_exit_207) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_roundFunction_exit_207) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_roundFunction_exit_207;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_roundFunction_exit_207) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_roundFunction_exit_207) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_roundFunction_exit_208;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_roundFunction_exit_208) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_roundFunction_exit_208) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_roundFunction_exit_208;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_roundFunction_exit_208) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_roundFunction_exit_208) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_roundFunction_exit_209;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_roundFunction_exit_209) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_roundFunction_exit_209) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_roundFunction_exit_209;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_roundFunction_exit_209) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_roundFunction_exit_209) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_roundFunction_exit_210;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_roundFunction_exit_210) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_roundFunction_exit_210) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_roundFunction_exit_210;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_roundFunction_exit_210) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_roundFunction_exit_210) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_roundFunction_exit_211;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_roundFunction_exit_211) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_roundFunction_exit_211) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_roundFunction_exit_211;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_roundFunction_exit_211) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_roundFunction_exit_211) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_roundFunction_exit_212;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_roundFunction_exit_212) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_roundFunction_exit_212) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_roundFunction_exit_212;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_roundFunction_exit_212) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_roundFunction_exit_212) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_roundFunction_exit_213;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_roundFunction_exit_213) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_roundFunction_exit_213) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_roundFunction_exit_213;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_roundFunction_exit_213) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_roundFunction_exit_213) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_roundFunction_exit_214;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_roundFunction_exit_214) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_roundFunction_exit_214) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_roundFunction_exit_214;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_roundFunction_exit_214) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_roundFunction_exit_214) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_roundFunction_exit_215;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_roundFunction_exit_215) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_roundFunction_exit_215) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_roundFunction_exit_215;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_roundFunction_exit_215) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_roundFunction_exit_215) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_roundFunction_exit_216;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_roundFunction_exit_216) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_roundFunction_exit_216) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_roundFunction_exit_216;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_roundFunction_exit_216) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_roundFunction_exit_216) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_roundFunction_exit_217;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_roundFunction_exit_217) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_roundFunction_exit_217) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_roundFunction_exit_217;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_roundFunction_exit_217) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_roundFunction_exit_217) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_roundFunction_exit_218;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_roundFunction_exit_218) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_roundFunction_exit_218) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_roundFunction_exit_218;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_roundFunction_exit_218) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_roundFunction_exit_218) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_roundFunction_exit_219;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_roundFunction_exit_219) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_roundFunction_exit_219) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_roundFunction_exit_219;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_roundFunction_exit_219) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_roundFunction_exit_219) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_roundFunction_exit_220;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_roundFunction_exit_220) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_roundFunction_exit_220) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_roundFunction_exit_220;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_roundFunction_exit_220) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_roundFunction_exit_220) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_roundFunction_exit_221;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_roundFunction_exit_221) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_roundFunction_exit_221) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_roundFunction_exit_221;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_roundFunction_exit_221) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_roundFunction_exit_221) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_roundFunction_exit_222;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_roundFunction_exit_222) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_roundFunction_exit_222) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_roundFunction_exit_222;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_roundFunction_exit_222) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_roundFunction_exit_222) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_roundFunction_exit_223;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_roundFunction_exit_223) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_roundFunction_exit_223) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_roundFunction_exit_223;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_roundFunction_exit_223) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_roundFunction_exit_223) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_roundFunction_exit_224;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_roundFunction_exit_224) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_roundFunction_exit_224) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_roundFunction_exit_224;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_roundFunction_exit_224) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_roundFunction_exit_224) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_roundFunction_exit_225;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_roundFunction_exit_225) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_roundFunction_exit_225) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_roundFunction_exit_225;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_roundFunction_exit_225) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_roundFunction_exit_225) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_roundFunction_exit_226;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_roundFunction_exit_226) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_roundFunction_exit_226) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_roundFunction_exit_226;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_roundFunction_exit_226) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_roundFunction_exit_226) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_roundFunction_exit_227;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_roundFunction_exit_227) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_roundFunction_exit_227) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_roundFunction_exit_227;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_roundFunction_exit_227) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_roundFunction_exit_227) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_roundFunction_exit_228;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_roundFunction_exit_228) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_roundFunction_exit_228) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_roundFunction_exit_228;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_roundFunction_exit_228) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_roundFunction_exit_228) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_roundFunction_exit_229;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_roundFunction_exit_229) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_roundFunction_exit_229) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_roundFunction_exit_229;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_roundFunction_exit_229) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_roundFunction_exit_229) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_roundFunction_exit_230;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_roundFunction_exit_230) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_roundFunction_exit_230) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_roundFunction_exit_230;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_roundFunction_exit_230) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_roundFunction_exit_230) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_roundFunction_exit_231;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_roundFunction_exit_231) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_roundFunction_exit_231) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_roundFunction_exit_231;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_roundFunction_exit_231) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_roundFunction_exit_231) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_roundFunction_exit_232;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_roundFunction_exit_232) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_roundFunction_exit_232) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_roundFunction_exit_232;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_roundFunction_exit_232) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_roundFunction_exit_232) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_roundFunction_exit_233;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_roundFunction_exit_233) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_roundFunction_exit_233) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_roundFunction_exit_233;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_roundFunction_exit_233) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_roundFunction_exit_233) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_roundFunction_exit_234;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_roundFunction_exit_234) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_roundFunction_exit_234) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_roundFunction_exit_234;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_roundFunction_exit_234) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_roundFunction_exit_234) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_roundFunction_exit_235;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_roundFunction_exit_235) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_roundFunction_exit_235) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_roundFunction_exit_235;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_roundFunction_exit_235) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_roundFunction_exit_235) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_roundFunction_exit_236;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_roundFunction_exit_236) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_roundFunction_exit_236) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_roundFunction_exit_236;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_roundFunction_exit_236) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_roundFunction_exit_236) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_roundFunction_exit_237;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_roundFunction_exit_237) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_roundFunction_exit_237) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_roundFunction_exit_237;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_roundFunction_exit_237) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_roundFunction_exit_237) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_roundFunction_exit_238;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_roundFunction_exit_238) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_roundFunction_exit_238) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_roundFunction_exit_238;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_roundFunction_exit_238) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_roundFunction_exit_238) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_roundFunction_exit_239;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_roundFunction_exit_239) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_roundFunction_exit_239) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_roundFunction_exit_239;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_roundFunction_exit_239) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_roundFunction_exit_239) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_roundFunction_exit_240;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_roundFunction_exit_240) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_roundFunction_exit_240) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_roundFunction_exit_240;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_roundFunction_exit_240) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_roundFunction_exit_240) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_roundFunction_exit_241;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_roundFunction_exit_241) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_roundFunction_exit_241) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_roundFunction_exit_241;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_roundFunction_exit_241) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_roundFunction_exit_241) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_roundFunction_exit_242;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_roundFunction_exit_242) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_roundFunction_exit_242) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_roundFunction_exit_242;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_roundFunction_exit_242) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_roundFunction_exit_242) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_roundFunction_exit_243;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_roundFunction_exit_243) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_roundFunction_exit_243) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_roundFunction_exit_243;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_roundFunction_exit_243) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_roundFunction_exit_243) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_roundFunction_exit_244;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_roundFunction_exit_244) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_roundFunction_exit_244) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_roundFunction_exit_244;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_roundFunction_exit_244) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_roundFunction_exit_244) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_roundFunction_exit_245;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_roundFunction_exit_245) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_roundFunction_exit_245) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_roundFunction_exit_245;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_roundFunction_exit_245) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_roundFunction_exit_245) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_roundFunction_exit_246;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_roundFunction_exit_246) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_roundFunction_exit_246) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_roundFunction_exit_246;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_roundFunction_exit_246) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_roundFunction_exit_246) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_roundFunction_exit_247;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_roundFunction_exit_247) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_roundFunction_exit_247) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_roundFunction_exit_247;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_roundFunction_exit_247) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_roundFunction_exit_247) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_roundFunction_exit_248;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_roundFunction_exit_248) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_roundFunction_exit_248) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_roundFunction_exit_248;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_roundFunction_exit_248) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_roundFunction_exit_248) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_roundFunction_exit_249;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_roundFunction_exit_249) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_roundFunction_exit_249) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_roundFunction_exit_249;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_roundFunction_exit_249) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_roundFunction_exit_249) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_roundFunction_exit_250;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_roundFunction_exit_250) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_roundFunction_exit_250) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_roundFunction_exit_250;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_roundFunction_exit_250) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_roundFunction_exit_250) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_roundFunction_exit_251;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_roundFunction_exit_251) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_roundFunction_exit_251) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_roundFunction_exit_251;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_roundFunction_exit_251) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_roundFunction_exit_251) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_roundFunction_exit_252;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_roundFunction_exit_252) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_roundFunction_exit_252) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_roundFunction_exit_252;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_roundFunction_exit_252) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_roundFunction_exit_252) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_roundFunction_exit_253;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_roundFunction_exit_253) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_roundFunction_exit_253) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_roundFunction_exit_253;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_roundFunction_exit_253) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_roundFunction_exit_253) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_roundFunction_exit_254;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_roundFunction_exit_254) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_roundFunction_exit_254) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_roundFunction_exit_254;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_roundFunction_exit_254) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_roundFunction_exit_254) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_roundFunction_exit_255;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_roundFunction_exit_255) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_roundFunction_exit_255) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_roundFunction_exit_255;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_roundFunction_exit_255) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_roundFunction_exit_255) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_roundFunction_exit_256;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_roundFunction_exit_256) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_roundFunction_exit_256) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_roundFunction_exit_256;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_roundFunction_exit_256) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_roundFunction_exit_256) & (memory_controller_waitrequest == 1'd0)) & (main_roundFunction_exit_exitcond_reg == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_378_257;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_378_257) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_roundFunction_exit_256) & (memory_controller_waitrequest == 1'd0)) & (main_roundFunction_exit_exitcond_reg == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_66_7;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_66_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_378_257) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_378_257;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_378_257) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_378_257) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 9'd0;
if (^reset !== 1'bX && ^(9'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %tmp = getelementptr inbounds [5 x [5 x i16]]* %A, i32 0, i32 0, i32 0*/
if (reset) begin main_0_tmp = 0; end
begin
main_0_tmp = `TAG_main_0_A_a;
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %tmp = getelementptr inbounds [5 x [5 x i16]]* %A, i32 0, i32 0, i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_tmp_reg <= main_0_tmp;
if (^reset !== 1'bX && ^(main_0_tmp) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_tmp_reg"); $finish; end
end
end
always @(*) begin
/* main: %1*/
/*   %s.i.0 = phi i16* [ %tmp, %0 ], [ %6, %4 ]*/
if ((cur_state == LEGUP_F_main_BB_1_2))
begin
main_1_s_i_0 = main_1_s_i_0_phi_temp;
end
/* main: %1*/
/*   %s.i.0 = phi i16* [ %tmp, %0 ], [ %6, %4 ]*/
else if ((cur_state == LEGUP_F_main_BB_1_2))
begin
main_1_s_i_0 = main_1_s_i_0_phi_temp;
end
/* main: %1*/
/*   %s.i.0 = phi i16* [ %tmp, %0 ], [ %6, %4 ]*/
else /* if ((cur_state == LEGUP_F_main_BB_1_2)) */
begin
main_1_s_i_0 = main_1_s_i_0_phi_temp;
end
end
always @(posedge clk) begin
/* main: %1*/
/*   %s.i.0 = phi i16* [ %tmp, %0 ], [ %6, %4 ]*/
if ((cur_state == LEGUP_F_main_BB_1_2))
begin
main_1_s_i_0_reg <= main_1_s_i_0;
if (^reset !== 1'bX && ^(main_1_s_i_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_s_i_0_reg"); $finish; end
end
/* main: %1*/
/*   %s.i.0 = phi i16* [ %tmp, %0 ], [ %6, %4 ]*/
if ((cur_state == LEGUP_F_main_BB_1_2))
begin
main_1_s_i_0_reg <= main_1_s_i_0;
if (^reset !== 1'bX && ^(main_1_s_i_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_s_i_0_reg"); $finish; end
end
/* main: %1*/
/*   %s.i.0 = phi i16* [ %tmp, %0 ], [ %6, %4 ]*/
if ((cur_state == LEGUP_F_main_BB_1_2))
begin
main_1_s_i_0_reg <= main_1_s_i_0;
if (^reset !== 1'bX && ^(main_1_s_i_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_s_i_0_reg"); $finish; end
end
/* main: %1*/
/*   %s.i.0 = phi i16* [ %tmp, %0 ], [ %6, %4 ]*/
if ((cur_state == LEGUP_F_main_BB_1_2))
begin
main_1_s_i_0_reg <= main_1_s_i_0;
if (^reset !== 1'bX && ^(main_1_s_i_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_s_i_0_reg"); $finish; end
end
end
always @(*) begin
/* main: %1*/
/*   %2 = phi i32 [ 25, %0 ], [ %5, %4 ]*/
if ((cur_state == LEGUP_F_main_BB_1_2))
begin
main_1_2 = main_1_2_phi_temp;
end
/* main: %1*/
/*   %2 = phi i32 [ 25, %0 ], [ %5, %4 ]*/
else /* if ((cur_state == LEGUP_F_main_BB_1_2)) */
begin
main_1_2 = main_1_2_phi_temp;
end
end
always @(posedge clk) begin
/* main: %1*/
/*   %2 = phi i32 [ 25, %0 ], [ %5, %4 ]*/
if ((cur_state == LEGUP_F_main_BB_1_2))
begin
main_1_2_reg <= main_1_2;
if (^reset !== 1'bX && ^(main_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_2_reg"); $finish; end
end
/* main: %1*/
/*   %2 = phi i32 [ 25, %0 ], [ %5, %4 ]*/
if ((cur_state == LEGUP_F_main_BB_1_2))
begin
main_1_2_reg <= main_1_2;
if (^reset !== 1'bX && ^(main_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_2_reg"); $finish; end
end
/* main: %1*/
/*   %2 = phi i32 [ 25, %0 ], [ %5, %4 ]*/
if ((cur_state == LEGUP_F_main_BB_1_2))
begin
main_1_2_reg <= main_1_2;
if (^reset !== 1'bX && ^(main_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_2_reg"); $finish; end
end
end
always @(*) begin
/* main: %1*/
/*   %3 = icmp eq i32 %2, 0*/
begin
main_1_3 = (main_1_2 == 32'd0);
end
end
always @(*) begin
/* main: %4*/
/*   %5 = add i32 %2, -1*/
begin
main_4_5 = (main_1_2_reg + -32'd1);
end
end
always @(*) begin
/* main: %4*/
/*   %6 = getelementptr inbounds i16* %s.i.0, i32 1*/
begin
main_4_6 = (main_1_s_i_0_reg + (2 * 32'd1));
end
end
always @(*) begin
/* main: %legup_memset_2.exit*/
/*   %7 = getelementptr [5 x [5 x i16]]* %A, i32 0, i32 0, i32 1*/
if (reset) begin main_legup_memset_2_exit_7 = 0; end
begin
main_legup_memset_2_exit_7 = (`TAG_main_0_A_a + (2 * 32'd1));
end
end
always @(posedge clk) begin
/* main: %legup_memset_2.exit*/
/*   %7 = getelementptr [5 x [5 x i16]]* %A, i32 0, i32 0, i32 1*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_2_exit_4))
begin
main_legup_memset_2_exit_7_reg <= main_legup_memset_2_exit_7;
if (^reset !== 1'bX && ^(main_legup_memset_2_exit_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_2_exit_7_reg"); $finish; end
end
end
always @(*) begin
/* main: %legup_memset_2.exit*/
/*   %8 = getelementptr [5 x [5 x i16]]* %A, i32 0, i32 0, i32 2*/
if (reset) begin main_legup_memset_2_exit_8 = 0; end
begin
main_legup_memset_2_exit_8 = (`TAG_main_0_A_a + (2 * 32'd2));
end
end
always @(posedge clk) begin
/* main: %legup_memset_2.exit*/
/*   %8 = getelementptr [5 x [5 x i16]]* %A, i32 0, i32 0, i32 2*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_2_exit_4))
begin
main_legup_memset_2_exit_8_reg <= main_legup_memset_2_exit_8;
if (^reset !== 1'bX && ^(main_legup_memset_2_exit_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_2_exit_8_reg"); $finish; end
end
end
always @(*) begin
/* main: %legup_memset_2.exit*/
/*   %9 = getelementptr [5 x [5 x i16]]* %A, i32 0, i32 0, i32 3*/
if (reset) begin main_legup_memset_2_exit_9 = 0; end
begin
main_legup_memset_2_exit_9 = (`TAG_main_0_A_a + (2 * 32'd3));
end
end
always @(posedge clk) begin
/* main: %legup_memset_2.exit*/
/*   %9 = getelementptr [5 x [5 x i16]]* %A, i32 0, i32 0, i32 3*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_2_exit_4))
begin
main_legup_memset_2_exit_9_reg <= main_legup_memset_2_exit_9;
if (^reset !== 1'bX && ^(main_legup_memset_2_exit_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_2_exit_9_reg"); $finish; end
end
end
always @(*) begin
/* main: %legup_memset_2.exit*/
/*   %10 = getelementptr [5 x [5 x i16]]* %A, i32 0, i32 0, i32 4*/
if (reset) begin main_legup_memset_2_exit_10 = 0; end
begin
main_legup_memset_2_exit_10 = (`TAG_main_0_A_a + (2 * 32'd4));
end
end
always @(posedge clk) begin
/* main: %legup_memset_2.exit*/
/*   %10 = getelementptr [5 x [5 x i16]]* %A, i32 0, i32 0, i32 4*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_2_exit_4))
begin
main_legup_memset_2_exit_10_reg <= main_legup_memset_2_exit_10;
if (^reset !== 1'bX && ^(main_legup_memset_2_exit_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_2_exit_10_reg"); $finish; end
end
end
always @(*) begin
/* main: %legup_memset_2.exit*/
/*   %11 = getelementptr inbounds [5 x [5 x i16]]* %A, i32 0, i32 1, i32 0*/
if (reset) begin main_legup_memset_2_exit_11 = 0; end
begin
main_legup_memset_2_exit_11 = (`TAG_main_0_A_a + (10 * 32'd1));
end
end
always @(posedge clk) begin
/* main: %legup_memset_2.exit*/
/*   %11 = getelementptr inbounds [5 x [5 x i16]]* %A, i32 0, i32 1, i32 0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_2_exit_4))
begin
main_legup_memset_2_exit_11_reg <= main_legup_memset_2_exit_11;
if (^reset !== 1'bX && ^(main_legup_memset_2_exit_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_2_exit_11_reg"); $finish; end
end
end
always @(*) begin
/* main: %legup_memset_2.exit*/
/*   %12 = getelementptr inbounds [5 x [5 x i16]]* %A, i32 0, i32 1, i32 1*/
if (reset) begin main_legup_memset_2_exit_12 = 0; end
begin
main_legup_memset_2_exit_12 = (`TAG_main_0_A_a + ((10 * 32'd1) + (2 * 32'd1)));
end
end
always @(posedge clk) begin
/* main: %legup_memset_2.exit*/
/*   %12 = getelementptr inbounds [5 x [5 x i16]]* %A, i32 0, i32 1, i32 1*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_2_exit_4))
begin
main_legup_memset_2_exit_12_reg <= main_legup_memset_2_exit_12;
if (^reset !== 1'bX && ^(main_legup_memset_2_exit_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_2_exit_12_reg"); $finish; end
end
end
always @(*) begin
/* main: %legup_memset_2.exit*/
/*   %13 = getelementptr inbounds [5 x [5 x i16]]* %A, i32 0, i32 1, i32 2*/
if (reset) begin main_legup_memset_2_exit_13 = 0; end
begin
main_legup_memset_2_exit_13 = (`TAG_main_0_A_a + ((10 * 32'd1) + (2 * 32'd2)));
end
end
always @(posedge clk) begin
/* main: %legup_memset_2.exit*/
/*   %13 = getelementptr inbounds [5 x [5 x i16]]* %A, i32 0, i32 1, i32 2*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_2_exit_4))
begin
main_legup_memset_2_exit_13_reg <= main_legup_memset_2_exit_13;
if (^reset !== 1'bX && ^(main_legup_memset_2_exit_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_2_exit_13_reg"); $finish; end
end
end
always @(*) begin
/* main: %legup_memset_2.exit*/
/*   %14 = getelementptr inbounds [5 x [5 x i16]]* %A, i32 0, i32 1, i32 3*/
if (reset) begin main_legup_memset_2_exit_14 = 0; end
begin
main_legup_memset_2_exit_14 = (`TAG_main_0_A_a + ((10 * 32'd1) + (2 * 32'd3)));
end
end
always @(posedge clk) begin
/* main: %legup_memset_2.exit*/
/*   %14 = getelementptr inbounds [5 x [5 x i16]]* %A, i32 0, i32 1, i32 3*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_2_exit_4))
begin
main_legup_memset_2_exit_14_reg <= main_legup_memset_2_exit_14;
if (^reset !== 1'bX && ^(main_legup_memset_2_exit_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_2_exit_14_reg"); $finish; end
end
end
always @(*) begin
/* main: %legup_memset_2.exit*/
/*   %15 = getelementptr inbounds [5 x [5 x i16]]* %A, i32 0, i32 1, i32 4*/
if (reset) begin main_legup_memset_2_exit_15 = 0; end
begin
main_legup_memset_2_exit_15 = (`TAG_main_0_A_a + ((10 * 32'd1) + (2 * 32'd4)));
end
end
always @(posedge clk) begin
/* main: %legup_memset_2.exit*/
/*   %15 = getelementptr inbounds [5 x [5 x i16]]* %A, i32 0, i32 1, i32 4*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_2_exit_4))
begin
main_legup_memset_2_exit_15_reg <= main_legup_memset_2_exit_15;
if (^reset !== 1'bX && ^(main_legup_memset_2_exit_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_2_exit_15_reg"); $finish; end
end
end
always @(*) begin
/* main: %legup_memset_2.exit*/
/*   %16 = getelementptr inbounds [5 x [5 x i16]]* %A, i32 0, i32 2, i32 0*/
if (reset) begin main_legup_memset_2_exit_16 = 0; end
begin
main_legup_memset_2_exit_16 = (`TAG_main_0_A_a + (10 * 32'd2));
end
end
always @(posedge clk) begin
/* main: %legup_memset_2.exit*/
/*   %16 = getelementptr inbounds [5 x [5 x i16]]* %A, i32 0, i32 2, i32 0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_2_exit_4))
begin
main_legup_memset_2_exit_16_reg <= main_legup_memset_2_exit_16;
if (^reset !== 1'bX && ^(main_legup_memset_2_exit_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_2_exit_16_reg"); $finish; end
end
end
always @(*) begin
/* main: %legup_memset_2.exit*/
/*   %17 = getelementptr inbounds [5 x [5 x i16]]* %A, i32 0, i32 2, i32 1*/
if (reset) begin main_legup_memset_2_exit_17 = 0; end
begin
main_legup_memset_2_exit_17 = (`TAG_main_0_A_a + ((10 * 32'd2) + (2 * 32'd1)));
end
end
always @(posedge clk) begin
/* main: %legup_memset_2.exit*/
/*   %17 = getelementptr inbounds [5 x [5 x i16]]* %A, i32 0, i32 2, i32 1*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_2_exit_4))
begin
main_legup_memset_2_exit_17_reg <= main_legup_memset_2_exit_17;
if (^reset !== 1'bX && ^(main_legup_memset_2_exit_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_2_exit_17_reg"); $finish; end
end
end
always @(*) begin
/* main: %legup_memset_2.exit*/
/*   %18 = getelementptr inbounds [5 x [5 x i16]]* %A, i32 0, i32 2, i32 2*/
if (reset) begin main_legup_memset_2_exit_18 = 0; end
begin
main_legup_memset_2_exit_18 = (`TAG_main_0_A_a + ((10 * 32'd2) + (2 * 32'd2)));
end
end
always @(posedge clk) begin
/* main: %legup_memset_2.exit*/
/*   %18 = getelementptr inbounds [5 x [5 x i16]]* %A, i32 0, i32 2, i32 2*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_2_exit_4))
begin
main_legup_memset_2_exit_18_reg <= main_legup_memset_2_exit_18;
if (^reset !== 1'bX && ^(main_legup_memset_2_exit_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_2_exit_18_reg"); $finish; end
end
end
always @(*) begin
/* main: %legup_memset_2.exit*/
/*   %19 = getelementptr inbounds [5 x [5 x i16]]* %A, i32 0, i32 2, i32 3*/
if (reset) begin main_legup_memset_2_exit_19 = 0; end
begin
main_legup_memset_2_exit_19 = (`TAG_main_0_A_a + ((10 * 32'd2) + (2 * 32'd3)));
end
end
always @(posedge clk) begin
/* main: %legup_memset_2.exit*/
/*   %19 = getelementptr inbounds [5 x [5 x i16]]* %A, i32 0, i32 2, i32 3*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_2_exit_4))
begin
main_legup_memset_2_exit_19_reg <= main_legup_memset_2_exit_19;
if (^reset !== 1'bX && ^(main_legup_memset_2_exit_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_2_exit_19_reg"); $finish; end
end
end
always @(*) begin
/* main: %legup_memset_2.exit*/
/*   %20 = getelementptr inbounds [5 x [5 x i16]]* %A, i32 0, i32 2, i32 4*/
if (reset) begin main_legup_memset_2_exit_20 = 0; end
begin
main_legup_memset_2_exit_20 = (`TAG_main_0_A_a + ((10 * 32'd2) + (2 * 32'd4)));
end
end
always @(posedge clk) begin
/* main: %legup_memset_2.exit*/
/*   %20 = getelementptr inbounds [5 x [5 x i16]]* %A, i32 0, i32 2, i32 4*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_2_exit_4))
begin
main_legup_memset_2_exit_20_reg <= main_legup_memset_2_exit_20;
if (^reset !== 1'bX && ^(main_legup_memset_2_exit_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_2_exit_20_reg"); $finish; end
end
end
always @(*) begin
/* main: %legup_memset_2.exit*/
/*   %21 = getelementptr inbounds [5 x [5 x i16]]* %A, i32 0, i32 3, i32 0*/
if (reset) begin main_legup_memset_2_exit_21 = 0; end
begin
main_legup_memset_2_exit_21 = (`TAG_main_0_A_a + (10 * 32'd3));
end
end
always @(posedge clk) begin
/* main: %legup_memset_2.exit*/
/*   %21 = getelementptr inbounds [5 x [5 x i16]]* %A, i32 0, i32 3, i32 0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_2_exit_4))
begin
main_legup_memset_2_exit_21_reg <= main_legup_memset_2_exit_21;
if (^reset !== 1'bX && ^(main_legup_memset_2_exit_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_2_exit_21_reg"); $finish; end
end
end
always @(*) begin
/* main: %legup_memset_2.exit*/
/*   %22 = getelementptr inbounds [5 x [5 x i16]]* %A, i32 0, i32 3, i32 1*/
if (reset) begin main_legup_memset_2_exit_22 = 0; end
begin
main_legup_memset_2_exit_22 = (`TAG_main_0_A_a + ((10 * 32'd3) + (2 * 32'd1)));
end
end
always @(posedge clk) begin
/* main: %legup_memset_2.exit*/
/*   %22 = getelementptr inbounds [5 x [5 x i16]]* %A, i32 0, i32 3, i32 1*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_2_exit_4))
begin
main_legup_memset_2_exit_22_reg <= main_legup_memset_2_exit_22;
if (^reset !== 1'bX && ^(main_legup_memset_2_exit_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_2_exit_22_reg"); $finish; end
end
end
always @(*) begin
/* main: %legup_memset_2.exit*/
/*   %23 = getelementptr inbounds [5 x [5 x i16]]* %A, i32 0, i32 3, i32 2*/
if (reset) begin main_legup_memset_2_exit_23 = 0; end
begin
main_legup_memset_2_exit_23 = (`TAG_main_0_A_a + ((10 * 32'd3) + (2 * 32'd2)));
end
end
always @(posedge clk) begin
/* main: %legup_memset_2.exit*/
/*   %23 = getelementptr inbounds [5 x [5 x i16]]* %A, i32 0, i32 3, i32 2*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_2_exit_4))
begin
main_legup_memset_2_exit_23_reg <= main_legup_memset_2_exit_23;
if (^reset !== 1'bX && ^(main_legup_memset_2_exit_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_2_exit_23_reg"); $finish; end
end
end
always @(*) begin
/* main: %legup_memset_2.exit*/
/*   %24 = getelementptr inbounds [5 x [5 x i16]]* %A, i32 0, i32 3, i32 3*/
if (reset) begin main_legup_memset_2_exit_24 = 0; end
begin
main_legup_memset_2_exit_24 = (`TAG_main_0_A_a + ((10 * 32'd3) + (2 * 32'd3)));
end
end
always @(posedge clk) begin
/* main: %legup_memset_2.exit*/
/*   %24 = getelementptr inbounds [5 x [5 x i16]]* %A, i32 0, i32 3, i32 3*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_2_exit_4))
begin
main_legup_memset_2_exit_24_reg <= main_legup_memset_2_exit_24;
if (^reset !== 1'bX && ^(main_legup_memset_2_exit_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_2_exit_24_reg"); $finish; end
end
end
always @(*) begin
/* main: %legup_memset_2.exit*/
/*   %25 = getelementptr inbounds [5 x [5 x i16]]* %A, i32 0, i32 3, i32 4*/
if (reset) begin main_legup_memset_2_exit_25 = 0; end
begin
main_legup_memset_2_exit_25 = (`TAG_main_0_A_a + ((10 * 32'd3) + (2 * 32'd4)));
end
end
always @(posedge clk) begin
/* main: %legup_memset_2.exit*/
/*   %25 = getelementptr inbounds [5 x [5 x i16]]* %A, i32 0, i32 3, i32 4*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_2_exit_4))
begin
main_legup_memset_2_exit_25_reg <= main_legup_memset_2_exit_25;
if (^reset !== 1'bX && ^(main_legup_memset_2_exit_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_2_exit_25_reg"); $finish; end
end
end
always @(*) begin
/* main: %legup_memset_2.exit*/
/*   %26 = getelementptr inbounds [5 x [5 x i16]]* %A, i32 0, i32 4, i32 0*/
if (reset) begin main_legup_memset_2_exit_26 = 0; end
begin
main_legup_memset_2_exit_26 = (`TAG_main_0_A_a + (10 * 32'd4));
end
end
always @(posedge clk) begin
/* main: %legup_memset_2.exit*/
/*   %26 = getelementptr inbounds [5 x [5 x i16]]* %A, i32 0, i32 4, i32 0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_2_exit_4))
begin
main_legup_memset_2_exit_26_reg <= main_legup_memset_2_exit_26;
if (^reset !== 1'bX && ^(main_legup_memset_2_exit_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_2_exit_26_reg"); $finish; end
end
end
always @(*) begin
/* main: %legup_memset_2.exit*/
/*   %27 = getelementptr inbounds [5 x [5 x i16]]* %A, i32 0, i32 4, i32 1*/
if (reset) begin main_legup_memset_2_exit_27 = 0; end
begin
main_legup_memset_2_exit_27 = (`TAG_main_0_A_a + ((10 * 32'd4) + (2 * 32'd1)));
end
end
always @(posedge clk) begin
/* main: %legup_memset_2.exit*/
/*   %27 = getelementptr inbounds [5 x [5 x i16]]* %A, i32 0, i32 4, i32 1*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_2_exit_4))
begin
main_legup_memset_2_exit_27_reg <= main_legup_memset_2_exit_27;
if (^reset !== 1'bX && ^(main_legup_memset_2_exit_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_2_exit_27_reg"); $finish; end
end
end
always @(*) begin
/* main: %legup_memset_2.exit*/
/*   %28 = getelementptr inbounds [5 x [5 x i16]]* %A, i32 0, i32 4, i32 2*/
if (reset) begin main_legup_memset_2_exit_28 = 0; end
begin
main_legup_memset_2_exit_28 = (`TAG_main_0_A_a + ((10 * 32'd4) + (2 * 32'd2)));
end
end
always @(posedge clk) begin
/* main: %legup_memset_2.exit*/
/*   %28 = getelementptr inbounds [5 x [5 x i16]]* %A, i32 0, i32 4, i32 2*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_2_exit_4))
begin
main_legup_memset_2_exit_28_reg <= main_legup_memset_2_exit_28;
if (^reset !== 1'bX && ^(main_legup_memset_2_exit_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_2_exit_28_reg"); $finish; end
end
end
always @(*) begin
/* main: %legup_memset_2.exit*/
/*   %29 = getelementptr inbounds [5 x [5 x i16]]* %A, i32 0, i32 4, i32 3*/
if (reset) begin main_legup_memset_2_exit_29 = 0; end
begin
main_legup_memset_2_exit_29 = (`TAG_main_0_A_a + ((10 * 32'd4) + (2 * 32'd3)));
end
end
always @(posedge clk) begin
/* main: %legup_memset_2.exit*/
/*   %29 = getelementptr inbounds [5 x [5 x i16]]* %A, i32 0, i32 4, i32 3*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_2_exit_4))
begin
main_legup_memset_2_exit_29_reg <= main_legup_memset_2_exit_29;
if (^reset !== 1'bX && ^(main_legup_memset_2_exit_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_2_exit_29_reg"); $finish; end
end
end
always @(*) begin
/* main: %legup_memset_2.exit*/
/*   %30 = getelementptr inbounds [5 x [5 x i16]]* %A, i32 0, i32 4, i32 4*/
if (reset) begin main_legup_memset_2_exit_30 = 0; end
begin
main_legup_memset_2_exit_30 = (`TAG_main_0_A_a + ((10 * 32'd4) + (2 * 32'd4)));
end
end
always @(posedge clk) begin
/* main: %legup_memset_2.exit*/
/*   %30 = getelementptr inbounds [5 x [5 x i16]]* %A, i32 0, i32 4, i32 4*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_2_exit_4))
begin
main_legup_memset_2_exit_30_reg <= main_legup_memset_2_exit_30;
if (^reset !== 1'bX && ^(main_legup_memset_2_exit_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_2_exit_30_reg"); $finish; end
end
end
always @(*) begin
/* main: %legup_memset_2.exit*/
/*   %31 = getelementptr inbounds [5 x i16]* %C.i, i32 0, i32 0*/
if (reset) begin main_legup_memset_2_exit_31 = 0; end
begin
main_legup_memset_2_exit_31 = `TAG_main_0_C_i_a;
end
end
always @(posedge clk) begin
/* main: %legup_memset_2.exit*/
/*   %31 = getelementptr inbounds [5 x i16]* %C.i, i32 0, i32 0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_2_exit_4))
begin
main_legup_memset_2_exit_31_reg <= main_legup_memset_2_exit_31;
if (^reset !== 1'bX && ^(main_legup_memset_2_exit_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_2_exit_31_reg"); $finish; end
end
end
always @(*) begin
/* main: %legup_memset_2.exit*/
/*   %32 = getelementptr inbounds [5 x i16]* %C.i, i32 0, i32 1*/
if (reset) begin main_legup_memset_2_exit_32 = 0; end
begin
main_legup_memset_2_exit_32 = (`TAG_main_0_C_i_a + (2 * 32'd1));
end
end
always @(posedge clk) begin
/* main: %legup_memset_2.exit*/
/*   %32 = getelementptr inbounds [5 x i16]* %C.i, i32 0, i32 1*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_2_exit_4))
begin
main_legup_memset_2_exit_32_reg <= main_legup_memset_2_exit_32;
if (^reset !== 1'bX && ^(main_legup_memset_2_exit_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_2_exit_32_reg"); $finish; end
end
end
always @(*) begin
/* main: %legup_memset_2.exit*/
/*   %33 = getelementptr inbounds [5 x i16]* %C.i, i32 0, i32 2*/
if (reset) begin main_legup_memset_2_exit_33 = 0; end
begin
main_legup_memset_2_exit_33 = (`TAG_main_0_C_i_a + (2 * 32'd2));
end
end
always @(posedge clk) begin
/* main: %legup_memset_2.exit*/
/*   %33 = getelementptr inbounds [5 x i16]* %C.i, i32 0, i32 2*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_2_exit_4))
begin
main_legup_memset_2_exit_33_reg <= main_legup_memset_2_exit_33;
if (^reset !== 1'bX && ^(main_legup_memset_2_exit_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_2_exit_33_reg"); $finish; end
end
end
always @(*) begin
/* main: %legup_memset_2.exit*/
/*   %34 = getelementptr inbounds [5 x i16]* %C.i, i32 0, i32 3*/
if (reset) begin main_legup_memset_2_exit_34 = 0; end
begin
main_legup_memset_2_exit_34 = (`TAG_main_0_C_i_a + (2 * 32'd3));
end
end
always @(posedge clk) begin
/* main: %legup_memset_2.exit*/
/*   %34 = getelementptr inbounds [5 x i16]* %C.i, i32 0, i32 3*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_2_exit_4))
begin
main_legup_memset_2_exit_34_reg <= main_legup_memset_2_exit_34;
if (^reset !== 1'bX && ^(main_legup_memset_2_exit_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_2_exit_34_reg"); $finish; end
end
end
always @(*) begin
/* main: %legup_memset_2.exit*/
/*   %35 = getelementptr inbounds [5 x i16]* %C.i, i32 0, i32 4*/
if (reset) begin main_legup_memset_2_exit_35 = 0; end
begin
main_legup_memset_2_exit_35 = (`TAG_main_0_C_i_a + (2 * 32'd4));
end
end
always @(posedge clk) begin
/* main: %legup_memset_2.exit*/
/*   %35 = getelementptr inbounds [5 x i16]* %C.i, i32 0, i32 4*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_2_exit_4))
begin
main_legup_memset_2_exit_35_reg <= main_legup_memset_2_exit_35;
if (^reset !== 1'bX && ^(main_legup_memset_2_exit_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_2_exit_35_reg"); $finish; end
end
end
always @(*) begin
/* main: %legup_memset_2.exit*/
/*   %36 = getelementptr inbounds [5 x i16]* %D.i, i32 0, i32 0*/
if (reset) begin main_legup_memset_2_exit_36 = 0; end
begin
main_legup_memset_2_exit_36 = `TAG_main_0_D_i_a;
end
end
always @(posedge clk) begin
/* main: %legup_memset_2.exit*/
/*   %36 = getelementptr inbounds [5 x i16]* %D.i, i32 0, i32 0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_2_exit_4))
begin
main_legup_memset_2_exit_36_reg <= main_legup_memset_2_exit_36;
if (^reset !== 1'bX && ^(main_legup_memset_2_exit_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_2_exit_36_reg"); $finish; end
end
end
always @(*) begin
/* main: %legup_memset_2.exit*/
/*   %37 = getelementptr inbounds [5 x i16]* %D.i, i32 0, i32 1*/
if (reset) begin main_legup_memset_2_exit_37 = 0; end
begin
main_legup_memset_2_exit_37 = (`TAG_main_0_D_i_a + (2 * 32'd1));
end
end
always @(posedge clk) begin
/* main: %legup_memset_2.exit*/
/*   %37 = getelementptr inbounds [5 x i16]* %D.i, i32 0, i32 1*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_2_exit_4))
begin
main_legup_memset_2_exit_37_reg <= main_legup_memset_2_exit_37;
if (^reset !== 1'bX && ^(main_legup_memset_2_exit_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_2_exit_37_reg"); $finish; end
end
end
always @(*) begin
/* main: %legup_memset_2.exit*/
/*   %38 = getelementptr inbounds [5 x i16]* %D.i, i32 0, i32 2*/
if (reset) begin main_legup_memset_2_exit_38 = 0; end
begin
main_legup_memset_2_exit_38 = (`TAG_main_0_D_i_a + (2 * 32'd2));
end
end
always @(posedge clk) begin
/* main: %legup_memset_2.exit*/
/*   %38 = getelementptr inbounds [5 x i16]* %D.i, i32 0, i32 2*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_2_exit_4))
begin
main_legup_memset_2_exit_38_reg <= main_legup_memset_2_exit_38;
if (^reset !== 1'bX && ^(main_legup_memset_2_exit_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_2_exit_38_reg"); $finish; end
end
end
always @(*) begin
/* main: %legup_memset_2.exit*/
/*   %39 = getelementptr inbounds [5 x i16]* %D.i, i32 0, i32 3*/
if (reset) begin main_legup_memset_2_exit_39 = 0; end
begin
main_legup_memset_2_exit_39 = (`TAG_main_0_D_i_a + (2 * 32'd3));
end
end
always @(posedge clk) begin
/* main: %legup_memset_2.exit*/
/*   %39 = getelementptr inbounds [5 x i16]* %D.i, i32 0, i32 3*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_2_exit_4))
begin
main_legup_memset_2_exit_39_reg <= main_legup_memset_2_exit_39;
if (^reset !== 1'bX && ^(main_legup_memset_2_exit_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_2_exit_39_reg"); $finish; end
end
end
always @(*) begin
/* main: %legup_memset_2.exit*/
/*   %40 = getelementptr inbounds [5 x i16]* %D.i, i32 0, i32 4*/
if (reset) begin main_legup_memset_2_exit_40 = 0; end
begin
main_legup_memset_2_exit_40 = (`TAG_main_0_D_i_a + (2 * 32'd4));
end
end
always @(posedge clk) begin
/* main: %legup_memset_2.exit*/
/*   %40 = getelementptr inbounds [5 x i16]* %D.i, i32 0, i32 4*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_2_exit_4))
begin
main_legup_memset_2_exit_40_reg <= main_legup_memset_2_exit_40;
if (^reset !== 1'bX && ^(main_legup_memset_2_exit_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_2_exit_40_reg"); $finish; end
end
end
always @(*) begin
/* main: %legup_memset_2.exit*/
/*   %41 = getelementptr inbounds [5 x [5 x i16]]* %B.i, i32 0, i32 0, i32 0*/
if (reset) begin main_legup_memset_2_exit_41 = 0; end
begin
main_legup_memset_2_exit_41 = `TAG_main_0_B_i_a;
end
end
always @(posedge clk) begin
/* main: %legup_memset_2.exit*/
/*   %41 = getelementptr inbounds [5 x [5 x i16]]* %B.i, i32 0, i32 0, i32 0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_2_exit_4))
begin
main_legup_memset_2_exit_41_reg <= main_legup_memset_2_exit_41;
if (^reset !== 1'bX && ^(main_legup_memset_2_exit_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_2_exit_41_reg"); $finish; end
end
end
always @(*) begin
/* main: %legup_memset_2.exit*/
/*   %42 = getelementptr inbounds [5 x [5 x i16]]* %B.i, i32 0, i32 0, i32 1*/
if (reset) begin main_legup_memset_2_exit_42 = 0; end
begin
main_legup_memset_2_exit_42 = (`TAG_main_0_B_i_a + (2 * 32'd1));
end
end
always @(posedge clk) begin
/* main: %legup_memset_2.exit*/
/*   %42 = getelementptr inbounds [5 x [5 x i16]]* %B.i, i32 0, i32 0, i32 1*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_2_exit_4))
begin
main_legup_memset_2_exit_42_reg <= main_legup_memset_2_exit_42;
if (^reset !== 1'bX && ^(main_legup_memset_2_exit_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_2_exit_42_reg"); $finish; end
end
end
always @(*) begin
/* main: %legup_memset_2.exit*/
/*   %43 = getelementptr inbounds [5 x [5 x i16]]* %B.i, i32 0, i32 0, i32 2*/
if (reset) begin main_legup_memset_2_exit_43 = 0; end
begin
main_legup_memset_2_exit_43 = (`TAG_main_0_B_i_a + (2 * 32'd2));
end
end
always @(posedge clk) begin
/* main: %legup_memset_2.exit*/
/*   %43 = getelementptr inbounds [5 x [5 x i16]]* %B.i, i32 0, i32 0, i32 2*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_2_exit_4))
begin
main_legup_memset_2_exit_43_reg <= main_legup_memset_2_exit_43;
if (^reset !== 1'bX && ^(main_legup_memset_2_exit_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_2_exit_43_reg"); $finish; end
end
end
always @(*) begin
/* main: %legup_memset_2.exit*/
/*   %44 = getelementptr inbounds [5 x [5 x i16]]* %B.i, i32 0, i32 0, i32 3*/
if (reset) begin main_legup_memset_2_exit_44 = 0; end
begin
main_legup_memset_2_exit_44 = (`TAG_main_0_B_i_a + (2 * 32'd3));
end
end
always @(posedge clk) begin
/* main: %legup_memset_2.exit*/
/*   %44 = getelementptr inbounds [5 x [5 x i16]]* %B.i, i32 0, i32 0, i32 3*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_2_exit_4))
begin
main_legup_memset_2_exit_44_reg <= main_legup_memset_2_exit_44;
if (^reset !== 1'bX && ^(main_legup_memset_2_exit_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_2_exit_44_reg"); $finish; end
end
end
always @(*) begin
/* main: %legup_memset_2.exit*/
/*   %45 = getelementptr inbounds [5 x [5 x i16]]* %B.i, i32 0, i32 0, i32 4*/
if (reset) begin main_legup_memset_2_exit_45 = 0; end
begin
main_legup_memset_2_exit_45 = (`TAG_main_0_B_i_a + (2 * 32'd4));
end
end
always @(posedge clk) begin
/* main: %legup_memset_2.exit*/
/*   %45 = getelementptr inbounds [5 x [5 x i16]]* %B.i, i32 0, i32 0, i32 4*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_2_exit_4))
begin
main_legup_memset_2_exit_45_reg <= main_legup_memset_2_exit_45;
if (^reset !== 1'bX && ^(main_legup_memset_2_exit_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_2_exit_45_reg"); $finish; end
end
end
always @(*) begin
/* main: %legup_memset_2.exit*/
/*   %46 = getelementptr inbounds [5 x [5 x i16]]* %B.i, i32 0, i32 1, i32 0*/
if (reset) begin main_legup_memset_2_exit_46 = 0; end
begin
main_legup_memset_2_exit_46 = (`TAG_main_0_B_i_a + (10 * 32'd1));
end
end
always @(posedge clk) begin
/* main: %legup_memset_2.exit*/
/*   %46 = getelementptr inbounds [5 x [5 x i16]]* %B.i, i32 0, i32 1, i32 0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_2_exit_4))
begin
main_legup_memset_2_exit_46_reg <= main_legup_memset_2_exit_46;
if (^reset !== 1'bX && ^(main_legup_memset_2_exit_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_2_exit_46_reg"); $finish; end
end
end
always @(*) begin
/* main: %legup_memset_2.exit*/
/*   %47 = getelementptr inbounds [5 x [5 x i16]]* %B.i, i32 0, i32 1, i32 1*/
if (reset) begin main_legup_memset_2_exit_47 = 0; end
begin
main_legup_memset_2_exit_47 = (`TAG_main_0_B_i_a + ((10 * 32'd1) + (2 * 32'd1)));
end
end
always @(posedge clk) begin
/* main: %legup_memset_2.exit*/
/*   %47 = getelementptr inbounds [5 x [5 x i16]]* %B.i, i32 0, i32 1, i32 1*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_2_exit_4))
begin
main_legup_memset_2_exit_47_reg <= main_legup_memset_2_exit_47;
if (^reset !== 1'bX && ^(main_legup_memset_2_exit_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_2_exit_47_reg"); $finish; end
end
end
always @(*) begin
/* main: %legup_memset_2.exit*/
/*   %48 = getelementptr inbounds [5 x [5 x i16]]* %B.i, i32 0, i32 1, i32 2*/
if (reset) begin main_legup_memset_2_exit_48 = 0; end
begin
main_legup_memset_2_exit_48 = (`TAG_main_0_B_i_a + ((10 * 32'd1) + (2 * 32'd2)));
end
end
always @(posedge clk) begin
/* main: %legup_memset_2.exit*/
/*   %48 = getelementptr inbounds [5 x [5 x i16]]* %B.i, i32 0, i32 1, i32 2*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_2_exit_4))
begin
main_legup_memset_2_exit_48_reg <= main_legup_memset_2_exit_48;
if (^reset !== 1'bX && ^(main_legup_memset_2_exit_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_2_exit_48_reg"); $finish; end
end
end
always @(*) begin
/* main: %legup_memset_2.exit*/
/*   %49 = getelementptr inbounds [5 x [5 x i16]]* %B.i, i32 0, i32 1, i32 3*/
if (reset) begin main_legup_memset_2_exit_49 = 0; end
begin
main_legup_memset_2_exit_49 = (`TAG_main_0_B_i_a + ((10 * 32'd1) + (2 * 32'd3)));
end
end
always @(posedge clk) begin
/* main: %legup_memset_2.exit*/
/*   %49 = getelementptr inbounds [5 x [5 x i16]]* %B.i, i32 0, i32 1, i32 3*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_2_exit_4))
begin
main_legup_memset_2_exit_49_reg <= main_legup_memset_2_exit_49;
if (^reset !== 1'bX && ^(main_legup_memset_2_exit_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_2_exit_49_reg"); $finish; end
end
end
always @(*) begin
/* main: %legup_memset_2.exit*/
/*   %50 = getelementptr inbounds [5 x [5 x i16]]* %B.i, i32 0, i32 1, i32 4*/
if (reset) begin main_legup_memset_2_exit_50 = 0; end
begin
main_legup_memset_2_exit_50 = (`TAG_main_0_B_i_a + ((10 * 32'd1) + (2 * 32'd4)));
end
end
always @(posedge clk) begin
/* main: %legup_memset_2.exit*/
/*   %50 = getelementptr inbounds [5 x [5 x i16]]* %B.i, i32 0, i32 1, i32 4*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_2_exit_4))
begin
main_legup_memset_2_exit_50_reg <= main_legup_memset_2_exit_50;
if (^reset !== 1'bX && ^(main_legup_memset_2_exit_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_2_exit_50_reg"); $finish; end
end
end
always @(*) begin
/* main: %legup_memset_2.exit*/
/*   %51 = getelementptr inbounds [5 x [5 x i16]]* %B.i, i32 0, i32 2, i32 0*/
if (reset) begin main_legup_memset_2_exit_51 = 0; end
begin
main_legup_memset_2_exit_51 = (`TAG_main_0_B_i_a + (10 * 32'd2));
end
end
always @(posedge clk) begin
/* main: %legup_memset_2.exit*/
/*   %51 = getelementptr inbounds [5 x [5 x i16]]* %B.i, i32 0, i32 2, i32 0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_2_exit_4))
begin
main_legup_memset_2_exit_51_reg <= main_legup_memset_2_exit_51;
if (^reset !== 1'bX && ^(main_legup_memset_2_exit_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_2_exit_51_reg"); $finish; end
end
end
always @(*) begin
/* main: %legup_memset_2.exit*/
/*   %52 = getelementptr inbounds [5 x [5 x i16]]* %B.i, i32 0, i32 2, i32 1*/
if (reset) begin main_legup_memset_2_exit_52 = 0; end
begin
main_legup_memset_2_exit_52 = (`TAG_main_0_B_i_a + ((10 * 32'd2) + (2 * 32'd1)));
end
end
always @(posedge clk) begin
/* main: %legup_memset_2.exit*/
/*   %52 = getelementptr inbounds [5 x [5 x i16]]* %B.i, i32 0, i32 2, i32 1*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_2_exit_4))
begin
main_legup_memset_2_exit_52_reg <= main_legup_memset_2_exit_52;
if (^reset !== 1'bX && ^(main_legup_memset_2_exit_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_2_exit_52_reg"); $finish; end
end
end
always @(*) begin
/* main: %legup_memset_2.exit*/
/*   %53 = getelementptr inbounds [5 x [5 x i16]]* %B.i, i32 0, i32 2, i32 2*/
if (reset) begin main_legup_memset_2_exit_53 = 0; end
begin
main_legup_memset_2_exit_53 = (`TAG_main_0_B_i_a + ((10 * 32'd2) + (2 * 32'd2)));
end
end
always @(posedge clk) begin
/* main: %legup_memset_2.exit*/
/*   %53 = getelementptr inbounds [5 x [5 x i16]]* %B.i, i32 0, i32 2, i32 2*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_2_exit_4))
begin
main_legup_memset_2_exit_53_reg <= main_legup_memset_2_exit_53;
if (^reset !== 1'bX && ^(main_legup_memset_2_exit_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_2_exit_53_reg"); $finish; end
end
end
always @(*) begin
/* main: %legup_memset_2.exit*/
/*   %54 = getelementptr inbounds [5 x [5 x i16]]* %B.i, i32 0, i32 2, i32 3*/
if (reset) begin main_legup_memset_2_exit_54 = 0; end
begin
main_legup_memset_2_exit_54 = (`TAG_main_0_B_i_a + ((10 * 32'd2) + (2 * 32'd3)));
end
end
always @(posedge clk) begin
/* main: %legup_memset_2.exit*/
/*   %54 = getelementptr inbounds [5 x [5 x i16]]* %B.i, i32 0, i32 2, i32 3*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_2_exit_4))
begin
main_legup_memset_2_exit_54_reg <= main_legup_memset_2_exit_54;
if (^reset !== 1'bX && ^(main_legup_memset_2_exit_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_2_exit_54_reg"); $finish; end
end
end
always @(*) begin
/* main: %legup_memset_2.exit*/
/*   %55 = getelementptr inbounds [5 x [5 x i16]]* %B.i, i32 0, i32 2, i32 4*/
if (reset) begin main_legup_memset_2_exit_55 = 0; end
begin
main_legup_memset_2_exit_55 = (`TAG_main_0_B_i_a + ((10 * 32'd2) + (2 * 32'd4)));
end
end
always @(posedge clk) begin
/* main: %legup_memset_2.exit*/
/*   %55 = getelementptr inbounds [5 x [5 x i16]]* %B.i, i32 0, i32 2, i32 4*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_2_exit_4))
begin
main_legup_memset_2_exit_55_reg <= main_legup_memset_2_exit_55;
if (^reset !== 1'bX && ^(main_legup_memset_2_exit_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_2_exit_55_reg"); $finish; end
end
end
always @(*) begin
/* main: %legup_memset_2.exit*/
/*   %56 = getelementptr inbounds [5 x [5 x i16]]* %B.i, i32 0, i32 3, i32 0*/
if (reset) begin main_legup_memset_2_exit_56 = 0; end
begin
main_legup_memset_2_exit_56 = (`TAG_main_0_B_i_a + (10 * 32'd3));
end
end
always @(posedge clk) begin
/* main: %legup_memset_2.exit*/
/*   %56 = getelementptr inbounds [5 x [5 x i16]]* %B.i, i32 0, i32 3, i32 0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_2_exit_4))
begin
main_legup_memset_2_exit_56_reg <= main_legup_memset_2_exit_56;
if (^reset !== 1'bX && ^(main_legup_memset_2_exit_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_2_exit_56_reg"); $finish; end
end
end
always @(*) begin
/* main: %legup_memset_2.exit*/
/*   %57 = getelementptr inbounds [5 x [5 x i16]]* %B.i, i32 0, i32 3, i32 1*/
if (reset) begin main_legup_memset_2_exit_57 = 0; end
begin
main_legup_memset_2_exit_57 = (`TAG_main_0_B_i_a + ((10 * 32'd3) + (2 * 32'd1)));
end
end
always @(posedge clk) begin
/* main: %legup_memset_2.exit*/
/*   %57 = getelementptr inbounds [5 x [5 x i16]]* %B.i, i32 0, i32 3, i32 1*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_2_exit_4))
begin
main_legup_memset_2_exit_57_reg <= main_legup_memset_2_exit_57;
if (^reset !== 1'bX && ^(main_legup_memset_2_exit_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_2_exit_57_reg"); $finish; end
end
end
always @(*) begin
/* main: %legup_memset_2.exit*/
/*   %58 = getelementptr inbounds [5 x [5 x i16]]* %B.i, i32 0, i32 3, i32 2*/
if (reset) begin main_legup_memset_2_exit_58 = 0; end
begin
main_legup_memset_2_exit_58 = (`TAG_main_0_B_i_a + ((10 * 32'd3) + (2 * 32'd2)));
end
end
always @(posedge clk) begin
/* main: %legup_memset_2.exit*/
/*   %58 = getelementptr inbounds [5 x [5 x i16]]* %B.i, i32 0, i32 3, i32 2*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_2_exit_4))
begin
main_legup_memset_2_exit_58_reg <= main_legup_memset_2_exit_58;
if (^reset !== 1'bX && ^(main_legup_memset_2_exit_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_2_exit_58_reg"); $finish; end
end
end
always @(*) begin
/* main: %legup_memset_2.exit*/
/*   %59 = getelementptr inbounds [5 x [5 x i16]]* %B.i, i32 0, i32 3, i32 3*/
if (reset) begin main_legup_memset_2_exit_59 = 0; end
begin
main_legup_memset_2_exit_59 = (`TAG_main_0_B_i_a + ((10 * 32'd3) + (2 * 32'd3)));
end
end
always @(posedge clk) begin
/* main: %legup_memset_2.exit*/
/*   %59 = getelementptr inbounds [5 x [5 x i16]]* %B.i, i32 0, i32 3, i32 3*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_2_exit_4))
begin
main_legup_memset_2_exit_59_reg <= main_legup_memset_2_exit_59;
if (^reset !== 1'bX && ^(main_legup_memset_2_exit_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_2_exit_59_reg"); $finish; end
end
end
always @(*) begin
/* main: %legup_memset_2.exit*/
/*   %60 = getelementptr inbounds [5 x [5 x i16]]* %B.i, i32 0, i32 3, i32 4*/
if (reset) begin main_legup_memset_2_exit_60 = 0; end
begin
main_legup_memset_2_exit_60 = (`TAG_main_0_B_i_a + ((10 * 32'd3) + (2 * 32'd4)));
end
end
always @(posedge clk) begin
/* main: %legup_memset_2.exit*/
/*   %60 = getelementptr inbounds [5 x [5 x i16]]* %B.i, i32 0, i32 3, i32 4*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_2_exit_4))
begin
main_legup_memset_2_exit_60_reg <= main_legup_memset_2_exit_60;
if (^reset !== 1'bX && ^(main_legup_memset_2_exit_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_2_exit_60_reg"); $finish; end
end
end
always @(*) begin
/* main: %legup_memset_2.exit*/
/*   %61 = getelementptr inbounds [5 x [5 x i16]]* %B.i, i32 0, i32 4, i32 0*/
if (reset) begin main_legup_memset_2_exit_61 = 0; end
begin
main_legup_memset_2_exit_61 = (`TAG_main_0_B_i_a + (10 * 32'd4));
end
end
always @(posedge clk) begin
/* main: %legup_memset_2.exit*/
/*   %61 = getelementptr inbounds [5 x [5 x i16]]* %B.i, i32 0, i32 4, i32 0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_2_exit_4))
begin
main_legup_memset_2_exit_61_reg <= main_legup_memset_2_exit_61;
if (^reset !== 1'bX && ^(main_legup_memset_2_exit_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_2_exit_61_reg"); $finish; end
end
end
always @(*) begin
/* main: %legup_memset_2.exit*/
/*   %62 = getelementptr inbounds [5 x [5 x i16]]* %B.i, i32 0, i32 4, i32 1*/
if (reset) begin main_legup_memset_2_exit_62 = 0; end
begin
main_legup_memset_2_exit_62 = (`TAG_main_0_B_i_a + ((10 * 32'd4) + (2 * 32'd1)));
end
end
always @(posedge clk) begin
/* main: %legup_memset_2.exit*/
/*   %62 = getelementptr inbounds [5 x [5 x i16]]* %B.i, i32 0, i32 4, i32 1*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_2_exit_4))
begin
main_legup_memset_2_exit_62_reg <= main_legup_memset_2_exit_62;
if (^reset !== 1'bX && ^(main_legup_memset_2_exit_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_2_exit_62_reg"); $finish; end
end
end
always @(*) begin
/* main: %legup_memset_2.exit*/
/*   %63 = getelementptr inbounds [5 x [5 x i16]]* %B.i, i32 0, i32 4, i32 2*/
if (reset) begin main_legup_memset_2_exit_63 = 0; end
begin
main_legup_memset_2_exit_63 = (`TAG_main_0_B_i_a + ((10 * 32'd4) + (2 * 32'd2)));
end
end
always @(posedge clk) begin
/* main: %legup_memset_2.exit*/
/*   %63 = getelementptr inbounds [5 x [5 x i16]]* %B.i, i32 0, i32 4, i32 2*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_2_exit_4))
begin
main_legup_memset_2_exit_63_reg <= main_legup_memset_2_exit_63;
if (^reset !== 1'bX && ^(main_legup_memset_2_exit_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_2_exit_63_reg"); $finish; end
end
end
always @(*) begin
/* main: %legup_memset_2.exit*/
/*   %64 = getelementptr inbounds [5 x [5 x i16]]* %B.i, i32 0, i32 4, i32 3*/
if (reset) begin main_legup_memset_2_exit_64 = 0; end
begin
main_legup_memset_2_exit_64 = (`TAG_main_0_B_i_a + ((10 * 32'd4) + (2 * 32'd3)));
end
end
always @(posedge clk) begin
/* main: %legup_memset_2.exit*/
/*   %64 = getelementptr inbounds [5 x [5 x i16]]* %B.i, i32 0, i32 4, i32 3*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_2_exit_4))
begin
main_legup_memset_2_exit_64_reg <= main_legup_memset_2_exit_64;
if (^reset !== 1'bX && ^(main_legup_memset_2_exit_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_2_exit_64_reg"); $finish; end
end
end
always @(*) begin
/* main: %legup_memset_2.exit*/
/*   %65 = getelementptr inbounds [5 x [5 x i16]]* %B.i, i32 0, i32 4, i32 4*/
if (reset) begin main_legup_memset_2_exit_65 = 0; end
begin
main_legup_memset_2_exit_65 = (`TAG_main_0_B_i_a + ((10 * 32'd4) + (2 * 32'd4)));
end
end
always @(posedge clk) begin
/* main: %legup_memset_2.exit*/
/*   %65 = getelementptr inbounds [5 x [5 x i16]]* %B.i, i32 0, i32 4, i32 4*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_2_exit_4))
begin
main_legup_memset_2_exit_65_reg <= main_legup_memset_2_exit_65;
if (^reset !== 1'bX && ^(main_legup_memset_2_exit_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_2_exit_65_reg"); $finish; end
end
end
always @(*) begin
/* main: %66*/
/*   %67 = phi i32 [ 0, %legup_memset_2.exit ], [ %377, %roundFunction.exit ]*/
if ((cur_state == LEGUP_F_main_BB_66_7))
begin
main_66_67 = main_66_67_phi_temp;
end
/* main: %66*/
/*   %67 = phi i32 [ 0, %legup_memset_2.exit ], [ %377, %roundFunction.exit ]*/
else /* if ((cur_state == LEGUP_F_main_BB_66_7)) */
begin
main_66_67 = main_66_67_phi_temp;
end
end
always @(posedge clk) begin
/* main: %66*/
/*   %67 = phi i32 [ 0, %legup_memset_2.exit ], [ %377, %roundFunction.exit ]*/
if ((cur_state == LEGUP_F_main_BB_66_7))
begin
main_66_67_reg <= main_66_67;
if (^reset !== 1'bX && ^(main_66_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_66_67_reg"); $finish; end
end
/* main: %66*/
/*   %67 = phi i32 [ 0, %legup_memset_2.exit ], [ %377, %roundFunction.exit ]*/
if ((cur_state == LEGUP_F_main_BB_66_7))
begin
main_66_67_reg <= main_66_67;
if (^reset !== 1'bX && ^(main_66_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_66_67_reg"); $finish; end
end
/* main: %66*/
/*   %67 = phi i32 [ 0, %legup_memset_2.exit ], [ %377, %roundFunction.exit ]*/
if ((cur_state == LEGUP_F_main_BB_66_7))
begin
main_66_67_reg <= main_66_67;
if (^reset !== 1'bX && ^(main_66_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_66_67_reg"); $finish; end
end
end
always @(*) begin
/* main: %66*/
/*   %scevgep = getelementptr [24 x i16]* @RC, i32 0, i32 %67*/
begin
main_66_scevgep = (`TAG_g_RC_a + (2 * main_66_67));
end
end
always @(posedge clk) begin
/* main: %66*/
/*   %scevgep = getelementptr [24 x i16]* @RC, i32 0, i32 %67*/
if ((cur_state == LEGUP_F_main_BB_66_7))
begin
main_66_scevgep_reg <= main_66_scevgep;
if (^reset !== 1'bX && ^(main_66_scevgep) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_66_scevgep_reg"); $finish; end
end
end
always @(*) begin
/* main: %69*/
/*   %x.010.i = phi i32 [ 0, %66 ], [ %79, %69 ]*/
begin
main_69_x_010_i = main_69_x_010_i_phi_temp;
end
end
always @(*) begin
/* main: %69*/
/*   %scevgep45.i = getelementptr [5 x [5 x i16]]* %A, i32 0, i32 0, i32 %x.010.i*/
begin
main_69_scevgep45_i = (`TAG_main_0_A_a + (2 * main_69_x_010_i));
end
end
always @(*) begin
/* main: %69*/
/*   %scevgep46.i = getelementptr [5 x [5 x i16]]* %A, i32 0, i32 1, i32 %x.010.i*/
begin
main_69_scevgep46_i = (`TAG_main_0_A_a + ((10 * 32'd1) + (2 * main_69_x_010_i)));
end
end
always @(*) begin
/* main: %69*/
/*   %scevgep47.i = getelementptr [5 x [5 x i16]]* %A, i32 0, i32 2, i32 %x.010.i*/
begin
main_69_scevgep47_i = (`TAG_main_0_A_a + ((10 * 32'd2) + (2 * main_69_x_010_i)));
end
end
always @(posedge clk) begin
/* main: %69*/
/*   %scevgep47.i = getelementptr [5 x [5 x i16]]* %A, i32 0, i32 2, i32 %x.010.i*/
if ((cur_state == LEGUP_F_main_BB_69_8))
begin
main_69_scevgep47_i_reg <= main_69_scevgep47_i;
if (^reset !== 1'bX && ^(main_69_scevgep47_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_69_scevgep47_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %69*/
/*   %scevgep48.i = getelementptr [5 x [5 x i16]]* %A, i32 0, i32 3, i32 %x.010.i*/
begin
main_69_scevgep48_i = (`TAG_main_0_A_a + ((10 * 32'd3) + (2 * main_69_x_010_i)));
end
end
always @(posedge clk) begin
/* main: %69*/
/*   %scevgep48.i = getelementptr [5 x [5 x i16]]* %A, i32 0, i32 3, i32 %x.010.i*/
if ((cur_state == LEGUP_F_main_BB_69_8))
begin
main_69_scevgep48_i_reg <= main_69_scevgep48_i;
if (^reset !== 1'bX && ^(main_69_scevgep48_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_69_scevgep48_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %69*/
/*   %scevgep49.i = getelementptr [5 x [5 x i16]]* %A, i32 0, i32 4, i32 %x.010.i*/
begin
main_69_scevgep49_i = (`TAG_main_0_A_a + ((10 * 32'd4) + (2 * main_69_x_010_i)));
end
end
always @(posedge clk) begin
/* main: %69*/
/*   %scevgep49.i = getelementptr [5 x [5 x i16]]* %A, i32 0, i32 4, i32 %x.010.i*/
if ((cur_state == LEGUP_F_main_BB_69_8))
begin
main_69_scevgep49_i_reg <= main_69_scevgep49_i;
if (^reset !== 1'bX && ^(main_69_scevgep49_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_69_scevgep49_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %69*/
/*   %scevgep50.i = getelementptr [5 x i16]* %C.i, i32 0, i32 %x.010.i*/
begin
main_69_scevgep50_i = (`TAG_main_0_C_i_a + (2 * main_69_x_010_i));
end
end
always @(posedge clk) begin
/* main: %69*/
/*   %scevgep50.i = getelementptr [5 x i16]* %C.i, i32 0, i32 %x.010.i*/
if ((cur_state == LEGUP_F_main_BB_69_8))
begin
main_69_scevgep50_i_reg <= main_69_scevgep50_i;
if (^reset !== 1'bX && ^(main_69_scevgep50_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_69_scevgep50_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %69*/
/*   %70 = load i16* %scevgep45.i, align 2, !tbaa !0*/
begin
main_69_70 = memory_controller_out_a[15:0];
end
end
always @(*) begin
/* main: %69*/
/*   %71 = load i16* %scevgep46.i, align 2, !tbaa !0*/
begin
main_69_71 = memory_controller_out_b[15:0];
end
end
always @(*) begin
/* main: %69*/
/*   %72 = load i16* %scevgep47.i, align 2, !tbaa !0*/
begin
main_69_72 = memory_controller_out_a[15:0];
end
end
always @(*) begin
/* main: %69*/
/*   %73 = load i16* %scevgep48.i, align 2, !tbaa !0*/
begin
main_69_73 = memory_controller_out_b[15:0];
end
end
always @(*) begin
/* main: %69*/
/*   %74 = load i16* %scevgep49.i, align 2, !tbaa !0*/
begin
main_69_74 = memory_controller_out_a[15:0];
end
end
always @(*) begin
/* main: %69*/
/*   %75 = xor i16 %71, %70*/
main_69_75 = main_253_259;
end
always @(*) begin
/* main: %69*/
/*   %75 = xor i16 %71, %70*/
main_69_75_reg = main_253_259_reg;
end
always @(*) begin
/* main: %69*/
/*   %76 = xor i16 %75, %72*/
begin
main_69_76 = (main_69_75_reg ^ main_69_72);
end
end
always @(*) begin
/* main: %69*/
/*   %77 = xor i16 %76, %73*/
main_69_77 = main_roundFunction_exit_320;
end
always @(*) begin
/* main: %69*/
/*   %77 = xor i16 %76, %73*/
main_69_77_reg = main_roundFunction_exit_320_reg;
end
always @(*) begin
/* main: %69*/
/*   %78 = xor i16 %77, %74*/
main_69_78 = main_92_102;
end
always @(*) begin
/* main: %69*/
/*   %78 = xor i16 %77, %74*/
main_69_78_reg = main_92_102_reg;
end
always @(*) begin
/* main: %69*/
/*   %79 = add i32 %x.010.i, 1*/
begin
main_69_79 = (main_69_x_010_i + 32'd1);
end
end
always @(posedge clk) begin
/* main: %69*/
/*   %79 = add i32 %x.010.i, 1*/
if ((cur_state == LEGUP_F_main_BB_69_8))
begin
main_69_79_reg <= main_69_79;
if (^reset !== 1'bX && ^(main_69_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_69_79_reg"); $finish; end
end
end
always @(*) begin
/* main: %69*/
/*   %exitcond44.i = icmp eq i32 %79, 5*/
begin
main_69_exitcond44_i = (main_69_79 == 32'd5);
end
end
always @(posedge clk) begin
/* main: %69*/
/*   %exitcond44.i = icmp eq i32 %79, 5*/
if ((cur_state == LEGUP_F_main_BB_69_8))
begin
main_69_exitcond44_i_reg <= main_69_exitcond44_i;
if (^reset !== 1'bX && ^(main_69_exitcond44_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_69_exitcond44_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %80*/
/*   %81 = load i16* %31, align 2, !tbaa !0*/
begin
main_80_81 = memory_controller_out_a[15:0];
end
end
always @(*) begin
/* main: %80*/
/*   %82 = zext i16 %81 to i32*/
begin
main_80_82 = {main_80_81};
end
end
always @(posedge clk) begin
/* main: %80*/
/*   %82 = zext i16 %81 to i32*/
if ((cur_state == LEGUP_F_main_BB_80_16))
begin
main_80_82_reg <= main_80_82;
if (^reset !== 1'bX && ^(main_80_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_80_82_reg"); $finish; end
end
end
always @(*) begin
/* main: %80*/
/*   %83 = load i16* %32, align 2, !tbaa !0*/
begin
main_80_83 = memory_controller_out_b[15:0];
end
end
always @(*) begin
/* main: %80*/
/*   %84 = zext i16 %83 to i32*/
begin
main_80_84 = {main_80_83};
end
end
always @(posedge clk) begin
/* main: %80*/
/*   %84 = zext i16 %83 to i32*/
if ((cur_state == LEGUP_F_main_BB_80_16))
begin
main_80_84_reg <= main_80_84;
if (^reset !== 1'bX && ^(main_80_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_80_84_reg"); $finish; end
end
end
always @(*) begin
/* main: %80*/
/*   %85 = load i16* %33, align 2, !tbaa !0*/
begin
main_80_85 = memory_controller_out_a[15:0];
end
end
always @(*) begin
/* main: %80*/
/*   %86 = zext i16 %85 to i32*/
begin
main_80_86 = {main_80_85};
end
end
always @(posedge clk) begin
/* main: %80*/
/*   %86 = zext i16 %85 to i32*/
if ((cur_state == LEGUP_F_main_BB_80_17))
begin
main_80_86_reg <= main_80_86;
if (^reset !== 1'bX && ^(main_80_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_80_86_reg"); $finish; end
end
end
always @(*) begin
/* main: %80*/
/*   %87 = load i16* %34, align 2, !tbaa !0*/
begin
main_80_87 = memory_controller_out_b[15:0];
end
end
always @(*) begin
/* main: %80*/
/*   %88 = zext i16 %87 to i32*/
begin
main_80_88 = {main_80_87};
end
end
always @(posedge clk) begin
/* main: %80*/
/*   %88 = zext i16 %87 to i32*/
if ((cur_state == LEGUP_F_main_BB_80_17))
begin
main_80_88_reg <= main_80_88;
if (^reset !== 1'bX && ^(main_80_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_80_88_reg"); $finish; end
end
end
always @(*) begin
/* main: %80*/
/*   %89 = load i16* %35, align 2, !tbaa !0*/
begin
main_80_89 = memory_controller_out_a[15:0];
end
end
always @(*) begin
/* main: %80*/
/*   %90 = zext i16 %89 to i32*/
begin
main_80_90 = {main_80_89};
end
end
always @(*) begin
/* main: %92*/
/*   %x.19.i = phi i32 [ 0, %80 ], [ %93, %92 ]*/
begin
main_92_x_19_i = main_92_x_19_i_phi_temp;
end
end
always @(*) begin
/* main: %92*/
/*   %scevgep42.i = getelementptr [5 x i16]* %D.i, i32 0, i32 %x.19.i*/
begin
main_92_scevgep42_i = (`TAG_main_0_D_i_a + (2 * main_92_x_19_i));
end
end
always @(posedge clk) begin
/* main: %92*/
/*   %scevgep42.i = getelementptr [5 x i16]* %D.i, i32 0, i32 %x.19.i*/
if ((cur_state == LEGUP_F_main_BB_92_19))
begin
main_92_scevgep42_i_reg <= main_92_scevgep42_i;
if (^reset !== 1'bX && ^(main_92_scevgep42_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_92_scevgep42_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %92*/
/*   %tmp43.i = add i32 %x.19.i, 4*/
begin
main_92_tmp43_i = (main_92_x_19_i + 32'd4);
end
end
always @(posedge clk) begin
/* main: %92*/
/*   %tmp43.i = add i32 %x.19.i, 4*/
if ((cur_state == LEGUP_F_main_BB_92_19))
begin
main_92_tmp43_i_reg <= main_92_tmp43_i;
if (^reset !== 1'bX && ^(main_92_tmp43_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_92_tmp43_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %92*/
/*   %93 = add i32 %x.19.i, 1*/
begin
main_92_93 = (main_92_x_19_i + 32'd1);
end
end
always @(posedge clk) begin
/* main: %92*/
/*   %93 = add i32 %x.19.i, 1*/
if ((cur_state == LEGUP_F_main_BB_92_19))
begin
main_92_93_reg <= main_92_93;
if (^reset !== 1'bX && ^(main_92_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_92_93_reg"); $finish; end
end
end
always @(*) begin
/* main: %92*/
/*   %tmp39.i = icmp eq i32 %93, 5*/
begin
main_92_tmp39_i = (main_92_93 == 32'd5);
end
end
always @(posedge clk) begin
/* main: %92*/
/*   %tmp39.i = icmp eq i32 %93, 5*/
if ((cur_state == LEGUP_F_main_BB_92_19))
begin
main_92_tmp39_i_reg <= main_92_tmp39_i;
if (^reset !== 1'bX && ^(main_92_tmp39_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_92_tmp39_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %92*/
/*   %tmp40.i = select i1 %tmp39.i, i32 0, i32 %93*/
begin
main_92_tmp40_i = (main_92_tmp39_i ? 32'd0 : main_92_93);
end
end
always @(posedge clk) begin
/* main: %92*/
/*   %tmp40.i = select i1 %tmp39.i, i32 0, i32 %93*/
if ((cur_state == LEGUP_F_main_BB_92_19))
begin
main_92_tmp40_i_reg <= main_92_tmp40_i;
if (^reset !== 1'bX && ^(main_92_tmp40_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_92_tmp40_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %92*/
/*   %94 = getelementptr inbounds [5 x i16]* %C.i, i32 0, i32 %tmp40.i*/
begin
main_92_94 = (`TAG_main_0_C_i_a + (2 * main_92_tmp40_i_reg));
end
end
always @(*) begin
/* main: %92*/
/*   %95 = load i16* %94, align 2, !tbaa !0*/
begin
main_92_95 = memory_controller_out_a[15:0];
end
end
always @(*) begin
/* main: %92*/
/*   %96 = shl i16 %95, 1*/
begin
main_92_96 = (main_92_95 <<< (16'd1 % 16'd16));
end
end
always @(*) begin
/* main: %92*/
/*   %97 = lshr i16 %95, 15*/
begin
main_92_97 = (main_92_95 >>> (16'd15 % 16'd16));
end
end
always @(*) begin
/* main: %92*/
/*   %98 = or i16 %97, %96*/
begin
main_92_98 = (main_92_97 | main_92_96);
end
end
always @(posedge clk) begin
/* main: %92*/
/*   %98 = or i16 %97, %96*/
if ((cur_state == LEGUP_F_main_BB_92_22))
begin
main_92_98_reg <= main_92_98;
if (^reset !== 1'bX && ^(main_92_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_92_98_reg"); $finish; end
end
end
always @(*) begin
main_92_99 = main_unsigned_modulus_32_0;
end
always @(posedge clk) begin
/* main: %92*/
/*   %99 = urem i32 %tmp43.i, 5*/
if ((cur_state == LEGUP_F_main_BB_92_52))
begin
main_92_99_reg <= main_92_99;
if (^reset !== 1'bX && ^(main_92_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_92_99_reg"); $finish; end
end
/* main: %92*/
/*   %99 = urem i32 %tmp43.i, 5*/
if ((cur_state == LEGUP_F_main_BB_92_52))
begin
main_92_99_reg <= main_92_99;
if (^reset !== 1'bX && ^(main_92_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_92_99_reg"); $finish; end
end
/* main: %.preheader.i*/
/*   %252 = urem i32 %tmp18.i, 5*/
if ((cur_state == LEGUP_F_main_BB__preheader_i_195))
begin
main_92_99_reg <= main__preheader_i_252;
if (^reset !== 1'bX && ^(main__preheader_i_252) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_92_99_reg"); $finish; end
end
/* main: %179*/
/*   %190 = urem i32 %tmp27.i, 5*/
if ((cur_state == LEGUP_F_main_BB_179_131))
begin
main_92_99_reg <= main_179_190;
if (^reset !== 1'bX && ^(main_179_190) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_92_99_reg"); $finish; end
end
end
always @(*) begin
/* main: %92*/
/*   %100 = getelementptr inbounds [5 x i16]* %C.i, i32 0, i32 %99*/
begin
main_92_100 = (`TAG_main_0_C_i_a + (2 * main_92_99_reg));
end
end
always @(*) begin
/* main: %92*/
/*   %101 = load i16* %100, align 2, !tbaa !0*/
begin
main_92_101 = memory_controller_out_b[15:0];
end
end
always @(*) begin
/* main: %92*/
/*   %102 = xor i16 %98, %101*/
begin
main_92_102 = main_bitwise_XOR_16_p2i1;
end
end
always @(posedge clk) begin
/* main: %92*/
/*   %102 = xor i16 %98, %101*/
if ((cur_state == LEGUP_F_main_BB_92_55))
begin
main_92_102_reg <= main_92_102;
if (^reset !== 1'bX && ^(main_92_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_92_102_reg"); $finish; end
end
/* main: %69*/
/*   %78 = xor i16 %77, %74*/
if ((cur_state == LEGUP_F_main_BB_69_12))
begin
main_92_102_reg <= main_69_78;
if (^reset !== 1'bX && ^(main_69_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_92_102_reg"); $finish; end
end
end
always @(*) begin
/* main: %103*/
/*   %104 = load i16* %36, align 2, !tbaa !0*/
begin
main_103_104 = memory_controller_out_a[15:0];
end
end
always @(posedge clk) begin
/* main: %103*/
/*   %104 = load i16* %36, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_103_59))
begin
main_103_104_reg <= main_103_104;
if (^reset !== 1'bX && ^(main_103_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_103_104_reg"); $finish; end
end
end
always @(*) begin
/* main: %103*/
/*   %105 = zext i16 %104 to i32*/
begin
main_103_105 = {main_103_104};
end
end
always @(posedge clk) begin
/* main: %103*/
/*   %105 = zext i16 %104 to i32*/
if ((cur_state == LEGUP_F_main_BB_103_59))
begin
main_103_105_reg <= main_103_105;
if (^reset !== 1'bX && ^(main_103_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_103_105_reg"); $finish; end
end
end
always @(*) begin
/* main: %103*/
/*   %106 = load i16* %37, align 2, !tbaa !0*/
begin
main_103_106 = memory_controller_out_b[15:0];
end
end
always @(*) begin
/* main: %103*/
/*   %107 = zext i16 %106 to i32*/
begin
main_103_107 = {main_103_106};
end
end
always @(posedge clk) begin
/* main: %103*/
/*   %107 = zext i16 %106 to i32*/
if ((cur_state == LEGUP_F_main_BB_103_59))
begin
main_103_107_reg <= main_103_107;
if (^reset !== 1'bX && ^(main_103_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_103_107_reg"); $finish; end
end
end
always @(*) begin
/* main: %103*/
/*   %108 = load i16* %38, align 2, !tbaa !0*/
begin
main_103_108 = memory_controller_out_a[15:0];
end
end
always @(*) begin
/* main: %103*/
/*   %109 = zext i16 %108 to i32*/
begin
main_103_109 = {main_103_108};
end
end
always @(posedge clk) begin
/* main: %103*/
/*   %109 = zext i16 %108 to i32*/
if ((cur_state == LEGUP_F_main_BB_103_60))
begin
main_103_109_reg <= main_103_109;
if (^reset !== 1'bX && ^(main_103_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_103_109_reg"); $finish; end
end
end
always @(*) begin
/* main: %103*/
/*   %110 = load i16* %39, align 2, !tbaa !0*/
begin
main_103_110 = memory_controller_out_b[15:0];
end
end
always @(*) begin
/* main: %103*/
/*   %111 = zext i16 %110 to i32*/
begin
main_103_111 = {main_103_110};
end
end
always @(posedge clk) begin
/* main: %103*/
/*   %111 = zext i16 %110 to i32*/
if ((cur_state == LEGUP_F_main_BB_103_60))
begin
main_103_111_reg <= main_103_111;
if (^reset !== 1'bX && ^(main_103_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_103_111_reg"); $finish; end
end
end
always @(*) begin
/* main: %103*/
/*   %112 = load i16* %40, align 2, !tbaa !0*/
begin
main_103_112 = memory_controller_out_b[15:0];
end
end
always @(*) begin
/* main: %103*/
/*   %113 = zext i16 %112 to i32*/
begin
main_103_113 = {main_103_112};
end
end
always @(*) begin
/* main: %.preheader6.i*/
/*   %115 = phi i16 [ %104, %103 ], [ %.pre.i, %..preheader6_crit_edge.i ]*/
if ((cur_state == LEGUP_F_main_BB__preheader6_i_62))
begin
main__preheader6_i_115 = main__preheader6_i_115_phi_temp;
end
/* main: %.preheader6.i*/
/*   %115 = phi i16 [ %104, %103 ], [ %.pre.i, %..preheader6_crit_edge.i ]*/
else /* if ((cur_state == LEGUP_F_main_BB__preheader6_i_62)) */
begin
main__preheader6_i_115 = main__preheader6_i_115_phi_temp;
end
end
always @(posedge clk) begin
/* main: %.preheader6.i*/
/*   %115 = phi i16 [ %104, %103 ], [ %.pre.i, %..preheader6_crit_edge.i ]*/
if ((cur_state == LEGUP_F_main_BB__preheader6_i_62))
begin
main__preheader6_i_115_reg <= main__preheader6_i_115;
if (^reset !== 1'bX && ^(main__preheader6_i_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader6_i_115_reg"); $finish; end
end
/* main: %.preheader6.i*/
/*   %115 = phi i16 [ %104, %103 ], [ %.pre.i, %..preheader6_crit_edge.i ]*/
if ((cur_state == LEGUP_F_main_BB__preheader6_i_62))
begin
main__preheader6_i_115_reg <= main__preheader6_i_115;
if (^reset !== 1'bX && ^(main__preheader6_i_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader6_i_115_reg"); $finish; end
end
/* main: %.preheader6.i*/
/*   %115 = phi i16 [ %104, %103 ], [ %.pre.i, %..preheader6_crit_edge.i ]*/
if ((cur_state == LEGUP_F_main_BB__preheader6_i_62))
begin
main__preheader6_i_115_reg <= main__preheader6_i_115;
if (^reset !== 1'bX && ^(main__preheader6_i_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader6_i_115_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader6.i*/
/*   %x.28.i = phi i32 [ 0, %103 ], [ %121, %..preheader6_crit_edge.i ]*/
if ((cur_state == LEGUP_F_main_BB__preheader6_i_62))
begin
main__preheader6_i_x_28_i = main__preheader6_i_x_28_i_phi_temp;
end
/* main: %.preheader6.i*/
/*   %x.28.i = phi i32 [ 0, %103 ], [ %121, %..preheader6_crit_edge.i ]*/
else if ((cur_state == LEGUP_F_main_BB__preheader6_i_62))
begin
main__preheader6_i_x_28_i = main__preheader6_i_x_28_i_phi_temp;
end
/* main: %.preheader6.i*/
/*   %x.28.i = phi i32 [ 0, %103 ], [ %121, %..preheader6_crit_edge.i ]*/
else /* if ((cur_state == LEGUP_F_main_BB__preheader6_i_62)) */
begin
main__preheader6_i_x_28_i = main__preheader6_i_x_28_i_phi_temp;
end
end
always @(posedge clk) begin
/* main: %.preheader6.i*/
/*   %x.28.i = phi i32 [ 0, %103 ], [ %121, %..preheader6_crit_edge.i ]*/
if ((cur_state == LEGUP_F_main_BB__preheader6_i_62))
begin
main__preheader6_i_x_28_i_reg <= main__preheader6_i_x_28_i;
if (^reset !== 1'bX && ^(main__preheader6_i_x_28_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader6_i_x_28_i_reg"); $finish; end
end
/* main: %.preheader6.i*/
/*   %x.28.i = phi i32 [ 0, %103 ], [ %121, %..preheader6_crit_edge.i ]*/
if ((cur_state == LEGUP_F_main_BB__preheader6_i_62))
begin
main__preheader6_i_x_28_i_reg <= main__preheader6_i_x_28_i;
if (^reset !== 1'bX && ^(main__preheader6_i_x_28_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader6_i_x_28_i_reg"); $finish; end
end
/* main: %.preheader6.i*/
/*   %x.28.i = phi i32 [ 0, %103 ], [ %121, %..preheader6_crit_edge.i ]*/
if ((cur_state == LEGUP_F_main_BB__preheader6_i_62))
begin
main__preheader6_i_x_28_i_reg <= main__preheader6_i_x_28_i;
if (^reset !== 1'bX && ^(main__preheader6_i_x_28_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader6_i_x_28_i_reg"); $finish; end
end
/* main: %.preheader6.i*/
/*   %x.28.i = phi i32 [ 0, %103 ], [ %121, %..preheader6_crit_edge.i ]*/
if ((cur_state == LEGUP_F_main_BB__preheader6_i_62))
begin
main__preheader6_i_x_28_i_reg <= main__preheader6_i_x_28_i;
if (^reset !== 1'bX && ^(main__preheader6_i_x_28_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader6_i_x_28_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %116*/
/*   %y.07.i = phi i32 [ 0, %.preheader6.i ], [ %119, %116 ]*/
begin
main_116_y_07_i = main_116_y_07_i_phi_temp;
end
end
always @(*) begin
/* main: %116*/
/*   %scevgep35.i = getelementptr [5 x [5 x i16]]* %A, i32 0, i32 %y.07.i, i32 %x.28.i*/
begin
main_116_scevgep35_i = (`TAG_main_0_A_a + ((10 * main_116_y_07_i) + (2 * main__preheader6_i_x_28_i_reg)));
end
end
always @(posedge clk) begin
/* main: %116*/
/*   %scevgep35.i = getelementptr [5 x [5 x i16]]* %A, i32 0, i32 %y.07.i, i32 %x.28.i*/
if ((cur_state == LEGUP_F_main_BB_116_63))
begin
main_116_scevgep35_i_reg <= main_116_scevgep35_i;
if (^reset !== 1'bX && ^(main_116_scevgep35_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_116_scevgep35_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %116*/
/*   %117 = load i16* %scevgep35.i, align 2, !tbaa !0*/
begin
main_116_117 = memory_controller_out_b[15:0];
end
end
always @(*) begin
/* main: %116*/
/*   %118 = xor i16 %115, %117*/
begin
main_116_118 = (main__preheader6_i_115_reg ^ main_116_117);
end
end
always @(posedge clk) begin
/* main: %116*/
/*   %118 = xor i16 %115, %117*/
if ((cur_state == LEGUP_F_main_BB_116_65))
begin
main_116_118_reg <= main_116_118;
if (^reset !== 1'bX && ^(main_116_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_116_118_reg"); $finish; end
end
end
always @(*) begin
/* main: %116*/
/*   %119 = add i32 %y.07.i, 1*/
begin
main_116_119 = (main_116_y_07_i + 32'd1);
end
end
always @(posedge clk) begin
/* main: %116*/
/*   %119 = add i32 %y.07.i, 1*/
if ((cur_state == LEGUP_F_main_BB_116_63))
begin
main_116_119_reg <= main_116_119;
if (^reset !== 1'bX && ^(main_116_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_116_119_reg"); $finish; end
end
end
always @(*) begin
/* main: %116*/
/*   %exitcond34.i = icmp eq i32 %119, 5*/
begin
main_116_exitcond34_i = (main_116_119 == 32'd5);
end
end
always @(posedge clk) begin
/* main: %116*/
/*   %exitcond34.i = icmp eq i32 %119, 5*/
if ((cur_state == LEGUP_F_main_BB_116_63))
begin
main_116_exitcond34_i_reg <= main_116_exitcond34_i;
if (^reset !== 1'bX && ^(main_116_exitcond34_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_116_exitcond34_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %120*/
/*   %121 = add i32 %x.28.i, 1*/
begin
main_120_121 = (main__preheader6_i_x_28_i_reg + 32'd1);
end
end
always @(posedge clk) begin
/* main: %120*/
/*   %121 = add i32 %x.28.i, 1*/
if ((cur_state == LEGUP_F_main_BB_120_67))
begin
main_120_121_reg <= main_120_121;
if (^reset !== 1'bX && ^(main_120_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_120_121_reg"); $finish; end
end
end
always @(*) begin
/* main: %120*/
/*   %exitcond36.i = icmp eq i32 %121, 5*/
begin
main_120_exitcond36_i = (main_120_121 == 32'd5);
end
end
always @(*) begin
/* main: %..preheader6_crit_edge.i*/
/*   %scevgep38.phi.trans.insert.i = getelementptr [5 x i16]* %D.i, i32 0, i32 %121*/
begin
main___preheader6_crit_edge_i_scevgep38_phi_trans_insert_i = (`TAG_main_0_D_i_a + (2 * main_120_121_reg));
end
end
always @(*) begin
/* main: %..preheader6_crit_edge.i*/
/*   %.pre.i = load i16* %scevgep38.phi.trans.insert.i, align 2, !tbaa !0*/
begin
main___preheader6_crit_edge_i__pre_i = memory_controller_out_a[15:0];
end
end
always @(*) begin
/* main: %122*/
/*   %124 = load i16* %tmp, align 2, !tbaa !0*/
begin
main_122_124 = memory_controller_out_a[15:0];
end
end
always @(*) begin
/* main: %122*/
/*   %125 = zext i16 %124 to i32*/
begin
main_122_125 = {main_122_124};
end
end
always @(posedge clk) begin
/* main: %122*/
/*   %125 = zext i16 %124 to i32*/
if ((cur_state == LEGUP_F_main_BB_122_74))
begin
main_122_125_reg <= main_122_125;
if (^reset !== 1'bX && ^(main_122_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_122_125_reg"); $finish; end
end
end
always @(*) begin
/* main: %122*/
/*   %126 = load i16* %7, align 2, !tbaa !0*/
begin
main_122_126 = memory_controller_out_b[15:0];
end
end
always @(*) begin
/* main: %122*/
/*   %127 = zext i16 %126 to i32*/
begin
main_122_127 = {main_122_126};
end
end
always @(posedge clk) begin
/* main: %122*/
/*   %127 = zext i16 %126 to i32*/
if ((cur_state == LEGUP_F_main_BB_122_74))
begin
main_122_127_reg <= main_122_127;
if (^reset !== 1'bX && ^(main_122_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_122_127_reg"); $finish; end
end
end
always @(*) begin
/* main: %122*/
/*   %128 = load i16* %8, align 2, !tbaa !0*/
begin
main_122_128 = memory_controller_out_a[15:0];
end
end
always @(*) begin
/* main: %122*/
/*   %129 = zext i16 %128 to i32*/
begin
main_122_129 = {main_122_128};
end
end
always @(posedge clk) begin
/* main: %122*/
/*   %129 = zext i16 %128 to i32*/
if ((cur_state == LEGUP_F_main_BB_122_75))
begin
main_122_129_reg <= main_122_129;
if (^reset !== 1'bX && ^(main_122_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_122_129_reg"); $finish; end
end
end
always @(*) begin
/* main: %122*/
/*   %130 = load i16* %9, align 2, !tbaa !0*/
begin
main_122_130 = memory_controller_out_b[15:0];
end
end
always @(*) begin
/* main: %122*/
/*   %131 = zext i16 %130 to i32*/
begin
main_122_131 = {main_122_130};
end
end
always @(posedge clk) begin
/* main: %122*/
/*   %131 = zext i16 %130 to i32*/
if ((cur_state == LEGUP_F_main_BB_122_75))
begin
main_122_131_reg <= main_122_131;
if (^reset !== 1'bX && ^(main_122_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_122_131_reg"); $finish; end
end
end
always @(*) begin
/* main: %122*/
/*   %132 = load i16* %10, align 2, !tbaa !0*/
begin
main_122_132 = memory_controller_out_b[15:0];
end
end
always @(*) begin
/* main: %122*/
/*   %133 = zext i16 %132 to i32*/
begin
main_122_133 = {main_122_132};
end
end
always @(*) begin
/* main: %122*/
/*   %135 = load i16* %11, align 2, !tbaa !0*/
begin
main_122_135 = memory_controller_out_a[15:0];
end
end
always @(*) begin
/* main: %122*/
/*   %136 = zext i16 %135 to i32*/
begin
main_122_136 = {main_122_135};
end
end
always @(posedge clk) begin
/* main: %122*/
/*   %136 = zext i16 %135 to i32*/
if ((cur_state == LEGUP_F_main_BB_122_79))
begin
main_122_136_reg <= main_122_136;
if (^reset !== 1'bX && ^(main_122_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_122_136_reg"); $finish; end
end
end
always @(*) begin
/* main: %122*/
/*   %137 = load i16* %12, align 2, !tbaa !0*/
begin
main_122_137 = memory_controller_out_b[15:0];
end
end
always @(*) begin
/* main: %122*/
/*   %138 = zext i16 %137 to i32*/
begin
main_122_138 = {main_122_137};
end
end
always @(posedge clk) begin
/* main: %122*/
/*   %138 = zext i16 %137 to i32*/
if ((cur_state == LEGUP_F_main_BB_122_79))
begin
main_122_138_reg <= main_122_138;
if (^reset !== 1'bX && ^(main_122_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_122_138_reg"); $finish; end
end
end
always @(*) begin
/* main: %122*/
/*   %139 = load i16* %13, align 2, !tbaa !0*/
begin
main_122_139 = memory_controller_out_a[15:0];
end
end
always @(*) begin
/* main: %122*/
/*   %140 = zext i16 %139 to i32*/
begin
main_122_140 = {main_122_139};
end
end
always @(posedge clk) begin
/* main: %122*/
/*   %140 = zext i16 %139 to i32*/
if ((cur_state == LEGUP_F_main_BB_122_80))
begin
main_122_140_reg <= main_122_140;
if (^reset !== 1'bX && ^(main_122_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_122_140_reg"); $finish; end
end
end
always @(*) begin
/* main: %122*/
/*   %141 = load i16* %14, align 2, !tbaa !0*/
begin
main_122_141 = memory_controller_out_b[15:0];
end
end
always @(*) begin
/* main: %122*/
/*   %142 = zext i16 %141 to i32*/
begin
main_122_142 = {main_122_141};
end
end
always @(posedge clk) begin
/* main: %122*/
/*   %142 = zext i16 %141 to i32*/
if ((cur_state == LEGUP_F_main_BB_122_80))
begin
main_122_142_reg <= main_122_142;
if (^reset !== 1'bX && ^(main_122_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_122_142_reg"); $finish; end
end
end
always @(*) begin
/* main: %122*/
/*   %143 = load i16* %15, align 2, !tbaa !0*/
begin
main_122_143 = memory_controller_out_a[15:0];
end
end
always @(*) begin
/* main: %122*/
/*   %144 = zext i16 %143 to i32*/
begin
main_122_144 = {main_122_143};
end
end
always @(*) begin
/* main: %122*/
/*   %146 = load i16* %16, align 2, !tbaa !0*/
begin
main_122_146 = memory_controller_out_a[15:0];
end
end
always @(*) begin
/* main: %122*/
/*   %147 = zext i16 %146 to i32*/
begin
main_122_147 = {main_122_146};
end
end
always @(posedge clk) begin
/* main: %122*/
/*   %147 = zext i16 %146 to i32*/
if ((cur_state == LEGUP_F_main_BB_122_84))
begin
main_122_147_reg <= main_122_147;
if (^reset !== 1'bX && ^(main_122_147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_122_147_reg"); $finish; end
end
end
always @(*) begin
/* main: %122*/
/*   %148 = load i16* %17, align 2, !tbaa !0*/
begin
main_122_148 = memory_controller_out_b[15:0];
end
end
always @(*) begin
/* main: %122*/
/*   %149 = zext i16 %148 to i32*/
begin
main_122_149 = {main_122_148};
end
end
always @(posedge clk) begin
/* main: %122*/
/*   %149 = zext i16 %148 to i32*/
if ((cur_state == LEGUP_F_main_BB_122_84))
begin
main_122_149_reg <= main_122_149;
if (^reset !== 1'bX && ^(main_122_149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_122_149_reg"); $finish; end
end
end
always @(*) begin
/* main: %122*/
/*   %150 = load i16* %18, align 2, !tbaa !0*/
begin
main_122_150 = memory_controller_out_a[15:0];
end
end
always @(*) begin
/* main: %122*/
/*   %151 = zext i16 %150 to i32*/
begin
main_122_151 = {main_122_150};
end
end
always @(posedge clk) begin
/* main: %122*/
/*   %151 = zext i16 %150 to i32*/
if ((cur_state == LEGUP_F_main_BB_122_85))
begin
main_122_151_reg <= main_122_151;
if (^reset !== 1'bX && ^(main_122_151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_122_151_reg"); $finish; end
end
end
always @(*) begin
/* main: %122*/
/*   %152 = load i16* %19, align 2, !tbaa !0*/
begin
main_122_152 = memory_controller_out_b[15:0];
end
end
always @(*) begin
/* main: %122*/
/*   %153 = zext i16 %152 to i32*/
begin
main_122_153 = {main_122_152};
end
end
always @(posedge clk) begin
/* main: %122*/
/*   %153 = zext i16 %152 to i32*/
if ((cur_state == LEGUP_F_main_BB_122_85))
begin
main_122_153_reg <= main_122_153;
if (^reset !== 1'bX && ^(main_122_153) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_122_153_reg"); $finish; end
end
end
always @(*) begin
/* main: %122*/
/*   %154 = load i16* %20, align 2, !tbaa !0*/
begin
main_122_154 = memory_controller_out_b[15:0];
end
end
always @(*) begin
/* main: %122*/
/*   %155 = zext i16 %154 to i32*/
begin
main_122_155 = {main_122_154};
end
end
always @(*) begin
/* main: %122*/
/*   %157 = load i16* %21, align 2, !tbaa !0*/
begin
main_122_157 = memory_controller_out_a[15:0];
end
end
always @(*) begin
/* main: %122*/
/*   %158 = zext i16 %157 to i32*/
begin
main_122_158 = {main_122_157};
end
end
always @(posedge clk) begin
/* main: %122*/
/*   %158 = zext i16 %157 to i32*/
if ((cur_state == LEGUP_F_main_BB_122_89))
begin
main_122_158_reg <= main_122_158;
if (^reset !== 1'bX && ^(main_122_158) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_122_158_reg"); $finish; end
end
end
always @(*) begin
/* main: %122*/
/*   %159 = load i16* %22, align 2, !tbaa !0*/
begin
main_122_159 = memory_controller_out_b[15:0];
end
end
always @(*) begin
/* main: %122*/
/*   %160 = zext i16 %159 to i32*/
begin
main_122_160 = {main_122_159};
end
end
always @(posedge clk) begin
/* main: %122*/
/*   %160 = zext i16 %159 to i32*/
if ((cur_state == LEGUP_F_main_BB_122_89))
begin
main_122_160_reg <= main_122_160;
if (^reset !== 1'bX && ^(main_122_160) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_122_160_reg"); $finish; end
end
end
always @(*) begin
/* main: %122*/
/*   %161 = load i16* %23, align 2, !tbaa !0*/
begin
main_122_161 = memory_controller_out_a[15:0];
end
end
always @(*) begin
/* main: %122*/
/*   %162 = zext i16 %161 to i32*/
begin
main_122_162 = {main_122_161};
end
end
always @(posedge clk) begin
/* main: %122*/
/*   %162 = zext i16 %161 to i32*/
if ((cur_state == LEGUP_F_main_BB_122_90))
begin
main_122_162_reg <= main_122_162;
if (^reset !== 1'bX && ^(main_122_162) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_122_162_reg"); $finish; end
end
end
always @(*) begin
/* main: %122*/
/*   %163 = load i16* %24, align 2, !tbaa !0*/
begin
main_122_163 = memory_controller_out_b[15:0];
end
end
always @(*) begin
/* main: %122*/
/*   %164 = zext i16 %163 to i32*/
begin
main_122_164 = {main_122_163};
end
end
always @(posedge clk) begin
/* main: %122*/
/*   %164 = zext i16 %163 to i32*/
if ((cur_state == LEGUP_F_main_BB_122_90))
begin
main_122_164_reg <= main_122_164;
if (^reset !== 1'bX && ^(main_122_164) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_122_164_reg"); $finish; end
end
end
always @(*) begin
/* main: %122*/
/*   %165 = load i16* %25, align 2, !tbaa !0*/
begin
main_122_165 = memory_controller_out_a[15:0];
end
end
always @(*) begin
/* main: %122*/
/*   %166 = zext i16 %165 to i32*/
begin
main_122_166 = {main_122_165};
end
end
always @(*) begin
/* main: %122*/
/*   %168 = load i16* %26, align 2, !tbaa !0*/
begin
main_122_168 = memory_controller_out_a[15:0];
end
end
always @(*) begin
/* main: %122*/
/*   %169 = zext i16 %168 to i32*/
begin
main_122_169 = {main_122_168};
end
end
always @(posedge clk) begin
/* main: %122*/
/*   %169 = zext i16 %168 to i32*/
if ((cur_state == LEGUP_F_main_BB_122_94))
begin
main_122_169_reg <= main_122_169;
if (^reset !== 1'bX && ^(main_122_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_122_169_reg"); $finish; end
end
end
always @(*) begin
/* main: %122*/
/*   %170 = load i16* %27, align 2, !tbaa !0*/
begin
main_122_170 = memory_controller_out_b[15:0];
end
end
always @(*) begin
/* main: %122*/
/*   %171 = zext i16 %170 to i32*/
begin
main_122_171 = {main_122_170};
end
end
always @(posedge clk) begin
/* main: %122*/
/*   %171 = zext i16 %170 to i32*/
if ((cur_state == LEGUP_F_main_BB_122_94))
begin
main_122_171_reg <= main_122_171;
if (^reset !== 1'bX && ^(main_122_171) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_122_171_reg"); $finish; end
end
end
always @(*) begin
/* main: %122*/
/*   %172 = load i16* %28, align 2, !tbaa !0*/
begin
main_122_172 = memory_controller_out_a[15:0];
end
end
always @(*) begin
/* main: %122*/
/*   %173 = zext i16 %172 to i32*/
begin
main_122_173 = {main_122_172};
end
end
always @(posedge clk) begin
/* main: %122*/
/*   %173 = zext i16 %172 to i32*/
if ((cur_state == LEGUP_F_main_BB_122_95))
begin
main_122_173_reg <= main_122_173;
if (^reset !== 1'bX && ^(main_122_173) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_122_173_reg"); $finish; end
end
end
always @(*) begin
/* main: %122*/
/*   %174 = load i16* %29, align 2, !tbaa !0*/
begin
main_122_174 = memory_controller_out_b[15:0];
end
end
always @(*) begin
/* main: %122*/
/*   %175 = zext i16 %174 to i32*/
begin
main_122_175 = {main_122_174};
end
end
always @(posedge clk) begin
/* main: %122*/
/*   %175 = zext i16 %174 to i32*/
if ((cur_state == LEGUP_F_main_BB_122_95))
begin
main_122_175_reg <= main_122_175;
if (^reset !== 1'bX && ^(main_122_175) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_122_175_reg"); $finish; end
end
end
always @(*) begin
/* main: %122*/
/*   %176 = load i16* %30, align 2, !tbaa !0*/
begin
main_122_176 = memory_controller_out_b[15:0];
end
end
always @(*) begin
/* main: %122*/
/*   %177 = zext i16 %176 to i32*/
begin
main_122_177 = {main_122_176};
end
end
always @(*) begin
/* main: %.preheader3.i*/
/*   %x.35.i = phi i32 [ 0, %122 ], [ %193, %192 ]*/
if ((cur_state == LEGUP_F_main_BB__preheader3_i_97))
begin
main__preheader3_i_x_35_i = main__preheader3_i_x_35_i_phi_temp;
end
/* main: %.preheader3.i*/
/*   %x.35.i = phi i32 [ 0, %122 ], [ %193, %192 ]*/
else if ((cur_state == LEGUP_F_main_BB__preheader3_i_97))
begin
main__preheader3_i_x_35_i = main__preheader3_i_x_35_i_phi_temp;
end
/* main: %.preheader3.i*/
/*   %x.35.i = phi i32 [ 0, %122 ], [ %193, %192 ]*/
else if ((cur_state == LEGUP_F_main_BB__preheader3_i_97))
begin
main__preheader3_i_x_35_i = main__preheader3_i_x_35_i_phi_temp;
end
/* main: %.preheader3.i*/
/*   %x.35.i = phi i32 [ 0, %122 ], [ %193, %192 ]*/
else /* if ((cur_state == LEGUP_F_main_BB__preheader3_i_97)) */
begin
main__preheader3_i_x_35_i = main__preheader3_i_x_35_i_phi_temp;
end
end
always @(posedge clk) begin
/* main: %.preheader3.i*/
/*   %x.35.i = phi i32 [ 0, %122 ], [ %193, %192 ]*/
if ((cur_state == LEGUP_F_main_BB__preheader3_i_97))
begin
main__preheader3_i_x_35_i_reg <= main__preheader3_i_x_35_i;
if (^reset !== 1'bX && ^(main__preheader3_i_x_35_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader3_i_x_35_i_reg"); $finish; end
end
/* main: %.preheader3.i*/
/*   %x.35.i = phi i32 [ 0, %122 ], [ %193, %192 ]*/
if ((cur_state == LEGUP_F_main_BB__preheader3_i_97))
begin
main__preheader3_i_x_35_i_reg <= main__preheader3_i_x_35_i;
if (^reset !== 1'bX && ^(main__preheader3_i_x_35_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader3_i_x_35_i_reg"); $finish; end
end
/* main: %.preheader3.i*/
/*   %x.35.i = phi i32 [ 0, %122 ], [ %193, %192 ]*/
if ((cur_state == LEGUP_F_main_BB__preheader3_i_97))
begin
main__preheader3_i_x_35_i_reg <= main__preheader3_i_x_35_i;
if (^reset !== 1'bX && ^(main__preheader3_i_x_35_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader3_i_x_35_i_reg"); $finish; end
end
/* main: %.preheader3.i*/
/*   %x.35.i = phi i32 [ 0, %122 ], [ %193, %192 ]*/
if ((cur_state == LEGUP_F_main_BB__preheader3_i_97))
begin
main__preheader3_i_x_35_i_reg <= main__preheader3_i_x_35_i;
if (^reset !== 1'bX && ^(main__preheader3_i_x_35_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader3_i_x_35_i_reg"); $finish; end
end
/* main: %.preheader3.i*/
/*   %x.35.i = phi i32 [ 0, %122 ], [ %193, %192 ]*/
if ((cur_state == LEGUP_F_main_BB__preheader3_i_97))
begin
main__preheader3_i_x_35_i_reg <= main__preheader3_i_x_35_i;
if (^reset !== 1'bX && ^(main__preheader3_i_x_35_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader3_i_x_35_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader3.i*/
/*   %tmp30.i = shl i32 %x.35.i, 1*/
begin
main__preheader3_i_tmp30_i = (main__preheader3_i_x_35_i <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* main: %.preheader3.i*/
/*   %tmp30.i = shl i32 %x.35.i, 1*/
if ((cur_state == LEGUP_F_main_BB__preheader3_i_97))
begin
main__preheader3_i_tmp30_i_reg <= main__preheader3_i_tmp30_i;
if (^reset !== 1'bX && ^(main__preheader3_i_tmp30_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader3_i_tmp30_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %179*/
/*   %y.14.i = phi i32 [ 0, %.preheader3.i ], [ %191, %179 ]*/
if ((cur_state == LEGUP_F_main_BB_179_98))
begin
main_179_y_14_i = main_179_y_14_i_phi_temp;
end
/* main: %179*/
/*   %y.14.i = phi i32 [ 0, %.preheader3.i ], [ %191, %179 ]*/
else /* if ((cur_state == LEGUP_F_main_BB_179_98)) */
begin
main_179_y_14_i = main_179_y_14_i_phi_temp;
end
end
always @(posedge clk) begin
/* main: %179*/
/*   %y.14.i = phi i32 [ 0, %.preheader3.i ], [ %191, %179 ]*/
if ((cur_state == LEGUP_F_main_BB_179_98))
begin
main_179_y_14_i_reg <= main_179_y_14_i;
if (^reset !== 1'bX && ^(main_179_y_14_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_179_y_14_i_reg"); $finish; end
end
/* main: %179*/
/*   %y.14.i = phi i32 [ 0, %.preheader3.i ], [ %191, %179 ]*/
if ((cur_state == LEGUP_F_main_BB_179_98))
begin
main_179_y_14_i_reg <= main_179_y_14_i;
if (^reset !== 1'bX && ^(main_179_y_14_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_179_y_14_i_reg"); $finish; end
end
/* main: %179*/
/*   %y.14.i = phi i32 [ 0, %.preheader3.i ], [ %191, %179 ]*/
if ((cur_state == LEGUP_F_main_BB_179_98))
begin
main_179_y_14_i_reg <= main_179_y_14_i;
if (^reset !== 1'bX && ^(main_179_y_14_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_179_y_14_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %179*/
/*   %tmp29.i = mul i32 %y.14.i, 3*/
begin
main_179_tmp29_i = (main_179_y_14_i * 32'd3);
end
end
always @(*) begin
/* main: %179*/
/*   %tmp27.i = add i32 %tmp30.i, %tmp29.i*/
begin
main_179_tmp27_i = (main__preheader3_i_tmp30_i_reg + main_179_tmp29_i);
end
end
always @(posedge clk) begin
/* main: %179*/
/*   %tmp27.i = add i32 %tmp30.i, %tmp29.i*/
if ((cur_state == LEGUP_F_main_BB_179_98))
begin
main_179_tmp27_i_reg <= main_179_tmp27_i;
if (^reset !== 1'bX && ^(main_179_tmp27_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_179_tmp27_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %179*/
/*   %scevgep21.i = getelementptr [5 x [5 x i16]]* @rotateArray, i32 0, i32 %y.14.i, i32 %x.35.i*/
begin
main_179_scevgep21_i = (`TAG_g_rotateArray_a + ((10 * main_179_y_14_i) + (2 * main__preheader3_i_x_35_i_reg)));
end
end
always @(*) begin
/* main: %179*/
/*   %scevgep20.i = getelementptr [5 x [5 x i16]]* %A, i32 0, i32 %y.14.i, i32 %x.35.i*/
begin
main_179_scevgep20_i = (`TAG_main_0_A_a + ((10 * main_179_y_14_i) + (2 * main__preheader3_i_x_35_i_reg)));
end
end
always @(*) begin
/* main: %179*/
/*   %180 = load i16* %scevgep20.i, align 2, !tbaa !0*/
begin
main_179_180 = memory_controller_out_a[15:0];
end
end
always @(*) begin
/* main: %179*/
/*   %181 = load i16* %scevgep21.i, align 2, !tbaa !0*/
begin
main_179_181 = memory_controller_out_b[15:0];
end
end
always @(*) begin
/* main: %179*/
/*   %182 = zext i16 %181 to i32*/
begin
main_179_182 = {main_179_181};
end
end
always @(*) begin
/* main: %179*/
/*   %183 = and i32 %182, 15*/
begin
main_179_183 = (main_179_182 & 32'd15);
end
end
always @(*) begin
/* main: %179*/
/*   %184 = zext i16 %180 to i32*/
begin
main_179_184 = {main_179_180};
end
end
always @(*) begin
/* main: %179*/
/*   %185 = shl i32 %184, %183*/
begin
main_179_185 = (main_179_184 <<< (main_179_183 % 32));
end
end
always @(*) begin
/* main: %179*/
/*   %186 = sub nsw i32 16, %183*/
begin
main_179_186 = (32'd16 - main_179_183);
end
end
always @(*) begin
/* main: %179*/
/*   %187 = lshr i32 %184, %186*/
begin
main_179_187 = (main_179_184 >>> (main_179_186 % 32));
end
end
always @(*) begin
/* main: %179*/
/*   %188 = or i32 %187, %185*/
begin
main_179_188 = (main_179_187 | main_179_185);
end
end
always @(*) begin
/* main: %179*/
/*   %189 = trunc i32 %188 to i16*/
begin
main_179_189 = main_179_188[15:0];
end
end
always @(posedge clk) begin
/* main: %179*/
/*   %189 = trunc i32 %188 to i16*/
if ((cur_state == LEGUP_F_main_BB_179_100))
begin
main_179_189_reg <= main_179_189;
if (^reset !== 1'bX && ^(main_179_189) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_179_189_reg"); $finish; end
end
end
always @(*) begin
main_179_190 = main_unsigned_modulus_32_0;
end
always @(*) begin
/* main: %179*/
/*   %190 = urem i32 %tmp27.i, 5*/
main_179_190_reg = main_92_99_reg;
end
always @(*) begin
/* main: %179*/
/*   %tmp23.i = mul i32 %190, 5*/
begin
main_179_tmp23_i = (main_179_190_reg * 32'd5);
end
end
always @(*) begin
/* main: %179*/
/*   %scevgep22.sum.i = add i32 %y.14.i, %tmp23.i*/
begin
main_179_scevgep22_sum_i = (main_179_y_14_i_reg + main_179_tmp23_i);
end
end
always @(posedge clk) begin
/* main: %179*/
/*   %scevgep22.sum.i = add i32 %y.14.i, %tmp23.i*/
if ((cur_state == LEGUP_F_main_BB_179_132))
begin
main_179_scevgep22_sum_i_reg <= main_179_scevgep22_sum_i;
if (^reset !== 1'bX && ^(main_179_scevgep22_sum_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_179_scevgep22_sum_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %179*/
/*   %scevgep24.i = getelementptr [5 x [5 x i16]]* %B.i, i32 0, i32 0, i32 %scevgep22.sum.i*/
begin
main_179_scevgep24_i = (`TAG_main_0_B_i_a + (2 * main_179_scevgep22_sum_i_reg));
end
end
always @(posedge clk) begin
/* main: %179*/
/*   %scevgep24.i = getelementptr [5 x [5 x i16]]* %B.i, i32 0, i32 0, i32 %scevgep22.sum.i*/
if ((cur_state == LEGUP_F_main_BB_179_133))
begin
main_179_scevgep24_i_reg <= main_179_scevgep24_i;
if (^reset !== 1'bX && ^(main_179_scevgep24_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_179_scevgep24_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %179*/
/*   %191 = add i32 %y.14.i, 1*/
begin
main_179_191 = (main_179_y_14_i + 32'd1);
end
end
always @(posedge clk) begin
/* main: %179*/
/*   %191 = add i32 %y.14.i, 1*/
if ((cur_state == LEGUP_F_main_BB_179_98))
begin
main_179_191_reg <= main_179_191;
if (^reset !== 1'bX && ^(main_179_191) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_179_191_reg"); $finish; end
end
end
always @(*) begin
/* main: %179*/
/*   %exitcond19.i = icmp eq i32 %191, 5*/
begin
main_179_exitcond19_i = (main_179_191 == 32'd5);
end
end
always @(posedge clk) begin
/* main: %179*/
/*   %exitcond19.i = icmp eq i32 %191, 5*/
if ((cur_state == LEGUP_F_main_BB_179_98))
begin
main_179_exitcond19_i_reg <= main_179_exitcond19_i;
if (^reset !== 1'bX && ^(main_179_exitcond19_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_179_exitcond19_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %192*/
/*   %193 = add i32 %x.35.i, 1*/
begin
main_192_193 = (main__preheader3_i_x_35_i_reg + 32'd1);
end
end
always @(*) begin
/* main: %192*/
/*   %exitcond28.i = icmp eq i32 %193, 5*/
begin
main_192_exitcond28_i = (main_192_193 == 32'd5);
end
end
always @(*) begin
/* main: %194*/
/*   %196 = load i16* %41, align 2, !tbaa !0*/
begin
main_194_196 = memory_controller_out_a[15:0];
end
end
always @(*) begin
/* main: %194*/
/*   %197 = zext i16 %196 to i32*/
begin
main_194_197 = {main_194_196};
end
end
always @(posedge clk) begin
/* main: %194*/
/*   %197 = zext i16 %196 to i32*/
if ((cur_state == LEGUP_F_main_BB_194_139))
begin
main_194_197_reg <= main_194_197;
if (^reset !== 1'bX && ^(main_194_197) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_194_197_reg"); $finish; end
end
end
always @(*) begin
/* main: %194*/
/*   %198 = load i16* %42, align 2, !tbaa !0*/
begin
main_194_198 = memory_controller_out_b[15:0];
end
end
always @(*) begin
/* main: %194*/
/*   %199 = zext i16 %198 to i32*/
begin
main_194_199 = {main_194_198};
end
end
always @(posedge clk) begin
/* main: %194*/
/*   %199 = zext i16 %198 to i32*/
if ((cur_state == LEGUP_F_main_BB_194_139))
begin
main_194_199_reg <= main_194_199;
if (^reset !== 1'bX && ^(main_194_199) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_194_199_reg"); $finish; end
end
end
always @(*) begin
/* main: %194*/
/*   %200 = load i16* %43, align 2, !tbaa !0*/
begin
main_194_200 = memory_controller_out_a[15:0];
end
end
always @(*) begin
/* main: %194*/
/*   %201 = zext i16 %200 to i32*/
begin
main_194_201 = {main_194_200};
end
end
always @(posedge clk) begin
/* main: %194*/
/*   %201 = zext i16 %200 to i32*/
if ((cur_state == LEGUP_F_main_BB_194_140))
begin
main_194_201_reg <= main_194_201;
if (^reset !== 1'bX && ^(main_194_201) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_194_201_reg"); $finish; end
end
end
always @(*) begin
/* main: %194*/
/*   %202 = load i16* %44, align 2, !tbaa !0*/
begin
main_194_202 = memory_controller_out_b[15:0];
end
end
always @(*) begin
/* main: %194*/
/*   %203 = zext i16 %202 to i32*/
begin
main_194_203 = {main_194_202};
end
end
always @(posedge clk) begin
/* main: %194*/
/*   %203 = zext i16 %202 to i32*/
if ((cur_state == LEGUP_F_main_BB_194_140))
begin
main_194_203_reg <= main_194_203;
if (^reset !== 1'bX && ^(main_194_203) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_194_203_reg"); $finish; end
end
end
always @(*) begin
/* main: %194*/
/*   %204 = load i16* %45, align 2, !tbaa !0*/
begin
main_194_204 = memory_controller_out_b[15:0];
end
end
always @(*) begin
/* main: %194*/
/*   %205 = zext i16 %204 to i32*/
begin
main_194_205 = {main_194_204};
end
end
always @(*) begin
/* main: %194*/
/*   %207 = load i16* %46, align 2, !tbaa !0*/
begin
main_194_207 = memory_controller_out_a[15:0];
end
end
always @(*) begin
/* main: %194*/
/*   %208 = zext i16 %207 to i32*/
begin
main_194_208 = {main_194_207};
end
end
always @(posedge clk) begin
/* main: %194*/
/*   %208 = zext i16 %207 to i32*/
if ((cur_state == LEGUP_F_main_BB_194_144))
begin
main_194_208_reg <= main_194_208;
if (^reset !== 1'bX && ^(main_194_208) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_194_208_reg"); $finish; end
end
end
always @(*) begin
/* main: %194*/
/*   %209 = load i16* %47, align 2, !tbaa !0*/
begin
main_194_209 = memory_controller_out_b[15:0];
end
end
always @(*) begin
/* main: %194*/
/*   %210 = zext i16 %209 to i32*/
begin
main_194_210 = {main_194_209};
end
end
always @(posedge clk) begin
/* main: %194*/
/*   %210 = zext i16 %209 to i32*/
if ((cur_state == LEGUP_F_main_BB_194_144))
begin
main_194_210_reg <= main_194_210;
if (^reset !== 1'bX && ^(main_194_210) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_194_210_reg"); $finish; end
end
end
always @(*) begin
/* main: %194*/
/*   %211 = load i16* %48, align 2, !tbaa !0*/
begin
main_194_211 = memory_controller_out_a[15:0];
end
end
always @(*) begin
/* main: %194*/
/*   %212 = zext i16 %211 to i32*/
begin
main_194_212 = {main_194_211};
end
end
always @(posedge clk) begin
/* main: %194*/
/*   %212 = zext i16 %211 to i32*/
if ((cur_state == LEGUP_F_main_BB_194_145))
begin
main_194_212_reg <= main_194_212;
if (^reset !== 1'bX && ^(main_194_212) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_194_212_reg"); $finish; end
end
end
always @(*) begin
/* main: %194*/
/*   %213 = load i16* %49, align 2, !tbaa !0*/
begin
main_194_213 = memory_controller_out_b[15:0];
end
end
always @(*) begin
/* main: %194*/
/*   %214 = zext i16 %213 to i32*/
begin
main_194_214 = {main_194_213};
end
end
always @(posedge clk) begin
/* main: %194*/
/*   %214 = zext i16 %213 to i32*/
if ((cur_state == LEGUP_F_main_BB_194_145))
begin
main_194_214_reg <= main_194_214;
if (^reset !== 1'bX && ^(main_194_214) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_194_214_reg"); $finish; end
end
end
always @(*) begin
/* main: %194*/
/*   %215 = load i16* %50, align 2, !tbaa !0*/
begin
main_194_215 = memory_controller_out_b[15:0];
end
end
always @(*) begin
/* main: %194*/
/*   %216 = zext i16 %215 to i32*/
begin
main_194_216 = {main_194_215};
end
end
always @(*) begin
/* main: %194*/
/*   %218 = load i16* %51, align 2, !tbaa !0*/
begin
main_194_218 = memory_controller_out_a[15:0];
end
end
always @(*) begin
/* main: %194*/
/*   %219 = zext i16 %218 to i32*/
begin
main_194_219 = {main_194_218};
end
end
always @(posedge clk) begin
/* main: %194*/
/*   %219 = zext i16 %218 to i32*/
if ((cur_state == LEGUP_F_main_BB_194_149))
begin
main_194_219_reg <= main_194_219;
if (^reset !== 1'bX && ^(main_194_219) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_194_219_reg"); $finish; end
end
end
always @(*) begin
/* main: %194*/
/*   %220 = load i16* %52, align 2, !tbaa !0*/
begin
main_194_220 = memory_controller_out_b[15:0];
end
end
always @(*) begin
/* main: %194*/
/*   %221 = zext i16 %220 to i32*/
begin
main_194_221 = {main_194_220};
end
end
always @(posedge clk) begin
/* main: %194*/
/*   %221 = zext i16 %220 to i32*/
if ((cur_state == LEGUP_F_main_BB_194_149))
begin
main_194_221_reg <= main_194_221;
if (^reset !== 1'bX && ^(main_194_221) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_194_221_reg"); $finish; end
end
end
always @(*) begin
/* main: %194*/
/*   %222 = load i16* %53, align 2, !tbaa !0*/
begin
main_194_222 = memory_controller_out_a[15:0];
end
end
always @(*) begin
/* main: %194*/
/*   %223 = zext i16 %222 to i32*/
begin
main_194_223 = {main_194_222};
end
end
always @(posedge clk) begin
/* main: %194*/
/*   %223 = zext i16 %222 to i32*/
if ((cur_state == LEGUP_F_main_BB_194_150))
begin
main_194_223_reg <= main_194_223;
if (^reset !== 1'bX && ^(main_194_223) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_194_223_reg"); $finish; end
end
end
always @(*) begin
/* main: %194*/
/*   %224 = load i16* %54, align 2, !tbaa !0*/
begin
main_194_224 = memory_controller_out_b[15:0];
end
end
always @(*) begin
/* main: %194*/
/*   %225 = zext i16 %224 to i32*/
begin
main_194_225 = {main_194_224};
end
end
always @(posedge clk) begin
/* main: %194*/
/*   %225 = zext i16 %224 to i32*/
if ((cur_state == LEGUP_F_main_BB_194_150))
begin
main_194_225_reg <= main_194_225;
if (^reset !== 1'bX && ^(main_194_225) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_194_225_reg"); $finish; end
end
end
always @(*) begin
/* main: %194*/
/*   %226 = load i16* %55, align 2, !tbaa !0*/
begin
main_194_226 = memory_controller_out_a[15:0];
end
end
always @(*) begin
/* main: %194*/
/*   %227 = zext i16 %226 to i32*/
begin
main_194_227 = {main_194_226};
end
end
always @(*) begin
/* main: %194*/
/*   %229 = load i16* %56, align 2, !tbaa !0*/
begin
main_194_229 = memory_controller_out_a[15:0];
end
end
always @(*) begin
/* main: %194*/
/*   %230 = zext i16 %229 to i32*/
begin
main_194_230 = {main_194_229};
end
end
always @(posedge clk) begin
/* main: %194*/
/*   %230 = zext i16 %229 to i32*/
if ((cur_state == LEGUP_F_main_BB_194_154))
begin
main_194_230_reg <= main_194_230;
if (^reset !== 1'bX && ^(main_194_230) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_194_230_reg"); $finish; end
end
end
always @(*) begin
/* main: %194*/
/*   %231 = load i16* %57, align 2, !tbaa !0*/
begin
main_194_231 = memory_controller_out_b[15:0];
end
end
always @(*) begin
/* main: %194*/
/*   %232 = zext i16 %231 to i32*/
begin
main_194_232 = {main_194_231};
end
end
always @(posedge clk) begin
/* main: %194*/
/*   %232 = zext i16 %231 to i32*/
if ((cur_state == LEGUP_F_main_BB_194_154))
begin
main_194_232_reg <= main_194_232;
if (^reset !== 1'bX && ^(main_194_232) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_194_232_reg"); $finish; end
end
end
always @(*) begin
/* main: %194*/
/*   %233 = load i16* %58, align 2, !tbaa !0*/
begin
main_194_233 = memory_controller_out_a[15:0];
end
end
always @(*) begin
/* main: %194*/
/*   %234 = zext i16 %233 to i32*/
begin
main_194_234 = {main_194_233};
end
end
always @(posedge clk) begin
/* main: %194*/
/*   %234 = zext i16 %233 to i32*/
if ((cur_state == LEGUP_F_main_BB_194_155))
begin
main_194_234_reg <= main_194_234;
if (^reset !== 1'bX && ^(main_194_234) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_194_234_reg"); $finish; end
end
end
always @(*) begin
/* main: %194*/
/*   %235 = load i16* %59, align 2, !tbaa !0*/
begin
main_194_235 = memory_controller_out_b[15:0];
end
end
always @(*) begin
/* main: %194*/
/*   %236 = zext i16 %235 to i32*/
begin
main_194_236 = {main_194_235};
end
end
always @(posedge clk) begin
/* main: %194*/
/*   %236 = zext i16 %235 to i32*/
if ((cur_state == LEGUP_F_main_BB_194_155))
begin
main_194_236_reg <= main_194_236;
if (^reset !== 1'bX && ^(main_194_236) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_194_236_reg"); $finish; end
end
end
always @(*) begin
/* main: %194*/
/*   %237 = load i16* %60, align 2, !tbaa !0*/
begin
main_194_237 = memory_controller_out_b[15:0];
end
end
always @(*) begin
/* main: %194*/
/*   %238 = zext i16 %237 to i32*/
begin
main_194_238 = {main_194_237};
end
end
always @(*) begin
/* main: %194*/
/*   %240 = load i16* %61, align 2, !tbaa !0*/
begin
main_194_240 = memory_controller_out_a[15:0];
end
end
always @(*) begin
/* main: %194*/
/*   %241 = zext i16 %240 to i32*/
begin
main_194_241 = {main_194_240};
end
end
always @(posedge clk) begin
/* main: %194*/
/*   %241 = zext i16 %240 to i32*/
if ((cur_state == LEGUP_F_main_BB_194_159))
begin
main_194_241_reg <= main_194_241;
if (^reset !== 1'bX && ^(main_194_241) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_194_241_reg"); $finish; end
end
end
always @(*) begin
/* main: %194*/
/*   %242 = load i16* %62, align 2, !tbaa !0*/
begin
main_194_242 = memory_controller_out_b[15:0];
end
end
always @(*) begin
/* main: %194*/
/*   %243 = zext i16 %242 to i32*/
begin
main_194_243 = {main_194_242};
end
end
always @(posedge clk) begin
/* main: %194*/
/*   %243 = zext i16 %242 to i32*/
if ((cur_state == LEGUP_F_main_BB_194_159))
begin
main_194_243_reg <= main_194_243;
if (^reset !== 1'bX && ^(main_194_243) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_194_243_reg"); $finish; end
end
end
always @(*) begin
/* main: %194*/
/*   %244 = load i16* %63, align 2, !tbaa !0*/
begin
main_194_244 = memory_controller_out_a[15:0];
end
end
always @(*) begin
/* main: %194*/
/*   %245 = zext i16 %244 to i32*/
begin
main_194_245 = {main_194_244};
end
end
always @(posedge clk) begin
/* main: %194*/
/*   %245 = zext i16 %244 to i32*/
if ((cur_state == LEGUP_F_main_BB_194_160))
begin
main_194_245_reg <= main_194_245;
if (^reset !== 1'bX && ^(main_194_245) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_194_245_reg"); $finish; end
end
end
always @(*) begin
/* main: %194*/
/*   %246 = load i16* %64, align 2, !tbaa !0*/
begin
main_194_246 = memory_controller_out_b[15:0];
end
end
always @(*) begin
/* main: %194*/
/*   %247 = zext i16 %246 to i32*/
begin
main_194_247 = {main_194_246};
end
end
always @(posedge clk) begin
/* main: %194*/
/*   %247 = zext i16 %246 to i32*/
if ((cur_state == LEGUP_F_main_BB_194_160))
begin
main_194_247_reg <= main_194_247;
if (^reset !== 1'bX && ^(main_194_247) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_194_247_reg"); $finish; end
end
end
always @(*) begin
/* main: %194*/
/*   %248 = load i16* %65, align 2, !tbaa !0*/
begin
main_194_248 = memory_controller_out_a[15:0];
end
end
always @(*) begin
/* main: %194*/
/*   %249 = zext i16 %248 to i32*/
begin
main_194_249 = {main_194_248};
end
end
always @(*) begin
/* main: %.preheader.i*/
/*   %x.42.i = phi i32 [ 0, %194 ], [ %251, %261 ]*/
if ((cur_state == LEGUP_F_main_BB__preheader_i_162))
begin
main__preheader_i_x_42_i = main__preheader_i_x_42_i_phi_temp;
end
/* main: %.preheader.i*/
/*   %x.42.i = phi i32 [ 0, %194 ], [ %251, %261 ]*/
else if ((cur_state == LEGUP_F_main_BB__preheader_i_162))
begin
main__preheader_i_x_42_i = main__preheader_i_x_42_i_phi_temp;
end
/* main: %.preheader.i*/
/*   %x.42.i = phi i32 [ 0, %194 ], [ %251, %261 ]*/
else /* if ((cur_state == LEGUP_F_main_BB__preheader_i_162)) */
begin
main__preheader_i_x_42_i = main__preheader_i_x_42_i_phi_temp;
end
end
always @(posedge clk) begin
/* main: %.preheader.i*/
/*   %x.42.i = phi i32 [ 0, %194 ], [ %251, %261 ]*/
if ((cur_state == LEGUP_F_main_BB__preheader_i_162))
begin
main__preheader_i_x_42_i_reg <= main__preheader_i_x_42_i;
if (^reset !== 1'bX && ^(main__preheader_i_x_42_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader_i_x_42_i_reg"); $finish; end
end
/* main: %.preheader.i*/
/*   %x.42.i = phi i32 [ 0, %194 ], [ %251, %261 ]*/
if ((cur_state == LEGUP_F_main_BB__preheader_i_162))
begin
main__preheader_i_x_42_i_reg <= main__preheader_i_x_42_i;
if (^reset !== 1'bX && ^(main__preheader_i_x_42_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader_i_x_42_i_reg"); $finish; end
end
/* main: %.preheader.i*/
/*   %x.42.i = phi i32 [ 0, %194 ], [ %251, %261 ]*/
if ((cur_state == LEGUP_F_main_BB__preheader_i_162))
begin
main__preheader_i_x_42_i_reg <= main__preheader_i_x_42_i;
if (^reset !== 1'bX && ^(main__preheader_i_x_42_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader_i_x_42_i_reg"); $finish; end
end
/* main: %.preheader.i*/
/*   %x.42.i = phi i32 [ 0, %194 ], [ %251, %261 ]*/
if ((cur_state == LEGUP_F_main_BB__preheader_i_162))
begin
main__preheader_i_x_42_i_reg <= main__preheader_i_x_42_i;
if (^reset !== 1'bX && ^(main__preheader_i_x_42_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader_i_x_42_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader.i*/
/*   %tmp18.i = add i32 %x.42.i, 2*/
begin
main__preheader_i_tmp18_i = (main__preheader_i_x_42_i + 32'd2);
end
end
always @(posedge clk) begin
/* main: %.preheader.i*/
/*   %tmp18.i = add i32 %x.42.i, 2*/
if ((cur_state == LEGUP_F_main_BB__preheader_i_162))
begin
main__preheader_i_tmp18_i_reg <= main__preheader_i_tmp18_i;
if (^reset !== 1'bX && ^(main__preheader_i_tmp18_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader_i_tmp18_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader.i*/
/*   %251 = add i32 %x.42.i, 1*/
begin
main__preheader_i_251 = (main__preheader_i_x_42_i + 32'd1);
end
end
always @(posedge clk) begin
/* main: %.preheader.i*/
/*   %251 = add i32 %x.42.i, 1*/
if ((cur_state == LEGUP_F_main_BB__preheader_i_162))
begin
main__preheader_i_251_reg <= main__preheader_i_251;
if (^reset !== 1'bX && ^(main__preheader_i_251) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader_i_251_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader.i*/
/*   %tmp.i = icmp eq i32 %251, 5*/
begin
main__preheader_i_tmp_i = (main__preheader_i_251 == 32'd5);
end
end
always @(posedge clk) begin
/* main: %.preheader.i*/
/*   %tmp.i = icmp eq i32 %251, 5*/
if ((cur_state == LEGUP_F_main_BB__preheader_i_162))
begin
main__preheader_i_tmp_i_reg <= main__preheader_i_tmp_i;
if (^reset !== 1'bX && ^(main__preheader_i_tmp_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader_i_tmp_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader.i*/
/*   %tmp14.i = select i1 %tmp.i, i32 0, i32 %251*/
begin
main__preheader_i_tmp14_i = (main__preheader_i_tmp_i ? 32'd0 : main__preheader_i_251);
end
end
always @(posedge clk) begin
/* main: %.preheader.i*/
/*   %tmp14.i = select i1 %tmp.i, i32 0, i32 %251*/
if ((cur_state == LEGUP_F_main_BB__preheader_i_162))
begin
main__preheader_i_tmp14_i_reg <= main__preheader_i_tmp14_i;
if (^reset !== 1'bX && ^(main__preheader_i_tmp14_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader_i_tmp14_i_reg"); $finish; end
end
end
always @(*) begin
main__preheader_i_252 = main_unsigned_modulus_32_0;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %252 = urem i32 %tmp18.i, 5*/
main__preheader_i_252_reg = main_92_99_reg;
end
always @(*) begin
/* main: %253*/
/*   %y.21.i = phi i32 [ 0, %.preheader.i ], [ %260, %253 ]*/
begin
main_253_y_21_i = main_253_y_21_i_phi_temp;
end
end
always @(*) begin
/* main: %253*/
/*   %scevgep13.i = getelementptr [5 x [5 x i16]]* %A, i32 0, i32 %y.21.i, i32 %x.42.i*/
begin
main_253_scevgep13_i = (`TAG_main_0_A_a + ((10 * main_253_y_21_i) + (2 * main__preheader_i_x_42_i_reg)));
end
end
always @(posedge clk) begin
/* main: %253*/
/*   %scevgep13.i = getelementptr [5 x [5 x i16]]* %A, i32 0, i32 %y.21.i, i32 %x.42.i*/
if ((cur_state == LEGUP_F_main_BB_253_196))
begin
main_253_scevgep13_i_reg <= main_253_scevgep13_i;
if (^reset !== 1'bX && ^(main_253_scevgep13_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_253_scevgep13_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %253*/
/*   %scevgep.i = getelementptr [5 x [5 x i16]]* %B.i, i32 0, i32 %y.21.i, i32 %x.42.i*/
begin
main_253_scevgep_i = (`TAG_main_0_B_i_a + ((10 * main_253_y_21_i) + (2 * main__preheader_i_x_42_i_reg)));
end
end
always @(*) begin
/* main: %253*/
/*   %scevgep11.i = getelementptr [5 x [5 x i16]]* %B.i, i32 0, i32 %y.21.i, i32 %tmp14.i*/
begin
main_253_scevgep11_i = (`TAG_main_0_B_i_a + ((10 * main_253_y_21_i) + (2 * main__preheader_i_tmp14_i_reg)));
end
end
always @(*) begin
/* main: %253*/
/*   %scevgep12.i = getelementptr [5 x [5 x i16]]* %B.i, i32 0, i32 %y.21.i, i32 %252*/
begin
main_253_scevgep12_i = (`TAG_main_0_B_i_a + ((10 * main_253_y_21_i) + (2 * main__preheader_i_252_reg)));
end
end
always @(posedge clk) begin
/* main: %253*/
/*   %scevgep12.i = getelementptr [5 x [5 x i16]]* %B.i, i32 0, i32 %y.21.i, i32 %252*/
if ((cur_state == LEGUP_F_main_BB_253_196))
begin
main_253_scevgep12_i_reg <= main_253_scevgep12_i;
if (^reset !== 1'bX && ^(main_253_scevgep12_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_253_scevgep12_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %253*/
/*   %254 = load i16* %scevgep.i, align 2, !tbaa !0*/
begin
main_253_254 = memory_controller_out_a[15:0];
end
end
always @(posedge clk) begin
/* main: %253*/
/*   %254 = load i16* %scevgep.i, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_253_198))
begin
main_253_254_reg <= main_253_254;
if (^reset !== 1'bX && ^(main_253_254) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_253_254_reg"); $finish; end
end
end
always @(*) begin
/* main: %253*/
/*   %255 = load i16* %scevgep11.i, align 2, !tbaa !0*/
begin
main_253_255 = memory_controller_out_b[15:0];
end
end
always @(*) begin
/* main: %253*/
/*   %256 = xor i16 %255, -1*/
begin
main_253_256 = (main_253_255 ^ -16'd1);
end
end
always @(posedge clk) begin
/* main: %253*/
/*   %256 = xor i16 %255, -1*/
if ((cur_state == LEGUP_F_main_BB_253_198))
begin
main_253_256_reg <= main_253_256;
if (^reset !== 1'bX && ^(main_253_256) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_253_256_reg"); $finish; end
end
end
always @(*) begin
/* main: %253*/
/*   %257 = load i16* %scevgep12.i, align 2, !tbaa !0*/
begin
main_253_257 = memory_controller_out_b[15:0];
end
end
always @(*) begin
/* main: %253*/
/*   %258 = and i16 %257, %256*/
begin
main_253_258 = (main_253_257 & main_253_256_reg);
end
end
always @(*) begin
/* main: %253*/
/*   %259 = xor i16 %258, %254*/
begin
main_253_259 = main_bitwise_XOR_16_p0i1;
end
end
always @(posedge clk) begin
/* main: %253*/
/*   %259 = xor i16 %258, %254*/
if ((cur_state == LEGUP_F_main_BB_253_199))
begin
main_253_259_reg <= main_253_259;
if (^reset !== 1'bX && ^(main_253_259) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_253_259_reg"); $finish; end
end
/* main: %69*/
/*   %75 = xor i16 %71, %70*/
if ((cur_state == LEGUP_F_main_BB_69_10))
begin
main_253_259_reg <= main_69_75;
if (^reset !== 1'bX && ^(main_69_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_253_259_reg"); $finish; end
end
end
always @(*) begin
/* main: %253*/
/*   %260 = add i32 %y.21.i, 1*/
begin
main_253_260 = (main_253_y_21_i + 32'd1);
end
end
always @(posedge clk) begin
/* main: %253*/
/*   %260 = add i32 %y.21.i, 1*/
if ((cur_state == LEGUP_F_main_BB_253_196))
begin
main_253_260_reg <= main_253_260;
if (^reset !== 1'bX && ^(main_253_260) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_253_260_reg"); $finish; end
end
end
always @(*) begin
/* main: %253*/
/*   %exitcond.i = icmp eq i32 %260, 5*/
begin
main_253_exitcond_i = (main_253_260 == 32'd5);
end
end
always @(posedge clk) begin
/* main: %253*/
/*   %exitcond.i = icmp eq i32 %260, 5*/
if ((cur_state == LEGUP_F_main_BB_253_196))
begin
main_253_exitcond_i_reg <= main_253_exitcond_i;
if (^reset !== 1'bX && ^(main_253_exitcond_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_253_exitcond_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %roundFunction.exit*/
/*   %263 = load i16* %tmp, align 2, !tbaa !0*/
begin
main_roundFunction_exit_263 = memory_controller_out_a[15:0];
end
end
always @(*) begin
/* main: %roundFunction.exit*/
/*   %264 = zext i16 %263 to i32*/
begin
main_roundFunction_exit_264 = {main_roundFunction_exit_263};
end
end
always @(posedge clk) begin
/* main: %roundFunction.exit*/
/*   %264 = zext i16 %263 to i32*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_205))
begin
main_roundFunction_exit_264_reg <= main_roundFunction_exit_264;
if (^reset !== 1'bX && ^(main_roundFunction_exit_264) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundFunction_exit_264_reg"); $finish; end
end
end
always @(*) begin
/* main: %roundFunction.exit*/
/*   %265 = load i16* %7, align 2, !tbaa !0*/
begin
main_roundFunction_exit_265 = memory_controller_out_b[15:0];
end
end
always @(*) begin
/* main: %roundFunction.exit*/
/*   %266 = zext i16 %265 to i32*/
begin
main_roundFunction_exit_266 = {main_roundFunction_exit_265};
end
end
always @(posedge clk) begin
/* main: %roundFunction.exit*/
/*   %266 = zext i16 %265 to i32*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_205))
begin
main_roundFunction_exit_266_reg <= main_roundFunction_exit_266;
if (^reset !== 1'bX && ^(main_roundFunction_exit_266) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundFunction_exit_266_reg"); $finish; end
end
end
always @(*) begin
/* main: %roundFunction.exit*/
/*   %267 = load i16* %8, align 2, !tbaa !0*/
begin
main_roundFunction_exit_267 = memory_controller_out_a[15:0];
end
end
always @(*) begin
/* main: %roundFunction.exit*/
/*   %268 = zext i16 %267 to i32*/
begin
main_roundFunction_exit_268 = {main_roundFunction_exit_267};
end
end
always @(posedge clk) begin
/* main: %roundFunction.exit*/
/*   %268 = zext i16 %267 to i32*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_206))
begin
main_roundFunction_exit_268_reg <= main_roundFunction_exit_268;
if (^reset !== 1'bX && ^(main_roundFunction_exit_268) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundFunction_exit_268_reg"); $finish; end
end
end
always @(*) begin
/* main: %roundFunction.exit*/
/*   %269 = load i16* %9, align 2, !tbaa !0*/
begin
main_roundFunction_exit_269 = memory_controller_out_b[15:0];
end
end
always @(*) begin
/* main: %roundFunction.exit*/
/*   %270 = zext i16 %269 to i32*/
begin
main_roundFunction_exit_270 = {main_roundFunction_exit_269};
end
end
always @(posedge clk) begin
/* main: %roundFunction.exit*/
/*   %270 = zext i16 %269 to i32*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_206))
begin
main_roundFunction_exit_270_reg <= main_roundFunction_exit_270;
if (^reset !== 1'bX && ^(main_roundFunction_exit_270) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundFunction_exit_270_reg"); $finish; end
end
end
always @(*) begin
/* main: %roundFunction.exit*/
/*   %271 = load i16* %10, align 2, !tbaa !0*/
begin
main_roundFunction_exit_271 = memory_controller_out_b[15:0];
end
end
always @(*) begin
/* main: %roundFunction.exit*/
/*   %272 = zext i16 %271 to i32*/
begin
main_roundFunction_exit_272 = {main_roundFunction_exit_271};
end
end
always @(*) begin
/* main: %roundFunction.exit*/
/*   %274 = load i16* %11, align 2, !tbaa !0*/
begin
main_roundFunction_exit_274 = memory_controller_out_a[15:0];
end
end
always @(*) begin
/* main: %roundFunction.exit*/
/*   %275 = zext i16 %274 to i32*/
begin
main_roundFunction_exit_275 = {main_roundFunction_exit_274};
end
end
always @(posedge clk) begin
/* main: %roundFunction.exit*/
/*   %275 = zext i16 %274 to i32*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_210))
begin
main_roundFunction_exit_275_reg <= main_roundFunction_exit_275;
if (^reset !== 1'bX && ^(main_roundFunction_exit_275) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundFunction_exit_275_reg"); $finish; end
end
end
always @(*) begin
/* main: %roundFunction.exit*/
/*   %276 = load i16* %12, align 2, !tbaa !0*/
begin
main_roundFunction_exit_276 = memory_controller_out_b[15:0];
end
end
always @(*) begin
/* main: %roundFunction.exit*/
/*   %277 = zext i16 %276 to i32*/
begin
main_roundFunction_exit_277 = {main_roundFunction_exit_276};
end
end
always @(posedge clk) begin
/* main: %roundFunction.exit*/
/*   %277 = zext i16 %276 to i32*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_210))
begin
main_roundFunction_exit_277_reg <= main_roundFunction_exit_277;
if (^reset !== 1'bX && ^(main_roundFunction_exit_277) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundFunction_exit_277_reg"); $finish; end
end
end
always @(*) begin
/* main: %roundFunction.exit*/
/*   %278 = load i16* %13, align 2, !tbaa !0*/
begin
main_roundFunction_exit_278 = memory_controller_out_a[15:0];
end
end
always @(*) begin
/* main: %roundFunction.exit*/
/*   %279 = zext i16 %278 to i32*/
begin
main_roundFunction_exit_279 = {main_roundFunction_exit_278};
end
end
always @(posedge clk) begin
/* main: %roundFunction.exit*/
/*   %279 = zext i16 %278 to i32*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_211))
begin
main_roundFunction_exit_279_reg <= main_roundFunction_exit_279;
if (^reset !== 1'bX && ^(main_roundFunction_exit_279) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundFunction_exit_279_reg"); $finish; end
end
end
always @(*) begin
/* main: %roundFunction.exit*/
/*   %280 = load i16* %14, align 2, !tbaa !0*/
begin
main_roundFunction_exit_280 = memory_controller_out_b[15:0];
end
end
always @(*) begin
/* main: %roundFunction.exit*/
/*   %281 = zext i16 %280 to i32*/
begin
main_roundFunction_exit_281 = {main_roundFunction_exit_280};
end
end
always @(posedge clk) begin
/* main: %roundFunction.exit*/
/*   %281 = zext i16 %280 to i32*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_211))
begin
main_roundFunction_exit_281_reg <= main_roundFunction_exit_281;
if (^reset !== 1'bX && ^(main_roundFunction_exit_281) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundFunction_exit_281_reg"); $finish; end
end
end
always @(*) begin
/* main: %roundFunction.exit*/
/*   %282 = load i16* %15, align 2, !tbaa !0*/
begin
main_roundFunction_exit_282 = memory_controller_out_a[15:0];
end
end
always @(*) begin
/* main: %roundFunction.exit*/
/*   %283 = zext i16 %282 to i32*/
begin
main_roundFunction_exit_283 = {main_roundFunction_exit_282};
end
end
always @(*) begin
/* main: %roundFunction.exit*/
/*   %285 = load i16* %16, align 2, !tbaa !0*/
begin
main_roundFunction_exit_285 = memory_controller_out_a[15:0];
end
end
always @(*) begin
/* main: %roundFunction.exit*/
/*   %286 = zext i16 %285 to i32*/
begin
main_roundFunction_exit_286 = {main_roundFunction_exit_285};
end
end
always @(posedge clk) begin
/* main: %roundFunction.exit*/
/*   %286 = zext i16 %285 to i32*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_215))
begin
main_roundFunction_exit_286_reg <= main_roundFunction_exit_286;
if (^reset !== 1'bX && ^(main_roundFunction_exit_286) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundFunction_exit_286_reg"); $finish; end
end
end
always @(*) begin
/* main: %roundFunction.exit*/
/*   %287 = load i16* %17, align 2, !tbaa !0*/
begin
main_roundFunction_exit_287 = memory_controller_out_b[15:0];
end
end
always @(*) begin
/* main: %roundFunction.exit*/
/*   %288 = zext i16 %287 to i32*/
begin
main_roundFunction_exit_288 = {main_roundFunction_exit_287};
end
end
always @(posedge clk) begin
/* main: %roundFunction.exit*/
/*   %288 = zext i16 %287 to i32*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_215))
begin
main_roundFunction_exit_288_reg <= main_roundFunction_exit_288;
if (^reset !== 1'bX && ^(main_roundFunction_exit_288) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundFunction_exit_288_reg"); $finish; end
end
end
always @(*) begin
/* main: %roundFunction.exit*/
/*   %289 = load i16* %18, align 2, !tbaa !0*/
begin
main_roundFunction_exit_289 = memory_controller_out_a[15:0];
end
end
always @(*) begin
/* main: %roundFunction.exit*/
/*   %290 = zext i16 %289 to i32*/
begin
main_roundFunction_exit_290 = {main_roundFunction_exit_289};
end
end
always @(posedge clk) begin
/* main: %roundFunction.exit*/
/*   %290 = zext i16 %289 to i32*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_216))
begin
main_roundFunction_exit_290_reg <= main_roundFunction_exit_290;
if (^reset !== 1'bX && ^(main_roundFunction_exit_290) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundFunction_exit_290_reg"); $finish; end
end
end
always @(*) begin
/* main: %roundFunction.exit*/
/*   %291 = load i16* %19, align 2, !tbaa !0*/
begin
main_roundFunction_exit_291 = memory_controller_out_b[15:0];
end
end
always @(*) begin
/* main: %roundFunction.exit*/
/*   %292 = zext i16 %291 to i32*/
begin
main_roundFunction_exit_292 = {main_roundFunction_exit_291};
end
end
always @(posedge clk) begin
/* main: %roundFunction.exit*/
/*   %292 = zext i16 %291 to i32*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_216))
begin
main_roundFunction_exit_292_reg <= main_roundFunction_exit_292;
if (^reset !== 1'bX && ^(main_roundFunction_exit_292) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundFunction_exit_292_reg"); $finish; end
end
end
always @(*) begin
/* main: %roundFunction.exit*/
/*   %293 = load i16* %20, align 2, !tbaa !0*/
begin
main_roundFunction_exit_293 = memory_controller_out_b[15:0];
end
end
always @(*) begin
/* main: %roundFunction.exit*/
/*   %294 = zext i16 %293 to i32*/
begin
main_roundFunction_exit_294 = {main_roundFunction_exit_293};
end
end
always @(*) begin
/* main: %roundFunction.exit*/
/*   %296 = load i16* %21, align 2, !tbaa !0*/
begin
main_roundFunction_exit_296 = memory_controller_out_a[15:0];
end
end
always @(*) begin
/* main: %roundFunction.exit*/
/*   %297 = zext i16 %296 to i32*/
begin
main_roundFunction_exit_297 = {main_roundFunction_exit_296};
end
end
always @(posedge clk) begin
/* main: %roundFunction.exit*/
/*   %297 = zext i16 %296 to i32*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_220))
begin
main_roundFunction_exit_297_reg <= main_roundFunction_exit_297;
if (^reset !== 1'bX && ^(main_roundFunction_exit_297) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundFunction_exit_297_reg"); $finish; end
end
end
always @(*) begin
/* main: %roundFunction.exit*/
/*   %298 = load i16* %22, align 2, !tbaa !0*/
begin
main_roundFunction_exit_298 = memory_controller_out_b[15:0];
end
end
always @(*) begin
/* main: %roundFunction.exit*/
/*   %299 = zext i16 %298 to i32*/
begin
main_roundFunction_exit_299 = {main_roundFunction_exit_298};
end
end
always @(posedge clk) begin
/* main: %roundFunction.exit*/
/*   %299 = zext i16 %298 to i32*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_220))
begin
main_roundFunction_exit_299_reg <= main_roundFunction_exit_299;
if (^reset !== 1'bX && ^(main_roundFunction_exit_299) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundFunction_exit_299_reg"); $finish; end
end
end
always @(*) begin
/* main: %roundFunction.exit*/
/*   %300 = load i16* %23, align 2, !tbaa !0*/
begin
main_roundFunction_exit_300 = memory_controller_out_a[15:0];
end
end
always @(*) begin
/* main: %roundFunction.exit*/
/*   %301 = zext i16 %300 to i32*/
begin
main_roundFunction_exit_301 = {main_roundFunction_exit_300};
end
end
always @(posedge clk) begin
/* main: %roundFunction.exit*/
/*   %301 = zext i16 %300 to i32*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_221))
begin
main_roundFunction_exit_301_reg <= main_roundFunction_exit_301;
if (^reset !== 1'bX && ^(main_roundFunction_exit_301) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundFunction_exit_301_reg"); $finish; end
end
end
always @(*) begin
/* main: %roundFunction.exit*/
/*   %302 = load i16* %24, align 2, !tbaa !0*/
begin
main_roundFunction_exit_302 = memory_controller_out_b[15:0];
end
end
always @(*) begin
/* main: %roundFunction.exit*/
/*   %303 = zext i16 %302 to i32*/
begin
main_roundFunction_exit_303 = {main_roundFunction_exit_302};
end
end
always @(posedge clk) begin
/* main: %roundFunction.exit*/
/*   %303 = zext i16 %302 to i32*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_221))
begin
main_roundFunction_exit_303_reg <= main_roundFunction_exit_303;
if (^reset !== 1'bX && ^(main_roundFunction_exit_303) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundFunction_exit_303_reg"); $finish; end
end
end
always @(*) begin
/* main: %roundFunction.exit*/
/*   %304 = load i16* %25, align 2, !tbaa !0*/
begin
main_roundFunction_exit_304 = memory_controller_out_a[15:0];
end
end
always @(*) begin
/* main: %roundFunction.exit*/
/*   %305 = zext i16 %304 to i32*/
begin
main_roundFunction_exit_305 = {main_roundFunction_exit_304};
end
end
always @(*) begin
/* main: %roundFunction.exit*/
/*   %307 = load i16* %26, align 2, !tbaa !0*/
begin
main_roundFunction_exit_307 = memory_controller_out_a[15:0];
end
end
always @(*) begin
/* main: %roundFunction.exit*/
/*   %308 = zext i16 %307 to i32*/
begin
main_roundFunction_exit_308 = {main_roundFunction_exit_307};
end
end
always @(posedge clk) begin
/* main: %roundFunction.exit*/
/*   %308 = zext i16 %307 to i32*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_225))
begin
main_roundFunction_exit_308_reg <= main_roundFunction_exit_308;
if (^reset !== 1'bX && ^(main_roundFunction_exit_308) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundFunction_exit_308_reg"); $finish; end
end
end
always @(*) begin
/* main: %roundFunction.exit*/
/*   %309 = load i16* %27, align 2, !tbaa !0*/
begin
main_roundFunction_exit_309 = memory_controller_out_b[15:0];
end
end
always @(*) begin
/* main: %roundFunction.exit*/
/*   %310 = zext i16 %309 to i32*/
begin
main_roundFunction_exit_310 = {main_roundFunction_exit_309};
end
end
always @(posedge clk) begin
/* main: %roundFunction.exit*/
/*   %310 = zext i16 %309 to i32*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_225))
begin
main_roundFunction_exit_310_reg <= main_roundFunction_exit_310;
if (^reset !== 1'bX && ^(main_roundFunction_exit_310) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundFunction_exit_310_reg"); $finish; end
end
end
always @(*) begin
/* main: %roundFunction.exit*/
/*   %311 = load i16* %28, align 2, !tbaa !0*/
begin
main_roundFunction_exit_311 = memory_controller_out_a[15:0];
end
end
always @(*) begin
/* main: %roundFunction.exit*/
/*   %312 = zext i16 %311 to i32*/
begin
main_roundFunction_exit_312 = {main_roundFunction_exit_311};
end
end
always @(posedge clk) begin
/* main: %roundFunction.exit*/
/*   %312 = zext i16 %311 to i32*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_226))
begin
main_roundFunction_exit_312_reg <= main_roundFunction_exit_312;
if (^reset !== 1'bX && ^(main_roundFunction_exit_312) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundFunction_exit_312_reg"); $finish; end
end
end
always @(*) begin
/* main: %roundFunction.exit*/
/*   %313 = load i16* %29, align 2, !tbaa !0*/
begin
main_roundFunction_exit_313 = memory_controller_out_b[15:0];
end
end
always @(*) begin
/* main: %roundFunction.exit*/
/*   %314 = zext i16 %313 to i32*/
begin
main_roundFunction_exit_314 = {main_roundFunction_exit_313};
end
end
always @(posedge clk) begin
/* main: %roundFunction.exit*/
/*   %314 = zext i16 %313 to i32*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_226))
begin
main_roundFunction_exit_314_reg <= main_roundFunction_exit_314;
if (^reset !== 1'bX && ^(main_roundFunction_exit_314) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundFunction_exit_314_reg"); $finish; end
end
end
always @(*) begin
/* main: %roundFunction.exit*/
/*   %315 = load i16* %30, align 2, !tbaa !0*/
begin
main_roundFunction_exit_315 = memory_controller_out_b[15:0];
end
end
always @(*) begin
/* main: %roundFunction.exit*/
/*   %316 = zext i16 %315 to i32*/
begin
main_roundFunction_exit_316 = {main_roundFunction_exit_315};
end
end
always @(*) begin
/* main: %roundFunction.exit*/
/*   %318 = load i16* %tmp, align 2, !tbaa !0*/
begin
main_roundFunction_exit_318 = memory_controller_out_a[15:0];
end
end
always @(*) begin
/* main: %roundFunction.exit*/
/*   %319 = load i16* %scevgep, align 2, !tbaa !0*/
begin
main_roundFunction_exit_319 = memory_controller_out_b[15:0];
end
end
always @(*) begin
/* main: %roundFunction.exit*/
/*   %320 = xor i16 %319, %318*/
begin
main_roundFunction_exit_320 = main_bitwise_XOR_16_p1i1;
end
end
always @(posedge clk) begin
/* main: %roundFunction.exit*/
/*   %320 = xor i16 %319, %318*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_230))
begin
main_roundFunction_exit_320_reg <= main_roundFunction_exit_320;
if (^reset !== 1'bX && ^(main_roundFunction_exit_320) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundFunction_exit_320_reg"); $finish; end
end
/* main: %69*/
/*   %77 = xor i16 %76, %73*/
if ((cur_state == LEGUP_F_main_BB_69_11))
begin
main_roundFunction_exit_320_reg <= main_69_77;
if (^reset !== 1'bX && ^(main_69_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundFunction_exit_320_reg"); $finish; end
end
end
always @(*) begin
/* main: %roundFunction.exit*/
/*   %322 = load i16* %tmp, align 2, !tbaa !0*/
begin
main_roundFunction_exit_322 = memory_controller_out_a[15:0];
end
end
always @(*) begin
/* main: %roundFunction.exit*/
/*   %323 = zext i16 %322 to i32*/
begin
main_roundFunction_exit_323 = {main_roundFunction_exit_322};
end
end
always @(posedge clk) begin
/* main: %roundFunction.exit*/
/*   %323 = zext i16 %322 to i32*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_234))
begin
main_roundFunction_exit_323_reg <= main_roundFunction_exit_323;
if (^reset !== 1'bX && ^(main_roundFunction_exit_323) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundFunction_exit_323_reg"); $finish; end
end
end
always @(*) begin
/* main: %roundFunction.exit*/
/*   %324 = load i16* %7, align 2, !tbaa !0*/
begin
main_roundFunction_exit_324 = memory_controller_out_b[15:0];
end
end
always @(*) begin
/* main: %roundFunction.exit*/
/*   %325 = zext i16 %324 to i32*/
begin
main_roundFunction_exit_325 = {main_roundFunction_exit_324};
end
end
always @(posedge clk) begin
/* main: %roundFunction.exit*/
/*   %325 = zext i16 %324 to i32*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_234))
begin
main_roundFunction_exit_325_reg <= main_roundFunction_exit_325;
if (^reset !== 1'bX && ^(main_roundFunction_exit_325) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundFunction_exit_325_reg"); $finish; end
end
end
always @(*) begin
/* main: %roundFunction.exit*/
/*   %326 = load i16* %8, align 2, !tbaa !0*/
begin
main_roundFunction_exit_326 = memory_controller_out_a[15:0];
end
end
always @(*) begin
/* main: %roundFunction.exit*/
/*   %327 = zext i16 %326 to i32*/
begin
main_roundFunction_exit_327 = {main_roundFunction_exit_326};
end
end
always @(posedge clk) begin
/* main: %roundFunction.exit*/
/*   %327 = zext i16 %326 to i32*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_235))
begin
main_roundFunction_exit_327_reg <= main_roundFunction_exit_327;
if (^reset !== 1'bX && ^(main_roundFunction_exit_327) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundFunction_exit_327_reg"); $finish; end
end
end
always @(*) begin
/* main: %roundFunction.exit*/
/*   %328 = load i16* %9, align 2, !tbaa !0*/
begin
main_roundFunction_exit_328 = memory_controller_out_b[15:0];
end
end
always @(*) begin
/* main: %roundFunction.exit*/
/*   %329 = zext i16 %328 to i32*/
begin
main_roundFunction_exit_329 = {main_roundFunction_exit_328};
end
end
always @(posedge clk) begin
/* main: %roundFunction.exit*/
/*   %329 = zext i16 %328 to i32*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_235))
begin
main_roundFunction_exit_329_reg <= main_roundFunction_exit_329;
if (^reset !== 1'bX && ^(main_roundFunction_exit_329) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundFunction_exit_329_reg"); $finish; end
end
end
always @(*) begin
/* main: %roundFunction.exit*/
/*   %330 = load i16* %10, align 2, !tbaa !0*/
begin
main_roundFunction_exit_330 = memory_controller_out_b[15:0];
end
end
always @(*) begin
/* main: %roundFunction.exit*/
/*   %331 = zext i16 %330 to i32*/
begin
main_roundFunction_exit_331 = {main_roundFunction_exit_330};
end
end
always @(*) begin
/* main: %roundFunction.exit*/
/*   %333 = load i16* %11, align 2, !tbaa !0*/
begin
main_roundFunction_exit_333 = memory_controller_out_a[15:0];
end
end
always @(*) begin
/* main: %roundFunction.exit*/
/*   %334 = zext i16 %333 to i32*/
begin
main_roundFunction_exit_334 = {main_roundFunction_exit_333};
end
end
always @(posedge clk) begin
/* main: %roundFunction.exit*/
/*   %334 = zext i16 %333 to i32*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_239))
begin
main_roundFunction_exit_334_reg <= main_roundFunction_exit_334;
if (^reset !== 1'bX && ^(main_roundFunction_exit_334) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundFunction_exit_334_reg"); $finish; end
end
end
always @(*) begin
/* main: %roundFunction.exit*/
/*   %335 = load i16* %12, align 2, !tbaa !0*/
begin
main_roundFunction_exit_335 = memory_controller_out_b[15:0];
end
end
always @(*) begin
/* main: %roundFunction.exit*/
/*   %336 = zext i16 %335 to i32*/
begin
main_roundFunction_exit_336 = {main_roundFunction_exit_335};
end
end
always @(posedge clk) begin
/* main: %roundFunction.exit*/
/*   %336 = zext i16 %335 to i32*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_239))
begin
main_roundFunction_exit_336_reg <= main_roundFunction_exit_336;
if (^reset !== 1'bX && ^(main_roundFunction_exit_336) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundFunction_exit_336_reg"); $finish; end
end
end
always @(*) begin
/* main: %roundFunction.exit*/
/*   %337 = load i16* %13, align 2, !tbaa !0*/
begin
main_roundFunction_exit_337 = memory_controller_out_a[15:0];
end
end
always @(*) begin
/* main: %roundFunction.exit*/
/*   %338 = zext i16 %337 to i32*/
begin
main_roundFunction_exit_338 = {main_roundFunction_exit_337};
end
end
always @(posedge clk) begin
/* main: %roundFunction.exit*/
/*   %338 = zext i16 %337 to i32*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_240))
begin
main_roundFunction_exit_338_reg <= main_roundFunction_exit_338;
if (^reset !== 1'bX && ^(main_roundFunction_exit_338) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundFunction_exit_338_reg"); $finish; end
end
end
always @(*) begin
/* main: %roundFunction.exit*/
/*   %339 = load i16* %14, align 2, !tbaa !0*/
begin
main_roundFunction_exit_339 = memory_controller_out_b[15:0];
end
end
always @(*) begin
/* main: %roundFunction.exit*/
/*   %340 = zext i16 %339 to i32*/
begin
main_roundFunction_exit_340 = {main_roundFunction_exit_339};
end
end
always @(posedge clk) begin
/* main: %roundFunction.exit*/
/*   %340 = zext i16 %339 to i32*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_240))
begin
main_roundFunction_exit_340_reg <= main_roundFunction_exit_340;
if (^reset !== 1'bX && ^(main_roundFunction_exit_340) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundFunction_exit_340_reg"); $finish; end
end
end
always @(*) begin
/* main: %roundFunction.exit*/
/*   %341 = load i16* %15, align 2, !tbaa !0*/
begin
main_roundFunction_exit_341 = memory_controller_out_a[15:0];
end
end
always @(*) begin
/* main: %roundFunction.exit*/
/*   %342 = zext i16 %341 to i32*/
begin
main_roundFunction_exit_342 = {main_roundFunction_exit_341};
end
end
always @(*) begin
/* main: %roundFunction.exit*/
/*   %344 = load i16* %16, align 2, !tbaa !0*/
begin
main_roundFunction_exit_344 = memory_controller_out_a[15:0];
end
end
always @(*) begin
/* main: %roundFunction.exit*/
/*   %345 = zext i16 %344 to i32*/
begin
main_roundFunction_exit_345 = {main_roundFunction_exit_344};
end
end
always @(posedge clk) begin
/* main: %roundFunction.exit*/
/*   %345 = zext i16 %344 to i32*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_244))
begin
main_roundFunction_exit_345_reg <= main_roundFunction_exit_345;
if (^reset !== 1'bX && ^(main_roundFunction_exit_345) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundFunction_exit_345_reg"); $finish; end
end
end
always @(*) begin
/* main: %roundFunction.exit*/
/*   %346 = load i16* %17, align 2, !tbaa !0*/
begin
main_roundFunction_exit_346 = memory_controller_out_b[15:0];
end
end
always @(*) begin
/* main: %roundFunction.exit*/
/*   %347 = zext i16 %346 to i32*/
begin
main_roundFunction_exit_347 = {main_roundFunction_exit_346};
end
end
always @(posedge clk) begin
/* main: %roundFunction.exit*/
/*   %347 = zext i16 %346 to i32*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_244))
begin
main_roundFunction_exit_347_reg <= main_roundFunction_exit_347;
if (^reset !== 1'bX && ^(main_roundFunction_exit_347) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundFunction_exit_347_reg"); $finish; end
end
end
always @(*) begin
/* main: %roundFunction.exit*/
/*   %348 = load i16* %18, align 2, !tbaa !0*/
begin
main_roundFunction_exit_348 = memory_controller_out_a[15:0];
end
end
always @(*) begin
/* main: %roundFunction.exit*/
/*   %349 = zext i16 %348 to i32*/
begin
main_roundFunction_exit_349 = {main_roundFunction_exit_348};
end
end
always @(posedge clk) begin
/* main: %roundFunction.exit*/
/*   %349 = zext i16 %348 to i32*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_245))
begin
main_roundFunction_exit_349_reg <= main_roundFunction_exit_349;
if (^reset !== 1'bX && ^(main_roundFunction_exit_349) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundFunction_exit_349_reg"); $finish; end
end
end
always @(*) begin
/* main: %roundFunction.exit*/
/*   %350 = load i16* %19, align 2, !tbaa !0*/
begin
main_roundFunction_exit_350 = memory_controller_out_b[15:0];
end
end
always @(*) begin
/* main: %roundFunction.exit*/
/*   %351 = zext i16 %350 to i32*/
begin
main_roundFunction_exit_351 = {main_roundFunction_exit_350};
end
end
always @(posedge clk) begin
/* main: %roundFunction.exit*/
/*   %351 = zext i16 %350 to i32*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_245))
begin
main_roundFunction_exit_351_reg <= main_roundFunction_exit_351;
if (^reset !== 1'bX && ^(main_roundFunction_exit_351) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundFunction_exit_351_reg"); $finish; end
end
end
always @(*) begin
/* main: %roundFunction.exit*/
/*   %352 = load i16* %20, align 2, !tbaa !0*/
begin
main_roundFunction_exit_352 = memory_controller_out_b[15:0];
end
end
always @(*) begin
/* main: %roundFunction.exit*/
/*   %353 = zext i16 %352 to i32*/
begin
main_roundFunction_exit_353 = {main_roundFunction_exit_352};
end
end
always @(*) begin
/* main: %roundFunction.exit*/
/*   %355 = load i16* %21, align 2, !tbaa !0*/
begin
main_roundFunction_exit_355 = memory_controller_out_a[15:0];
end
end
always @(*) begin
/* main: %roundFunction.exit*/
/*   %356 = zext i16 %355 to i32*/
begin
main_roundFunction_exit_356 = {main_roundFunction_exit_355};
end
end
always @(posedge clk) begin
/* main: %roundFunction.exit*/
/*   %356 = zext i16 %355 to i32*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_249))
begin
main_roundFunction_exit_356_reg <= main_roundFunction_exit_356;
if (^reset !== 1'bX && ^(main_roundFunction_exit_356) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundFunction_exit_356_reg"); $finish; end
end
end
always @(*) begin
/* main: %roundFunction.exit*/
/*   %357 = load i16* %22, align 2, !tbaa !0*/
begin
main_roundFunction_exit_357 = memory_controller_out_b[15:0];
end
end
always @(*) begin
/* main: %roundFunction.exit*/
/*   %358 = zext i16 %357 to i32*/
begin
main_roundFunction_exit_358 = {main_roundFunction_exit_357};
end
end
always @(posedge clk) begin
/* main: %roundFunction.exit*/
/*   %358 = zext i16 %357 to i32*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_249))
begin
main_roundFunction_exit_358_reg <= main_roundFunction_exit_358;
if (^reset !== 1'bX && ^(main_roundFunction_exit_358) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundFunction_exit_358_reg"); $finish; end
end
end
always @(*) begin
/* main: %roundFunction.exit*/
/*   %359 = load i16* %23, align 2, !tbaa !0*/
begin
main_roundFunction_exit_359 = memory_controller_out_a[15:0];
end
end
always @(*) begin
/* main: %roundFunction.exit*/
/*   %360 = zext i16 %359 to i32*/
begin
main_roundFunction_exit_360 = {main_roundFunction_exit_359};
end
end
always @(posedge clk) begin
/* main: %roundFunction.exit*/
/*   %360 = zext i16 %359 to i32*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_250))
begin
main_roundFunction_exit_360_reg <= main_roundFunction_exit_360;
if (^reset !== 1'bX && ^(main_roundFunction_exit_360) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundFunction_exit_360_reg"); $finish; end
end
end
always @(*) begin
/* main: %roundFunction.exit*/
/*   %361 = load i16* %24, align 2, !tbaa !0*/
begin
main_roundFunction_exit_361 = memory_controller_out_b[15:0];
end
end
always @(*) begin
/* main: %roundFunction.exit*/
/*   %362 = zext i16 %361 to i32*/
begin
main_roundFunction_exit_362 = {main_roundFunction_exit_361};
end
end
always @(posedge clk) begin
/* main: %roundFunction.exit*/
/*   %362 = zext i16 %361 to i32*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_250))
begin
main_roundFunction_exit_362_reg <= main_roundFunction_exit_362;
if (^reset !== 1'bX && ^(main_roundFunction_exit_362) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundFunction_exit_362_reg"); $finish; end
end
end
always @(*) begin
/* main: %roundFunction.exit*/
/*   %363 = load i16* %25, align 2, !tbaa !0*/
begin
main_roundFunction_exit_363 = memory_controller_out_a[15:0];
end
end
always @(*) begin
/* main: %roundFunction.exit*/
/*   %364 = zext i16 %363 to i32*/
begin
main_roundFunction_exit_364 = {main_roundFunction_exit_363};
end
end
always @(*) begin
/* main: %roundFunction.exit*/
/*   %366 = load i16* %26, align 2, !tbaa !0*/
begin
main_roundFunction_exit_366 = memory_controller_out_a[15:0];
end
end
always @(*) begin
/* main: %roundFunction.exit*/
/*   %367 = zext i16 %366 to i32*/
begin
main_roundFunction_exit_367 = {main_roundFunction_exit_366};
end
end
always @(posedge clk) begin
/* main: %roundFunction.exit*/
/*   %367 = zext i16 %366 to i32*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_254))
begin
main_roundFunction_exit_367_reg <= main_roundFunction_exit_367;
if (^reset !== 1'bX && ^(main_roundFunction_exit_367) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundFunction_exit_367_reg"); $finish; end
end
end
always @(*) begin
/* main: %roundFunction.exit*/
/*   %368 = load i16* %27, align 2, !tbaa !0*/
begin
main_roundFunction_exit_368 = memory_controller_out_b[15:0];
end
end
always @(*) begin
/* main: %roundFunction.exit*/
/*   %369 = zext i16 %368 to i32*/
begin
main_roundFunction_exit_369 = {main_roundFunction_exit_368};
end
end
always @(posedge clk) begin
/* main: %roundFunction.exit*/
/*   %369 = zext i16 %368 to i32*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_254))
begin
main_roundFunction_exit_369_reg <= main_roundFunction_exit_369;
if (^reset !== 1'bX && ^(main_roundFunction_exit_369) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundFunction_exit_369_reg"); $finish; end
end
end
always @(*) begin
/* main: %roundFunction.exit*/
/*   %370 = load i16* %28, align 2, !tbaa !0*/
begin
main_roundFunction_exit_370 = memory_controller_out_a[15:0];
end
end
always @(*) begin
/* main: %roundFunction.exit*/
/*   %371 = zext i16 %370 to i32*/
begin
main_roundFunction_exit_371 = {main_roundFunction_exit_370};
end
end
always @(posedge clk) begin
/* main: %roundFunction.exit*/
/*   %371 = zext i16 %370 to i32*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_255))
begin
main_roundFunction_exit_371_reg <= main_roundFunction_exit_371;
if (^reset !== 1'bX && ^(main_roundFunction_exit_371) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundFunction_exit_371_reg"); $finish; end
end
end
always @(*) begin
/* main: %roundFunction.exit*/
/*   %372 = load i16* %29, align 2, !tbaa !0*/
begin
main_roundFunction_exit_372 = memory_controller_out_b[15:0];
end
end
always @(*) begin
/* main: %roundFunction.exit*/
/*   %373 = zext i16 %372 to i32*/
begin
main_roundFunction_exit_373 = {main_roundFunction_exit_372};
end
end
always @(posedge clk) begin
/* main: %roundFunction.exit*/
/*   %373 = zext i16 %372 to i32*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_255))
begin
main_roundFunction_exit_373_reg <= main_roundFunction_exit_373;
if (^reset !== 1'bX && ^(main_roundFunction_exit_373) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundFunction_exit_373_reg"); $finish; end
end
end
always @(*) begin
/* main: %roundFunction.exit*/
/*   %374 = load i16* %30, align 2, !tbaa !0*/
begin
main_roundFunction_exit_374 = memory_controller_out_b[15:0];
end
end
always @(*) begin
/* main: %roundFunction.exit*/
/*   %375 = zext i16 %374 to i32*/
begin
main_roundFunction_exit_375 = {main_roundFunction_exit_374};
end
end
always @(*) begin
/* main: %roundFunction.exit*/
/*   %377 = add nsw i32 %67, 1*/
begin
main_roundFunction_exit_377 = (main_66_67_reg + 32'd1);
end
end
always @(posedge clk) begin
/* main: %roundFunction.exit*/
/*   %377 = add nsw i32 %67, 1*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_202))
begin
main_roundFunction_exit_377_reg <= main_roundFunction_exit_377;
if (^reset !== 1'bX && ^(main_roundFunction_exit_377) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundFunction_exit_377_reg"); $finish; end
end
end
always @(*) begin
/* main: %roundFunction.exit*/
/*   %exitcond = icmp eq i32 %377, 20*/
begin
main_roundFunction_exit_exitcond = (main_roundFunction_exit_377 == 32'd20);
end
end
always @(posedge clk) begin
/* main: %roundFunction.exit*/
/*   %exitcond = icmp eq i32 %377, 20*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_202))
begin
main_roundFunction_exit_exitcond_reg <= main_roundFunction_exit_exitcond;
if (^reset !== 1'bX && ^(main_roundFunction_exit_exitcond) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_roundFunction_exit_exitcond_reg"); $finish; end
end
end
always @(*) begin
/* main: %92*/
/*   %99 = urem i32 %tmp43.i, 5*/
if ((cur_state == LEGUP_F_main_BB_92_20))
begin
main_unsigned_modulus_32_0_op0 = main_92_tmp43_i_reg;
end
/* main: %179*/
/*   %190 = urem i32 %tmp27.i, 5*/
else if ((cur_state == LEGUP_F_main_BB_179_99))
begin
main_unsigned_modulus_32_0_op0 = main_179_tmp27_i_reg;
end
/* main: %.preheader.i*/
/*   %252 = urem i32 %tmp18.i, 5*/
else /* if ((cur_state == LEGUP_F_main_BB__preheader_i_163)) */
begin
main_unsigned_modulus_32_0_op0 = main__preheader_i_tmp18_i_reg;
end
end
always @(*) begin
/* main: %92*/
/*   %99 = urem i32 %tmp43.i, 5*/
if ((cur_state == LEGUP_F_main_BB_92_20))
begin
main_unsigned_modulus_32_0_op1 = 32'd5;
end
/* main: %179*/
/*   %190 = urem i32 %tmp27.i, 5*/
else if ((cur_state == LEGUP_F_main_BB_179_99))
begin
main_unsigned_modulus_32_0_op1 = 32'd5;
end
/* main: %.preheader.i*/
/*   %252 = urem i32 %tmp18.i, 5*/
else /* if ((cur_state == LEGUP_F_main_BB__preheader_i_163)) */
begin
main_unsigned_modulus_32_0_op1 = 32'd5;
end
end
always @(*) begin
lpm_divide_main_92_99_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
lpm_divide_main_92_99_out = lpm_divide_main_92_99_temp_out;
end
always @(*) begin
main_unsigned_modulus_32_0 = lpm_divide_main_92_99_out;
end
always @(posedge clk) begin
/* main: %1*/
/*   %s.i.0 = phi i16* [ %tmp, %0 ], [ %6, %4 ]*/
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
main_1_s_i_0_phi_temp <= main_0_tmp;
if (^reset !== 1'bX && ^(main_0_tmp) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_s_i_0_phi_temp"); $finish; end
end
/* main: %1*/
/*   %s.i.0 = phi i16* [ %tmp, %0 ], [ %6, %4 ]*/
if (((cur_state == LEGUP_F_main_BB_4_3) & (memory_controller_waitrequest == 1'd0)))
begin
main_1_s_i_0_phi_temp <= main_4_6;
if (^reset !== 1'bX && ^(main_4_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_s_i_0_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* main: %1*/
/*   %2 = phi i32 [ 25, %0 ], [ %5, %4 ]*/
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
main_1_2_phi_temp <= 32'd25;
if (^reset !== 1'bX && ^(32'd25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_2_phi_temp"); $finish; end
end
/* main: %1*/
/*   %2 = phi i32 [ 25, %0 ], [ %5, %4 ]*/
if (((cur_state == LEGUP_F_main_BB_4_3) & (memory_controller_waitrequest == 1'd0)))
begin
main_1_2_phi_temp <= main_4_5;
if (^reset !== 1'bX && ^(main_4_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_2_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* main: %66*/
/*   %67 = phi i32 [ 0, %legup_memset_2.exit ], [ %377, %roundFunction.exit ]*/
if (((cur_state == LEGUP_F_main_BB_legup_memset_2_exit_6) & (memory_controller_waitrequest == 1'd0)))
begin
main_66_67_phi_temp <= 32'd0;
if (^reset !== 1'bX && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_66_67_phi_temp"); $finish; end
end
/* main: %66*/
/*   %67 = phi i32 [ 0, %legup_memset_2.exit ], [ %377, %roundFunction.exit ]*/
if ((((cur_state == LEGUP_F_main_BB_roundFunction_exit_256) & (memory_controller_waitrequest == 1'd0)) & (main_roundFunction_exit_exitcond_reg == 1'd0)))
begin
main_66_67_phi_temp <= main_roundFunction_exit_377_reg;
if (^reset !== 1'bX && ^(main_roundFunction_exit_377_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_66_67_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* main: %69*/
/*   %x.010.i = phi i32 [ 0, %66 ], [ %79, %69 ]*/
if (((cur_state == LEGUP_F_main_BB_66_7) & (memory_controller_waitrequest == 1'd0)))
begin
main_69_x_010_i_phi_temp <= 32'd0;
if (^reset !== 1'bX && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_69_x_010_i_phi_temp"); $finish; end
end
/* main: %69*/
/*   %x.010.i = phi i32 [ 0, %66 ], [ %79, %69 ]*/
if ((((cur_state == LEGUP_F_main_BB_69_13) & (memory_controller_waitrequest == 1'd0)) & (main_69_exitcond44_i_reg == 1'd0)))
begin
main_69_x_010_i_phi_temp <= main_69_79_reg;
if (^reset !== 1'bX && ^(main_69_79_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_69_x_010_i_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* main: %92*/
/*   %x.19.i = phi i32 [ 0, %80 ], [ %93, %92 ]*/
if (((cur_state == LEGUP_F_main_BB_80_18) & (memory_controller_waitrequest == 1'd0)))
begin
main_92_x_19_i_phi_temp <= 32'd0;
if (^reset !== 1'bX && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_92_x_19_i_phi_temp"); $finish; end
end
/* main: %92*/
/*   %x.19.i = phi i32 [ 0, %80 ], [ %93, %92 ]*/
if ((((cur_state == LEGUP_F_main_BB_92_56) & (memory_controller_waitrequest == 1'd0)) & (main_92_tmp39_i_reg == 1'd0)))
begin
main_92_x_19_i_phi_temp <= main_92_93_reg;
if (^reset !== 1'bX && ^(main_92_93_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_92_x_19_i_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* main: %.preheader6.i*/
/*   %115 = phi i16 [ %104, %103 ], [ %.pre.i, %..preheader6_crit_edge.i ]*/
if (((cur_state == LEGUP_F_main_BB_103_61) & (memory_controller_waitrequest == 1'd0)))
begin
main__preheader6_i_115_phi_temp <= main_103_104_reg;
if (^reset !== 1'bX && ^(main_103_104_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader6_i_115_phi_temp"); $finish; end
end
/* main: %.preheader6.i*/
/*   %115 = phi i16 [ %104, %103 ], [ %.pre.i, %..preheader6_crit_edge.i ]*/
if (((cur_state == LEGUP_F_main_BB___preheader6_crit_edge_i_70) & (memory_controller_waitrequest == 1'd0)))
begin
main__preheader6_i_115_phi_temp <= main___preheader6_crit_edge_i__pre_i;
if (^reset !== 1'bX && ^(main___preheader6_crit_edge_i__pre_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader6_i_115_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* main: %.preheader6.i*/
/*   %x.28.i = phi i32 [ 0, %103 ], [ %121, %..preheader6_crit_edge.i ]*/
if (((cur_state == LEGUP_F_main_BB_103_61) & (memory_controller_waitrequest == 1'd0)))
begin
main__preheader6_i_x_28_i_phi_temp <= 32'd0;
if (^reset !== 1'bX && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader6_i_x_28_i_phi_temp"); $finish; end
end
/* main: %.preheader6.i*/
/*   %x.28.i = phi i32 [ 0, %103 ], [ %121, %..preheader6_crit_edge.i ]*/
if (((cur_state == LEGUP_F_main_BB___preheader6_crit_edge_i_70) & (memory_controller_waitrequest == 1'd0)))
begin
main__preheader6_i_x_28_i_phi_temp <= main_120_121_reg;
if (^reset !== 1'bX && ^(main_120_121_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader6_i_x_28_i_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* main: %116*/
/*   %y.07.i = phi i32 [ 0, %.preheader6.i ], [ %119, %116 ]*/
if (((cur_state == LEGUP_F_main_BB__preheader6_i_62) & (memory_controller_waitrequest == 1'd0)))
begin
main_116_y_07_i_phi_temp <= 32'd0;
if (^reset !== 1'bX && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_116_y_07_i_phi_temp"); $finish; end
end
/* main: %116*/
/*   %y.07.i = phi i32 [ 0, %.preheader6.i ], [ %119, %116 ]*/
if ((((cur_state == LEGUP_F_main_BB_116_66) & (memory_controller_waitrequest == 1'd0)) & (main_116_exitcond34_i_reg == 1'd0)))
begin
main_116_y_07_i_phi_temp <= main_116_119_reg;
if (^reset !== 1'bX && ^(main_116_119_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_116_y_07_i_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* main: %.preheader3.i*/
/*   %x.35.i = phi i32 [ 0, %122 ], [ %193, %192 ]*/
if (((cur_state == LEGUP_F_main_BB_122_96) & (memory_controller_waitrequest == 1'd0)))
begin
main__preheader3_i_x_35_i_phi_temp <= 32'd0;
if (^reset !== 1'bX && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader3_i_x_35_i_phi_temp"); $finish; end
end
/* main: %.preheader3.i*/
/*   %x.35.i = phi i32 [ 0, %122 ], [ %193, %192 ]*/
if ((((cur_state == LEGUP_F_main_BB_192_135) & (memory_controller_waitrequest == 1'd0)) & (main_192_exitcond28_i == 1'd0)))
begin
main__preheader3_i_x_35_i_phi_temp <= main_192_193;
if (^reset !== 1'bX && ^(main_192_193) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader3_i_x_35_i_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* main: %179*/
/*   %y.14.i = phi i32 [ 0, %.preheader3.i ], [ %191, %179 ]*/
if (((cur_state == LEGUP_F_main_BB__preheader3_i_97) & (memory_controller_waitrequest == 1'd0)))
begin
main_179_y_14_i_phi_temp <= 32'd0;
if (^reset !== 1'bX && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_179_y_14_i_phi_temp"); $finish; end
end
/* main: %179*/
/*   %y.14.i = phi i32 [ 0, %.preheader3.i ], [ %191, %179 ]*/
if ((((cur_state == LEGUP_F_main_BB_179_134) & (memory_controller_waitrequest == 1'd0)) & (main_179_exitcond19_i_reg == 1'd0)))
begin
main_179_y_14_i_phi_temp <= main_179_191_reg;
if (^reset !== 1'bX && ^(main_179_191_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_179_y_14_i_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* main: %.preheader.i*/
/*   %x.42.i = phi i32 [ 0, %194 ], [ %251, %261 ]*/
if (((cur_state == LEGUP_F_main_BB_194_161) & (memory_controller_waitrequest == 1'd0)))
begin
main__preheader_i_x_42_i_phi_temp <= 32'd0;
if (^reset !== 1'bX && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader_i_x_42_i_phi_temp"); $finish; end
end
/* main: %.preheader.i*/
/*   %x.42.i = phi i32 [ 0, %194 ], [ %251, %261 ]*/
if ((((cur_state == LEGUP_F_main_BB_261_201) & (memory_controller_waitrequest == 1'd0)) & (main__preheader_i_tmp_i_reg == 1'd0)))
begin
main__preheader_i_x_42_i_phi_temp <= main__preheader_i_251_reg;
if (^reset !== 1'bX && ^(main__preheader_i_251_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader_i_x_42_i_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* main: %253*/
/*   %y.21.i = phi i32 [ 0, %.preheader.i ], [ %260, %253 ]*/
if (((cur_state == LEGUP_F_main_BB__preheader_i_195) & (memory_controller_waitrequest == 1'd0)))
begin
main_253_y_21_i_phi_temp <= 32'd0;
if (^reset !== 1'bX && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_253_y_21_i_phi_temp"); $finish; end
end
/* main: %253*/
/*   %y.21.i = phi i32 [ 0, %.preheader.i ], [ %260, %253 ]*/
if ((((cur_state == LEGUP_F_main_BB_253_200) & (memory_controller_waitrequest == 1'd0)) & (main_253_exitcond_i_reg == 1'd0)))
begin
main_253_y_21_i_phi_temp <= main_253_260_reg;
if (^reset !== 1'bX && ^(main_253_260_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_253_y_21_i_phi_temp"); $finish; end
end
end
always @(*) begin
main_bitwise_XOR_16_p0i1 = (main_bitwise_XOR_16_p0i1_op0 ^ main_bitwise_XOR_16_p0i1_op1);
end
always @(*) begin
/* main: %69*/
/*   %75 = xor i16 %71, %70*/
if ((cur_state == LEGUP_F_main_BB_69_10))
begin
main_bitwise_XOR_16_p0i1_op0 = main_69_71;
end
/* main: %253*/
/*   %259 = xor i16 %258, %254*/
else /* if ((cur_state == LEGUP_F_main_BB_253_199)) */
begin
main_bitwise_XOR_16_p0i1_op0 = main_253_258;
end
end
always @(*) begin
/* main: %69*/
/*   %75 = xor i16 %71, %70*/
if ((cur_state == LEGUP_F_main_BB_69_10))
begin
main_bitwise_XOR_16_p0i1_op1 = main_69_70;
end
/* main: %253*/
/*   %259 = xor i16 %258, %254*/
else /* if ((cur_state == LEGUP_F_main_BB_253_199)) */
begin
main_bitwise_XOR_16_p0i1_op1 = main_253_254_reg;
end
end
always @(*) begin
main_bitwise_XOR_16_p1i1 = (main_bitwise_XOR_16_p1i1_op0 ^ main_bitwise_XOR_16_p1i1_op1);
end
always @(*) begin
/* main: %69*/
/*   %77 = xor i16 %76, %73*/
if ((cur_state == LEGUP_F_main_BB_69_11))
begin
main_bitwise_XOR_16_p1i1_op0 = main_69_76;
end
/* main: %roundFunction.exit*/
/*   %320 = xor i16 %319, %318*/
else /* if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_230)) */
begin
main_bitwise_XOR_16_p1i1_op0 = main_roundFunction_exit_319;
end
end
always @(*) begin
/* main: %69*/
/*   %77 = xor i16 %76, %73*/
if ((cur_state == LEGUP_F_main_BB_69_11))
begin
main_bitwise_XOR_16_p1i1_op1 = main_69_73;
end
/* main: %roundFunction.exit*/
/*   %320 = xor i16 %319, %318*/
else /* if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_230)) */
begin
main_bitwise_XOR_16_p1i1_op1 = main_roundFunction_exit_318;
end
end
always @(*) begin
main_bitwise_XOR_16_p2i1 = (main_bitwise_XOR_16_p2i1_op0 ^ main_bitwise_XOR_16_p2i1_op1);
end
always @(*) begin
/* main: %69*/
/*   %78 = xor i16 %77, %74*/
if ((cur_state == LEGUP_F_main_BB_69_12))
begin
main_bitwise_XOR_16_p2i1_op0 = main_69_77_reg;
end
/* main: %92*/
/*   %102 = xor i16 %98, %101*/
else /* if ((cur_state == LEGUP_F_main_BB_92_55)) */
begin
main_bitwise_XOR_16_p2i1_op0 = main_92_98_reg;
end
end
always @(*) begin
/* main: %69*/
/*   %78 = xor i16 %77, %74*/
if ((cur_state == LEGUP_F_main_BB_69_12))
begin
main_bitwise_XOR_16_p2i1_op1 = main_69_74;
end
/* main: %92*/
/*   %102 = xor i16 %98, %101*/
else /* if ((cur_state == LEGUP_F_main_BB_92_55)) */
begin
main_bitwise_XOR_16_p2i1_op1 = main_92_101;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* main: %378*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_main_BB_378_257))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (^reset !== 1'bX && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
return_val <= 0;
if (^reset !== 1'bX && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
/* main: %378*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_main_BB_378_257))
begin
return_val <= 32'd0;
if (^reset !== 1'bX && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_a = 1'd0;
end
/* main: %4*/
/*   store i16 0, i16* %s.i.0, align 2*/
if ((cur_state == LEGUP_F_main_BB_4_3))
begin
memory_controller_enable_a = 1'd1;
end
/* main: %legup_memset_2.exit*/
/*   store i16 1, i16* %tmp, align 2*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_2_exit_4))
begin
memory_controller_enable_a = 1'd1;
end
/* main: %legup_memset_2.exit*/
/*   store i16 1, i16* %8, align 2*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_2_exit_5))
begin
memory_controller_enable_a = 1'd1;
end
/* main: %69*/
/*   %70 = load i16* %scevgep45.i, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_69_8))
begin
memory_controller_enable_a = 1'd1;
end
/* main: %69*/
/*   %72 = load i16* %scevgep47.i, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_69_9))
begin
memory_controller_enable_a = 1'd1;
end
/* main: %69*/
/*   %74 = load i16* %scevgep49.i, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_69_10))
begin
memory_controller_enable_a = 1'd1;
end
/* main: %80*/
/*   %81 = load i16* %31, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_80_14))
begin
memory_controller_enable_a = 1'd1;
end
/* main: %80*/
/*   %85 = load i16* %33, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_80_15))
begin
memory_controller_enable_a = 1'd1;
end
/* main: %80*/
/*   %89 = load i16* %35, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_80_16))
begin
memory_controller_enable_a = 1'd1;
end
/* main: %92*/
/*   %95 = load i16* %94, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_92_20))
begin
memory_controller_enable_a = 1'd1;
end
/* main: %92*/
/*   store i16 %102, i16* %scevgep42.i, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_92_56))
begin
memory_controller_enable_a = 1'd1;
end
/* main: %103*/
/*   %104 = load i16* %36, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_103_57))
begin
memory_controller_enable_a = 1'd1;
end
/* main: %103*/
/*   %108 = load i16* %38, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_103_58))
begin
memory_controller_enable_a = 1'd1;
end
/* main: %..preheader6_crit_edge.i*/
/*   %.pre.i = load i16* %scevgep38.phi.trans.insert.i, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB___preheader6_crit_edge_i_68))
begin
memory_controller_enable_a = 1'd1;
end
/* main: %122*/
/*   %124 = load i16* %tmp, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_122_72))
begin
memory_controller_enable_a = 1'd1;
end
/* main: %122*/
/*   %128 = load i16* %8, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_122_73))
begin
memory_controller_enable_a = 1'd1;
end
/* main: %122*/
/*   %135 = load i16* %11, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_122_77))
begin
memory_controller_enable_a = 1'd1;
end
/* main: %122*/
/*   %139 = load i16* %13, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_122_78))
begin
memory_controller_enable_a = 1'd1;
end
/* main: %122*/
/*   %143 = load i16* %15, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_122_79))
begin
memory_controller_enable_a = 1'd1;
end
/* main: %122*/
/*   %146 = load i16* %16, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_122_82))
begin
memory_controller_enable_a = 1'd1;
end
/* main: %122*/
/*   %150 = load i16* %18, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_122_83))
begin
memory_controller_enable_a = 1'd1;
end
/* main: %122*/
/*   %157 = load i16* %21, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_122_87))
begin
memory_controller_enable_a = 1'd1;
end
/* main: %122*/
/*   %161 = load i16* %23, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_122_88))
begin
memory_controller_enable_a = 1'd1;
end
/* main: %122*/
/*   %165 = load i16* %25, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_122_89))
begin
memory_controller_enable_a = 1'd1;
end
/* main: %122*/
/*   %168 = load i16* %26, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_122_92))
begin
memory_controller_enable_a = 1'd1;
end
/* main: %122*/
/*   %172 = load i16* %28, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_122_93))
begin
memory_controller_enable_a = 1'd1;
end
/* main: %179*/
/*   %180 = load i16* %scevgep20.i, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_179_98))
begin
memory_controller_enable_a = 1'd1;
end
/* main: %179*/
/*   store i16 %189, i16* %scevgep24.i, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_179_134))
begin
memory_controller_enable_a = 1'd1;
end
/* main: %194*/
/*   %196 = load i16* %41, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_194_137))
begin
memory_controller_enable_a = 1'd1;
end
/* main: %194*/
/*   %200 = load i16* %43, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_194_138))
begin
memory_controller_enable_a = 1'd1;
end
/* main: %194*/
/*   %207 = load i16* %46, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_194_142))
begin
memory_controller_enable_a = 1'd1;
end
/* main: %194*/
/*   %211 = load i16* %48, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_194_143))
begin
memory_controller_enable_a = 1'd1;
end
/* main: %194*/
/*   %218 = load i16* %51, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_194_147))
begin
memory_controller_enable_a = 1'd1;
end
/* main: %194*/
/*   %222 = load i16* %53, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_194_148))
begin
memory_controller_enable_a = 1'd1;
end
/* main: %194*/
/*   %226 = load i16* %55, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_194_149))
begin
memory_controller_enable_a = 1'd1;
end
/* main: %194*/
/*   %229 = load i16* %56, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_194_152))
begin
memory_controller_enable_a = 1'd1;
end
/* main: %194*/
/*   %233 = load i16* %58, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_194_153))
begin
memory_controller_enable_a = 1'd1;
end
/* main: %194*/
/*   %240 = load i16* %61, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_194_157))
begin
memory_controller_enable_a = 1'd1;
end
/* main: %194*/
/*   %244 = load i16* %63, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_194_158))
begin
memory_controller_enable_a = 1'd1;
end
/* main: %194*/
/*   %248 = load i16* %65, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_194_159))
begin
memory_controller_enable_a = 1'd1;
end
/* main: %253*/
/*   %254 = load i16* %scevgep.i, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_253_196))
begin
memory_controller_enable_a = 1'd1;
end
/* main: %253*/
/*   store i16 %259, i16* %scevgep13.i, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_253_200))
begin
memory_controller_enable_a = 1'd1;
end
/* main: %roundFunction.exit*/
/*   %263 = load i16* %tmp, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_203))
begin
memory_controller_enable_a = 1'd1;
end
/* main: %roundFunction.exit*/
/*   %267 = load i16* %8, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_204))
begin
memory_controller_enable_a = 1'd1;
end
/* main: %roundFunction.exit*/
/*   %274 = load i16* %11, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_208))
begin
memory_controller_enable_a = 1'd1;
end
/* main: %roundFunction.exit*/
/*   %278 = load i16* %13, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_209))
begin
memory_controller_enable_a = 1'd1;
end
/* main: %roundFunction.exit*/
/*   %282 = load i16* %15, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_210))
begin
memory_controller_enable_a = 1'd1;
end
/* main: %roundFunction.exit*/
/*   %285 = load i16* %16, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_213))
begin
memory_controller_enable_a = 1'd1;
end
/* main: %roundFunction.exit*/
/*   %289 = load i16* %18, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_214))
begin
memory_controller_enable_a = 1'd1;
end
/* main: %roundFunction.exit*/
/*   %296 = load i16* %21, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_218))
begin
memory_controller_enable_a = 1'd1;
end
/* main: %roundFunction.exit*/
/*   %300 = load i16* %23, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_219))
begin
memory_controller_enable_a = 1'd1;
end
/* main: %roundFunction.exit*/
/*   %304 = load i16* %25, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_220))
begin
memory_controller_enable_a = 1'd1;
end
/* main: %roundFunction.exit*/
/*   %307 = load i16* %26, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_223))
begin
memory_controller_enable_a = 1'd1;
end
/* main: %roundFunction.exit*/
/*   %311 = load i16* %28, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_224))
begin
memory_controller_enable_a = 1'd1;
end
/* main: %roundFunction.exit*/
/*   %318 = load i16* %tmp, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_228))
begin
memory_controller_enable_a = 1'd1;
end
/* main: %roundFunction.exit*/
/*   store i16 %320, i16* %tmp, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_231))
begin
memory_controller_enable_a = 1'd1;
end
/* main: %roundFunction.exit*/
/*   %322 = load i16* %tmp, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_232))
begin
memory_controller_enable_a = 1'd1;
end
/* main: %roundFunction.exit*/
/*   %326 = load i16* %8, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_233))
begin
memory_controller_enable_a = 1'd1;
end
/* main: %roundFunction.exit*/
/*   %333 = load i16* %11, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_237))
begin
memory_controller_enable_a = 1'd1;
end
/* main: %roundFunction.exit*/
/*   %337 = load i16* %13, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_238))
begin
memory_controller_enable_a = 1'd1;
end
/* main: %roundFunction.exit*/
/*   %341 = load i16* %15, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_239))
begin
memory_controller_enable_a = 1'd1;
end
/* main: %roundFunction.exit*/
/*   %344 = load i16* %16, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_242))
begin
memory_controller_enable_a = 1'd1;
end
/* main: %roundFunction.exit*/
/*   %348 = load i16* %18, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_243))
begin
memory_controller_enable_a = 1'd1;
end
/* main: %roundFunction.exit*/
/*   %355 = load i16* %21, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_247))
begin
memory_controller_enable_a = 1'd1;
end
/* main: %roundFunction.exit*/
/*   %359 = load i16* %23, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_248))
begin
memory_controller_enable_a = 1'd1;
end
/* main: %roundFunction.exit*/
/*   %363 = load i16* %25, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_249))
begin
memory_controller_enable_a = 1'd1;
end
/* main: %roundFunction.exit*/
/*   %366 = load i16* %26, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_252))
begin
memory_controller_enable_a = 1'd1;
end
/* main: %roundFunction.exit*/
/*   %370 = load i16* %28, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_253))
begin
memory_controller_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_a = 0;
end
/* main: %4*/
/*   store i16 0, i16* %s.i.0, align 2*/
if ((cur_state == LEGUP_F_main_BB_4_3))
begin
memory_controller_address_a = main_1_s_i_0_reg;
end
/* main: %legup_memset_2.exit*/
/*   store i16 1, i16* %tmp, align 2*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_2_exit_4))
begin
memory_controller_address_a = main_0_tmp_reg;
end
/* main: %legup_memset_2.exit*/
/*   store i16 1, i16* %8, align 2*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_2_exit_5))
begin
memory_controller_address_a = main_legup_memset_2_exit_8_reg;
end
/* main: %69*/
/*   %70 = load i16* %scevgep45.i, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_69_8))
begin
memory_controller_address_a = main_69_scevgep45_i;
end
/* main: %69*/
/*   %72 = load i16* %scevgep47.i, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_69_9))
begin
memory_controller_address_a = main_69_scevgep47_i_reg;
end
/* main: %69*/
/*   %74 = load i16* %scevgep49.i, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_69_10))
begin
memory_controller_address_a = main_69_scevgep49_i_reg;
end
/* main: %80*/
/*   %81 = load i16* %31, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_80_14))
begin
memory_controller_address_a = main_legup_memset_2_exit_31_reg;
end
/* main: %80*/
/*   %85 = load i16* %33, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_80_15))
begin
memory_controller_address_a = main_legup_memset_2_exit_33_reg;
end
/* main: %80*/
/*   %89 = load i16* %35, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_80_16))
begin
memory_controller_address_a = main_legup_memset_2_exit_35_reg;
end
/* main: %92*/
/*   %95 = load i16* %94, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_92_20))
begin
memory_controller_address_a = main_92_94;
end
/* main: %92*/
/*   store i16 %102, i16* %scevgep42.i, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_92_56))
begin
memory_controller_address_a = main_92_scevgep42_i_reg;
end
/* main: %103*/
/*   %104 = load i16* %36, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_103_57))
begin
memory_controller_address_a = main_legup_memset_2_exit_36_reg;
end
/* main: %103*/
/*   %108 = load i16* %38, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_103_58))
begin
memory_controller_address_a = main_legup_memset_2_exit_38_reg;
end
/* main: %..preheader6_crit_edge.i*/
/*   %.pre.i = load i16* %scevgep38.phi.trans.insert.i, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB___preheader6_crit_edge_i_68))
begin
memory_controller_address_a = main___preheader6_crit_edge_i_scevgep38_phi_trans_insert_i;
end
/* main: %122*/
/*   %124 = load i16* %tmp, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_122_72))
begin
memory_controller_address_a = main_0_tmp_reg;
end
/* main: %122*/
/*   %128 = load i16* %8, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_122_73))
begin
memory_controller_address_a = main_legup_memset_2_exit_8_reg;
end
/* main: %122*/
/*   %135 = load i16* %11, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_122_77))
begin
memory_controller_address_a = main_legup_memset_2_exit_11_reg;
end
/* main: %122*/
/*   %139 = load i16* %13, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_122_78))
begin
memory_controller_address_a = main_legup_memset_2_exit_13_reg;
end
/* main: %122*/
/*   %143 = load i16* %15, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_122_79))
begin
memory_controller_address_a = main_legup_memset_2_exit_15_reg;
end
/* main: %122*/
/*   %146 = load i16* %16, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_122_82))
begin
memory_controller_address_a = main_legup_memset_2_exit_16_reg;
end
/* main: %122*/
/*   %150 = load i16* %18, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_122_83))
begin
memory_controller_address_a = main_legup_memset_2_exit_18_reg;
end
/* main: %122*/
/*   %157 = load i16* %21, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_122_87))
begin
memory_controller_address_a = main_legup_memset_2_exit_21_reg;
end
/* main: %122*/
/*   %161 = load i16* %23, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_122_88))
begin
memory_controller_address_a = main_legup_memset_2_exit_23_reg;
end
/* main: %122*/
/*   %165 = load i16* %25, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_122_89))
begin
memory_controller_address_a = main_legup_memset_2_exit_25_reg;
end
/* main: %122*/
/*   %168 = load i16* %26, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_122_92))
begin
memory_controller_address_a = main_legup_memset_2_exit_26_reg;
end
/* main: %122*/
/*   %172 = load i16* %28, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_122_93))
begin
memory_controller_address_a = main_legup_memset_2_exit_28_reg;
end
/* main: %179*/
/*   %180 = load i16* %scevgep20.i, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_179_98))
begin
memory_controller_address_a = main_179_scevgep20_i;
end
/* main: %179*/
/*   store i16 %189, i16* %scevgep24.i, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_179_134))
begin
memory_controller_address_a = main_179_scevgep24_i_reg;
end
/* main: %194*/
/*   %196 = load i16* %41, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_194_137))
begin
memory_controller_address_a = main_legup_memset_2_exit_41_reg;
end
/* main: %194*/
/*   %200 = load i16* %43, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_194_138))
begin
memory_controller_address_a = main_legup_memset_2_exit_43_reg;
end
/* main: %194*/
/*   %207 = load i16* %46, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_194_142))
begin
memory_controller_address_a = main_legup_memset_2_exit_46_reg;
end
/* main: %194*/
/*   %211 = load i16* %48, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_194_143))
begin
memory_controller_address_a = main_legup_memset_2_exit_48_reg;
end
/* main: %194*/
/*   %218 = load i16* %51, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_194_147))
begin
memory_controller_address_a = main_legup_memset_2_exit_51_reg;
end
/* main: %194*/
/*   %222 = load i16* %53, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_194_148))
begin
memory_controller_address_a = main_legup_memset_2_exit_53_reg;
end
/* main: %194*/
/*   %226 = load i16* %55, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_194_149))
begin
memory_controller_address_a = main_legup_memset_2_exit_55_reg;
end
/* main: %194*/
/*   %229 = load i16* %56, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_194_152))
begin
memory_controller_address_a = main_legup_memset_2_exit_56_reg;
end
/* main: %194*/
/*   %233 = load i16* %58, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_194_153))
begin
memory_controller_address_a = main_legup_memset_2_exit_58_reg;
end
/* main: %194*/
/*   %240 = load i16* %61, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_194_157))
begin
memory_controller_address_a = main_legup_memset_2_exit_61_reg;
end
/* main: %194*/
/*   %244 = load i16* %63, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_194_158))
begin
memory_controller_address_a = main_legup_memset_2_exit_63_reg;
end
/* main: %194*/
/*   %248 = load i16* %65, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_194_159))
begin
memory_controller_address_a = main_legup_memset_2_exit_65_reg;
end
/* main: %253*/
/*   %254 = load i16* %scevgep.i, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_253_196))
begin
memory_controller_address_a = main_253_scevgep_i;
end
/* main: %253*/
/*   store i16 %259, i16* %scevgep13.i, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_253_200))
begin
memory_controller_address_a = main_253_scevgep13_i_reg;
end
/* main: %roundFunction.exit*/
/*   %263 = load i16* %tmp, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_203))
begin
memory_controller_address_a = main_0_tmp_reg;
end
/* main: %roundFunction.exit*/
/*   %267 = load i16* %8, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_204))
begin
memory_controller_address_a = main_legup_memset_2_exit_8_reg;
end
/* main: %roundFunction.exit*/
/*   %274 = load i16* %11, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_208))
begin
memory_controller_address_a = main_legup_memset_2_exit_11_reg;
end
/* main: %roundFunction.exit*/
/*   %278 = load i16* %13, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_209))
begin
memory_controller_address_a = main_legup_memset_2_exit_13_reg;
end
/* main: %roundFunction.exit*/
/*   %282 = load i16* %15, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_210))
begin
memory_controller_address_a = main_legup_memset_2_exit_15_reg;
end
/* main: %roundFunction.exit*/
/*   %285 = load i16* %16, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_213))
begin
memory_controller_address_a = main_legup_memset_2_exit_16_reg;
end
/* main: %roundFunction.exit*/
/*   %289 = load i16* %18, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_214))
begin
memory_controller_address_a = main_legup_memset_2_exit_18_reg;
end
/* main: %roundFunction.exit*/
/*   %296 = load i16* %21, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_218))
begin
memory_controller_address_a = main_legup_memset_2_exit_21_reg;
end
/* main: %roundFunction.exit*/
/*   %300 = load i16* %23, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_219))
begin
memory_controller_address_a = main_legup_memset_2_exit_23_reg;
end
/* main: %roundFunction.exit*/
/*   %304 = load i16* %25, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_220))
begin
memory_controller_address_a = main_legup_memset_2_exit_25_reg;
end
/* main: %roundFunction.exit*/
/*   %307 = load i16* %26, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_223))
begin
memory_controller_address_a = main_legup_memset_2_exit_26_reg;
end
/* main: %roundFunction.exit*/
/*   %311 = load i16* %28, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_224))
begin
memory_controller_address_a = main_legup_memset_2_exit_28_reg;
end
/* main: %roundFunction.exit*/
/*   %318 = load i16* %tmp, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_228))
begin
memory_controller_address_a = main_0_tmp_reg;
end
/* main: %roundFunction.exit*/
/*   store i16 %320, i16* %tmp, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_231))
begin
memory_controller_address_a = main_0_tmp_reg;
end
/* main: %roundFunction.exit*/
/*   %322 = load i16* %tmp, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_232))
begin
memory_controller_address_a = main_0_tmp_reg;
end
/* main: %roundFunction.exit*/
/*   %326 = load i16* %8, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_233))
begin
memory_controller_address_a = main_legup_memset_2_exit_8_reg;
end
/* main: %roundFunction.exit*/
/*   %333 = load i16* %11, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_237))
begin
memory_controller_address_a = main_legup_memset_2_exit_11_reg;
end
/* main: %roundFunction.exit*/
/*   %337 = load i16* %13, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_238))
begin
memory_controller_address_a = main_legup_memset_2_exit_13_reg;
end
/* main: %roundFunction.exit*/
/*   %341 = load i16* %15, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_239))
begin
memory_controller_address_a = main_legup_memset_2_exit_15_reg;
end
/* main: %roundFunction.exit*/
/*   %344 = load i16* %16, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_242))
begin
memory_controller_address_a = main_legup_memset_2_exit_16_reg;
end
/* main: %roundFunction.exit*/
/*   %348 = load i16* %18, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_243))
begin
memory_controller_address_a = main_legup_memset_2_exit_18_reg;
end
/* main: %roundFunction.exit*/
/*   %355 = load i16* %21, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_247))
begin
memory_controller_address_a = main_legup_memset_2_exit_21_reg;
end
/* main: %roundFunction.exit*/
/*   %359 = load i16* %23, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_248))
begin
memory_controller_address_a = main_legup_memset_2_exit_23_reg;
end
/* main: %roundFunction.exit*/
/*   %363 = load i16* %25, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_249))
begin
memory_controller_address_a = main_legup_memset_2_exit_25_reg;
end
/* main: %roundFunction.exit*/
/*   %366 = load i16* %26, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_252))
begin
memory_controller_address_a = main_legup_memset_2_exit_26_reg;
end
/* main: %roundFunction.exit*/
/*   %370 = load i16* %28, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_253))
begin
memory_controller_address_a = main_legup_memset_2_exit_28_reg;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_a = 1'd0;
end
/* main: %4*/
/*   store i16 0, i16* %s.i.0, align 2*/
if ((cur_state == LEGUP_F_main_BB_4_3))
begin
memory_controller_write_enable_a = 1'd1;
end
/* main: %legup_memset_2.exit*/
/*   store i16 1, i16* %tmp, align 2*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_2_exit_4))
begin
memory_controller_write_enable_a = 1'd1;
end
/* main: %legup_memset_2.exit*/
/*   store i16 1, i16* %8, align 2*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_2_exit_5))
begin
memory_controller_write_enable_a = 1'd1;
end
/* main: %69*/
/*   %70 = load i16* %scevgep45.i, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_69_8))
begin
memory_controller_write_enable_a = 1'd0;
end
/* main: %69*/
/*   %72 = load i16* %scevgep47.i, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_69_9))
begin
memory_controller_write_enable_a = 1'd0;
end
/* main: %69*/
/*   %74 = load i16* %scevgep49.i, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_69_10))
begin
memory_controller_write_enable_a = 1'd0;
end
/* main: %80*/
/*   %81 = load i16* %31, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_80_14))
begin
memory_controller_write_enable_a = 1'd0;
end
/* main: %80*/
/*   %85 = load i16* %33, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_80_15))
begin
memory_controller_write_enable_a = 1'd0;
end
/* main: %80*/
/*   %89 = load i16* %35, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_80_16))
begin
memory_controller_write_enable_a = 1'd0;
end
/* main: %92*/
/*   %95 = load i16* %94, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_92_20))
begin
memory_controller_write_enable_a = 1'd0;
end
/* main: %92*/
/*   store i16 %102, i16* %scevgep42.i, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_92_56))
begin
memory_controller_write_enable_a = 1'd1;
end
/* main: %103*/
/*   %104 = load i16* %36, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_103_57))
begin
memory_controller_write_enable_a = 1'd0;
end
/* main: %103*/
/*   %108 = load i16* %38, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_103_58))
begin
memory_controller_write_enable_a = 1'd0;
end
/* main: %..preheader6_crit_edge.i*/
/*   %.pre.i = load i16* %scevgep38.phi.trans.insert.i, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB___preheader6_crit_edge_i_68))
begin
memory_controller_write_enable_a = 1'd0;
end
/* main: %122*/
/*   %124 = load i16* %tmp, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_122_72))
begin
memory_controller_write_enable_a = 1'd0;
end
/* main: %122*/
/*   %128 = load i16* %8, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_122_73))
begin
memory_controller_write_enable_a = 1'd0;
end
/* main: %122*/
/*   %135 = load i16* %11, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_122_77))
begin
memory_controller_write_enable_a = 1'd0;
end
/* main: %122*/
/*   %139 = load i16* %13, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_122_78))
begin
memory_controller_write_enable_a = 1'd0;
end
/* main: %122*/
/*   %143 = load i16* %15, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_122_79))
begin
memory_controller_write_enable_a = 1'd0;
end
/* main: %122*/
/*   %146 = load i16* %16, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_122_82))
begin
memory_controller_write_enable_a = 1'd0;
end
/* main: %122*/
/*   %150 = load i16* %18, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_122_83))
begin
memory_controller_write_enable_a = 1'd0;
end
/* main: %122*/
/*   %157 = load i16* %21, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_122_87))
begin
memory_controller_write_enable_a = 1'd0;
end
/* main: %122*/
/*   %161 = load i16* %23, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_122_88))
begin
memory_controller_write_enable_a = 1'd0;
end
/* main: %122*/
/*   %165 = load i16* %25, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_122_89))
begin
memory_controller_write_enable_a = 1'd0;
end
/* main: %122*/
/*   %168 = load i16* %26, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_122_92))
begin
memory_controller_write_enable_a = 1'd0;
end
/* main: %122*/
/*   %172 = load i16* %28, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_122_93))
begin
memory_controller_write_enable_a = 1'd0;
end
/* main: %179*/
/*   %180 = load i16* %scevgep20.i, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_179_98))
begin
memory_controller_write_enable_a = 1'd0;
end
/* main: %179*/
/*   store i16 %189, i16* %scevgep24.i, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_179_134))
begin
memory_controller_write_enable_a = 1'd1;
end
/* main: %194*/
/*   %196 = load i16* %41, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_194_137))
begin
memory_controller_write_enable_a = 1'd0;
end
/* main: %194*/
/*   %200 = load i16* %43, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_194_138))
begin
memory_controller_write_enable_a = 1'd0;
end
/* main: %194*/
/*   %207 = load i16* %46, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_194_142))
begin
memory_controller_write_enable_a = 1'd0;
end
/* main: %194*/
/*   %211 = load i16* %48, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_194_143))
begin
memory_controller_write_enable_a = 1'd0;
end
/* main: %194*/
/*   %218 = load i16* %51, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_194_147))
begin
memory_controller_write_enable_a = 1'd0;
end
/* main: %194*/
/*   %222 = load i16* %53, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_194_148))
begin
memory_controller_write_enable_a = 1'd0;
end
/* main: %194*/
/*   %226 = load i16* %55, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_194_149))
begin
memory_controller_write_enable_a = 1'd0;
end
/* main: %194*/
/*   %229 = load i16* %56, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_194_152))
begin
memory_controller_write_enable_a = 1'd0;
end
/* main: %194*/
/*   %233 = load i16* %58, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_194_153))
begin
memory_controller_write_enable_a = 1'd0;
end
/* main: %194*/
/*   %240 = load i16* %61, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_194_157))
begin
memory_controller_write_enable_a = 1'd0;
end
/* main: %194*/
/*   %244 = load i16* %63, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_194_158))
begin
memory_controller_write_enable_a = 1'd0;
end
/* main: %194*/
/*   %248 = load i16* %65, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_194_159))
begin
memory_controller_write_enable_a = 1'd0;
end
/* main: %253*/
/*   %254 = load i16* %scevgep.i, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_253_196))
begin
memory_controller_write_enable_a = 1'd0;
end
/* main: %253*/
/*   store i16 %259, i16* %scevgep13.i, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_253_200))
begin
memory_controller_write_enable_a = 1'd1;
end
/* main: %roundFunction.exit*/
/*   %263 = load i16* %tmp, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_203))
begin
memory_controller_write_enable_a = 1'd0;
end
/* main: %roundFunction.exit*/
/*   %267 = load i16* %8, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_204))
begin
memory_controller_write_enable_a = 1'd0;
end
/* main: %roundFunction.exit*/
/*   %274 = load i16* %11, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_208))
begin
memory_controller_write_enable_a = 1'd0;
end
/* main: %roundFunction.exit*/
/*   %278 = load i16* %13, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_209))
begin
memory_controller_write_enable_a = 1'd0;
end
/* main: %roundFunction.exit*/
/*   %282 = load i16* %15, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_210))
begin
memory_controller_write_enable_a = 1'd0;
end
/* main: %roundFunction.exit*/
/*   %285 = load i16* %16, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_213))
begin
memory_controller_write_enable_a = 1'd0;
end
/* main: %roundFunction.exit*/
/*   %289 = load i16* %18, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_214))
begin
memory_controller_write_enable_a = 1'd0;
end
/* main: %roundFunction.exit*/
/*   %296 = load i16* %21, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_218))
begin
memory_controller_write_enable_a = 1'd0;
end
/* main: %roundFunction.exit*/
/*   %300 = load i16* %23, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_219))
begin
memory_controller_write_enable_a = 1'd0;
end
/* main: %roundFunction.exit*/
/*   %304 = load i16* %25, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_220))
begin
memory_controller_write_enable_a = 1'd0;
end
/* main: %roundFunction.exit*/
/*   %307 = load i16* %26, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_223))
begin
memory_controller_write_enable_a = 1'd0;
end
/* main: %roundFunction.exit*/
/*   %311 = load i16* %28, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_224))
begin
memory_controller_write_enable_a = 1'd0;
end
/* main: %roundFunction.exit*/
/*   %318 = load i16* %tmp, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_228))
begin
memory_controller_write_enable_a = 1'd0;
end
/* main: %roundFunction.exit*/
/*   store i16 %320, i16* %tmp, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_231))
begin
memory_controller_write_enable_a = 1'd1;
end
/* main: %roundFunction.exit*/
/*   %322 = load i16* %tmp, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_232))
begin
memory_controller_write_enable_a = 1'd0;
end
/* main: %roundFunction.exit*/
/*   %326 = load i16* %8, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_233))
begin
memory_controller_write_enable_a = 1'd0;
end
/* main: %roundFunction.exit*/
/*   %333 = load i16* %11, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_237))
begin
memory_controller_write_enable_a = 1'd0;
end
/* main: %roundFunction.exit*/
/*   %337 = load i16* %13, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_238))
begin
memory_controller_write_enable_a = 1'd0;
end
/* main: %roundFunction.exit*/
/*   %341 = load i16* %15, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_239))
begin
memory_controller_write_enable_a = 1'd0;
end
/* main: %roundFunction.exit*/
/*   %344 = load i16* %16, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_242))
begin
memory_controller_write_enable_a = 1'd0;
end
/* main: %roundFunction.exit*/
/*   %348 = load i16* %18, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_243))
begin
memory_controller_write_enable_a = 1'd0;
end
/* main: %roundFunction.exit*/
/*   %355 = load i16* %21, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_247))
begin
memory_controller_write_enable_a = 1'd0;
end
/* main: %roundFunction.exit*/
/*   %359 = load i16* %23, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_248))
begin
memory_controller_write_enable_a = 1'd0;
end
/* main: %roundFunction.exit*/
/*   %363 = load i16* %25, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_249))
begin
memory_controller_write_enable_a = 1'd0;
end
/* main: %roundFunction.exit*/
/*   %366 = load i16* %26, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_252))
begin
memory_controller_write_enable_a = 1'd0;
end
/* main: %roundFunction.exit*/
/*   %370 = load i16* %28, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_253))
begin
memory_controller_write_enable_a = 1'd0;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_a = 64'd0;
end
/* main: %4*/
/*   store i16 0, i16* %s.i.0, align 2*/
if ((cur_state == LEGUP_F_main_BB_4_3))
begin
memory_controller_in_a = 16'd0;
end
/* main: %legup_memset_2.exit*/
/*   store i16 1, i16* %tmp, align 2*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_2_exit_4))
begin
memory_controller_in_a = 16'd1;
end
/* main: %legup_memset_2.exit*/
/*   store i16 1, i16* %8, align 2*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_2_exit_5))
begin
memory_controller_in_a = 16'd1;
end
/* main: %92*/
/*   store i16 %102, i16* %scevgep42.i, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_92_56))
begin
memory_controller_in_a = {main_92_102_reg};
end
/* main: %179*/
/*   store i16 %189, i16* %scevgep24.i, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_179_134))
begin
memory_controller_in_a = {main_179_189_reg};
end
/* main: %253*/
/*   store i16 %259, i16* %scevgep13.i, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_253_200))
begin
memory_controller_in_a = {main_253_259_reg};
end
/* main: %roundFunction.exit*/
/*   store i16 %320, i16* %tmp, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_231))
begin
memory_controller_in_a = {main_roundFunction_exit_320_reg};
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_a = 2'd0;
end
/* main: %4*/
/*   store i16 0, i16* %s.i.0, align 2*/
if ((cur_state == LEGUP_F_main_BB_4_3))
begin
memory_controller_size_a = 2'd1;
end
/* main: %legup_memset_2.exit*/
/*   store i16 1, i16* %tmp, align 2*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_2_exit_4))
begin
memory_controller_size_a = 2'd1;
end
/* main: %legup_memset_2.exit*/
/*   store i16 1, i16* %8, align 2*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_2_exit_5))
begin
memory_controller_size_a = 2'd1;
end
/* main: %69*/
/*   %70 = load i16* %scevgep45.i, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_69_8))
begin
memory_controller_size_a = 2'd1;
end
/* main: %69*/
/*   %72 = load i16* %scevgep47.i, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_69_9))
begin
memory_controller_size_a = 2'd1;
end
/* main: %69*/
/*   %74 = load i16* %scevgep49.i, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_69_10))
begin
memory_controller_size_a = 2'd1;
end
/* main: %80*/
/*   %81 = load i16* %31, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_80_14))
begin
memory_controller_size_a = 2'd1;
end
/* main: %80*/
/*   %85 = load i16* %33, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_80_15))
begin
memory_controller_size_a = 2'd1;
end
/* main: %80*/
/*   %89 = load i16* %35, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_80_16))
begin
memory_controller_size_a = 2'd1;
end
/* main: %92*/
/*   %95 = load i16* %94, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_92_20))
begin
memory_controller_size_a = 2'd1;
end
/* main: %92*/
/*   store i16 %102, i16* %scevgep42.i, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_92_56))
begin
memory_controller_size_a = 2'd1;
end
/* main: %103*/
/*   %104 = load i16* %36, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_103_57))
begin
memory_controller_size_a = 2'd1;
end
/* main: %103*/
/*   %108 = load i16* %38, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_103_58))
begin
memory_controller_size_a = 2'd1;
end
/* main: %..preheader6_crit_edge.i*/
/*   %.pre.i = load i16* %scevgep38.phi.trans.insert.i, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB___preheader6_crit_edge_i_68))
begin
memory_controller_size_a = 2'd1;
end
/* main: %122*/
/*   %124 = load i16* %tmp, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_122_72))
begin
memory_controller_size_a = 2'd1;
end
/* main: %122*/
/*   %128 = load i16* %8, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_122_73))
begin
memory_controller_size_a = 2'd1;
end
/* main: %122*/
/*   %135 = load i16* %11, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_122_77))
begin
memory_controller_size_a = 2'd1;
end
/* main: %122*/
/*   %139 = load i16* %13, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_122_78))
begin
memory_controller_size_a = 2'd1;
end
/* main: %122*/
/*   %143 = load i16* %15, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_122_79))
begin
memory_controller_size_a = 2'd1;
end
/* main: %122*/
/*   %146 = load i16* %16, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_122_82))
begin
memory_controller_size_a = 2'd1;
end
/* main: %122*/
/*   %150 = load i16* %18, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_122_83))
begin
memory_controller_size_a = 2'd1;
end
/* main: %122*/
/*   %157 = load i16* %21, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_122_87))
begin
memory_controller_size_a = 2'd1;
end
/* main: %122*/
/*   %161 = load i16* %23, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_122_88))
begin
memory_controller_size_a = 2'd1;
end
/* main: %122*/
/*   %165 = load i16* %25, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_122_89))
begin
memory_controller_size_a = 2'd1;
end
/* main: %122*/
/*   %168 = load i16* %26, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_122_92))
begin
memory_controller_size_a = 2'd1;
end
/* main: %122*/
/*   %172 = load i16* %28, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_122_93))
begin
memory_controller_size_a = 2'd1;
end
/* main: %179*/
/*   %180 = load i16* %scevgep20.i, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_179_98))
begin
memory_controller_size_a = 2'd1;
end
/* main: %179*/
/*   store i16 %189, i16* %scevgep24.i, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_179_134))
begin
memory_controller_size_a = 2'd1;
end
/* main: %194*/
/*   %196 = load i16* %41, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_194_137))
begin
memory_controller_size_a = 2'd1;
end
/* main: %194*/
/*   %200 = load i16* %43, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_194_138))
begin
memory_controller_size_a = 2'd1;
end
/* main: %194*/
/*   %207 = load i16* %46, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_194_142))
begin
memory_controller_size_a = 2'd1;
end
/* main: %194*/
/*   %211 = load i16* %48, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_194_143))
begin
memory_controller_size_a = 2'd1;
end
/* main: %194*/
/*   %218 = load i16* %51, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_194_147))
begin
memory_controller_size_a = 2'd1;
end
/* main: %194*/
/*   %222 = load i16* %53, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_194_148))
begin
memory_controller_size_a = 2'd1;
end
/* main: %194*/
/*   %226 = load i16* %55, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_194_149))
begin
memory_controller_size_a = 2'd1;
end
/* main: %194*/
/*   %229 = load i16* %56, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_194_152))
begin
memory_controller_size_a = 2'd1;
end
/* main: %194*/
/*   %233 = load i16* %58, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_194_153))
begin
memory_controller_size_a = 2'd1;
end
/* main: %194*/
/*   %240 = load i16* %61, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_194_157))
begin
memory_controller_size_a = 2'd1;
end
/* main: %194*/
/*   %244 = load i16* %63, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_194_158))
begin
memory_controller_size_a = 2'd1;
end
/* main: %194*/
/*   %248 = load i16* %65, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_194_159))
begin
memory_controller_size_a = 2'd1;
end
/* main: %253*/
/*   %254 = load i16* %scevgep.i, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_253_196))
begin
memory_controller_size_a = 2'd1;
end
/* main: %253*/
/*   store i16 %259, i16* %scevgep13.i, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_253_200))
begin
memory_controller_size_a = 2'd1;
end
/* main: %roundFunction.exit*/
/*   %263 = load i16* %tmp, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_203))
begin
memory_controller_size_a = 2'd1;
end
/* main: %roundFunction.exit*/
/*   %267 = load i16* %8, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_204))
begin
memory_controller_size_a = 2'd1;
end
/* main: %roundFunction.exit*/
/*   %274 = load i16* %11, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_208))
begin
memory_controller_size_a = 2'd1;
end
/* main: %roundFunction.exit*/
/*   %278 = load i16* %13, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_209))
begin
memory_controller_size_a = 2'd1;
end
/* main: %roundFunction.exit*/
/*   %282 = load i16* %15, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_210))
begin
memory_controller_size_a = 2'd1;
end
/* main: %roundFunction.exit*/
/*   %285 = load i16* %16, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_213))
begin
memory_controller_size_a = 2'd1;
end
/* main: %roundFunction.exit*/
/*   %289 = load i16* %18, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_214))
begin
memory_controller_size_a = 2'd1;
end
/* main: %roundFunction.exit*/
/*   %296 = load i16* %21, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_218))
begin
memory_controller_size_a = 2'd1;
end
/* main: %roundFunction.exit*/
/*   %300 = load i16* %23, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_219))
begin
memory_controller_size_a = 2'd1;
end
/* main: %roundFunction.exit*/
/*   %304 = load i16* %25, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_220))
begin
memory_controller_size_a = 2'd1;
end
/* main: %roundFunction.exit*/
/*   %307 = load i16* %26, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_223))
begin
memory_controller_size_a = 2'd1;
end
/* main: %roundFunction.exit*/
/*   %311 = load i16* %28, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_224))
begin
memory_controller_size_a = 2'd1;
end
/* main: %roundFunction.exit*/
/*   %318 = load i16* %tmp, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_228))
begin
memory_controller_size_a = 2'd1;
end
/* main: %roundFunction.exit*/
/*   store i16 %320, i16* %tmp, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_231))
begin
memory_controller_size_a = 2'd1;
end
/* main: %roundFunction.exit*/
/*   %322 = load i16* %tmp, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_232))
begin
memory_controller_size_a = 2'd1;
end
/* main: %roundFunction.exit*/
/*   %326 = load i16* %8, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_233))
begin
memory_controller_size_a = 2'd1;
end
/* main: %roundFunction.exit*/
/*   %333 = load i16* %11, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_237))
begin
memory_controller_size_a = 2'd1;
end
/* main: %roundFunction.exit*/
/*   %337 = load i16* %13, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_238))
begin
memory_controller_size_a = 2'd1;
end
/* main: %roundFunction.exit*/
/*   %341 = load i16* %15, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_239))
begin
memory_controller_size_a = 2'd1;
end
/* main: %roundFunction.exit*/
/*   %344 = load i16* %16, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_242))
begin
memory_controller_size_a = 2'd1;
end
/* main: %roundFunction.exit*/
/*   %348 = load i16* %18, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_243))
begin
memory_controller_size_a = 2'd1;
end
/* main: %roundFunction.exit*/
/*   %355 = load i16* %21, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_247))
begin
memory_controller_size_a = 2'd1;
end
/* main: %roundFunction.exit*/
/*   %359 = load i16* %23, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_248))
begin
memory_controller_size_a = 2'd1;
end
/* main: %roundFunction.exit*/
/*   %363 = load i16* %25, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_249))
begin
memory_controller_size_a = 2'd1;
end
/* main: %roundFunction.exit*/
/*   %366 = load i16* %26, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_252))
begin
memory_controller_size_a = 2'd1;
end
/* main: %roundFunction.exit*/
/*   %370 = load i16* %28, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_253))
begin
memory_controller_size_a = 2'd1;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_b = 1'd0;
end
/* main: %legup_memset_2.exit*/
/*   store i16 1, i16* %7, align 2*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_2_exit_4))
begin
memory_controller_enable_b = 1'd1;
end
/* main: %legup_memset_2.exit*/
/*   store i16 1, i16* %9, align 2*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_2_exit_5))
begin
memory_controller_enable_b = 1'd1;
end
/* main: %legup_memset_2.exit*/
/*   store i16 1, i16* %10, align 2*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_2_exit_6))
begin
memory_controller_enable_b = 1'd1;
end
/* main: %69*/
/*   %71 = load i16* %scevgep46.i, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_69_8))
begin
memory_controller_enable_b = 1'd1;
end
/* main: %69*/
/*   %73 = load i16* %scevgep48.i, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_69_9))
begin
memory_controller_enable_b = 1'd1;
end
/* main: %69*/
/*   store i16 %78, i16* %scevgep50.i, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_69_13))
begin
memory_controller_enable_b = 1'd1;
end
/* main: %80*/
/*   %83 = load i16* %32, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_80_14))
begin
memory_controller_enable_b = 1'd1;
end
/* main: %80*/
/*   %87 = load i16* %34, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_80_15))
begin
memory_controller_enable_b = 1'd1;
end
/* main: %92*/
/*   %101 = load i16* %100, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_92_53))
begin
memory_controller_enable_b = 1'd1;
end
/* main: %103*/
/*   %106 = load i16* %37, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_103_57))
begin
memory_controller_enable_b = 1'd1;
end
/* main: %103*/
/*   %110 = load i16* %39, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_103_58))
begin
memory_controller_enable_b = 1'd1;
end
/* main: %103*/
/*   %112 = load i16* %40, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_103_59))
begin
memory_controller_enable_b = 1'd1;
end
/* main: %116*/
/*   %117 = load i16* %scevgep35.i, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_116_63))
begin
memory_controller_enable_b = 1'd1;
end
/* main: %116*/
/*   store i16 %118, i16* %scevgep35.i, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_116_66))
begin
memory_controller_enable_b = 1'd1;
end
/* main: %122*/
/*   %126 = load i16* %7, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_122_72))
begin
memory_controller_enable_b = 1'd1;
end
/* main: %122*/
/*   %130 = load i16* %9, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_122_73))
begin
memory_controller_enable_b = 1'd1;
end
/* main: %122*/
/*   %132 = load i16* %10, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_122_74))
begin
memory_controller_enable_b = 1'd1;
end
/* main: %122*/
/*   %137 = load i16* %12, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_122_77))
begin
memory_controller_enable_b = 1'd1;
end
/* main: %122*/
/*   %141 = load i16* %14, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_122_78))
begin
memory_controller_enable_b = 1'd1;
end
/* main: %122*/
/*   %148 = load i16* %17, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_122_82))
begin
memory_controller_enable_b = 1'd1;
end
/* main: %122*/
/*   %152 = load i16* %19, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_122_83))
begin
memory_controller_enable_b = 1'd1;
end
/* main: %122*/
/*   %154 = load i16* %20, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_122_84))
begin
memory_controller_enable_b = 1'd1;
end
/* main: %122*/
/*   %159 = load i16* %22, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_122_87))
begin
memory_controller_enable_b = 1'd1;
end
/* main: %122*/
/*   %163 = load i16* %24, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_122_88))
begin
memory_controller_enable_b = 1'd1;
end
/* main: %122*/
/*   %170 = load i16* %27, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_122_92))
begin
memory_controller_enable_b = 1'd1;
end
/* main: %122*/
/*   %174 = load i16* %29, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_122_93))
begin
memory_controller_enable_b = 1'd1;
end
/* main: %122*/
/*   %176 = load i16* %30, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_122_94))
begin
memory_controller_enable_b = 1'd1;
end
/* main: %179*/
/*   %181 = load i16* %scevgep21.i, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_179_98))
begin
memory_controller_enable_b = 1'd1;
end
/* main: %194*/
/*   %198 = load i16* %42, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_194_137))
begin
memory_controller_enable_b = 1'd1;
end
/* main: %194*/
/*   %202 = load i16* %44, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_194_138))
begin
memory_controller_enable_b = 1'd1;
end
/* main: %194*/
/*   %204 = load i16* %45, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_194_139))
begin
memory_controller_enable_b = 1'd1;
end
/* main: %194*/
/*   %209 = load i16* %47, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_194_142))
begin
memory_controller_enable_b = 1'd1;
end
/* main: %194*/
/*   %213 = load i16* %49, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_194_143))
begin
memory_controller_enable_b = 1'd1;
end
/* main: %194*/
/*   %215 = load i16* %50, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_194_144))
begin
memory_controller_enable_b = 1'd1;
end
/* main: %194*/
/*   %220 = load i16* %52, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_194_147))
begin
memory_controller_enable_b = 1'd1;
end
/* main: %194*/
/*   %224 = load i16* %54, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_194_148))
begin
memory_controller_enable_b = 1'd1;
end
/* main: %194*/
/*   %231 = load i16* %57, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_194_152))
begin
memory_controller_enable_b = 1'd1;
end
/* main: %194*/
/*   %235 = load i16* %59, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_194_153))
begin
memory_controller_enable_b = 1'd1;
end
/* main: %194*/
/*   %237 = load i16* %60, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_194_154))
begin
memory_controller_enable_b = 1'd1;
end
/* main: %194*/
/*   %242 = load i16* %62, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_194_157))
begin
memory_controller_enable_b = 1'd1;
end
/* main: %194*/
/*   %246 = load i16* %64, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_194_158))
begin
memory_controller_enable_b = 1'd1;
end
/* main: %253*/
/*   %255 = load i16* %scevgep11.i, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_253_196))
begin
memory_controller_enable_b = 1'd1;
end
/* main: %253*/
/*   %257 = load i16* %scevgep12.i, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_253_197))
begin
memory_controller_enable_b = 1'd1;
end
/* main: %roundFunction.exit*/
/*   %265 = load i16* %7, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_203))
begin
memory_controller_enable_b = 1'd1;
end
/* main: %roundFunction.exit*/
/*   %269 = load i16* %9, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_204))
begin
memory_controller_enable_b = 1'd1;
end
/* main: %roundFunction.exit*/
/*   %271 = load i16* %10, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_205))
begin
memory_controller_enable_b = 1'd1;
end
/* main: %roundFunction.exit*/
/*   %276 = load i16* %12, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_208))
begin
memory_controller_enable_b = 1'd1;
end
/* main: %roundFunction.exit*/
/*   %280 = load i16* %14, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_209))
begin
memory_controller_enable_b = 1'd1;
end
/* main: %roundFunction.exit*/
/*   %287 = load i16* %17, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_213))
begin
memory_controller_enable_b = 1'd1;
end
/* main: %roundFunction.exit*/
/*   %291 = load i16* %19, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_214))
begin
memory_controller_enable_b = 1'd1;
end
/* main: %roundFunction.exit*/
/*   %293 = load i16* %20, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_215))
begin
memory_controller_enable_b = 1'd1;
end
/* main: %roundFunction.exit*/
/*   %298 = load i16* %22, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_218))
begin
memory_controller_enable_b = 1'd1;
end
/* main: %roundFunction.exit*/
/*   %302 = load i16* %24, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_219))
begin
memory_controller_enable_b = 1'd1;
end
/* main: %roundFunction.exit*/
/*   %309 = load i16* %27, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_223))
begin
memory_controller_enable_b = 1'd1;
end
/* main: %roundFunction.exit*/
/*   %313 = load i16* %29, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_224))
begin
memory_controller_enable_b = 1'd1;
end
/* main: %roundFunction.exit*/
/*   %315 = load i16* %30, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_225))
begin
memory_controller_enable_b = 1'd1;
end
/* main: %roundFunction.exit*/
/*   %319 = load i16* %scevgep, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_228))
begin
memory_controller_enable_b = 1'd1;
end
/* main: %roundFunction.exit*/
/*   %324 = load i16* %7, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_232))
begin
memory_controller_enable_b = 1'd1;
end
/* main: %roundFunction.exit*/
/*   %328 = load i16* %9, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_233))
begin
memory_controller_enable_b = 1'd1;
end
/* main: %roundFunction.exit*/
/*   %330 = load i16* %10, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_234))
begin
memory_controller_enable_b = 1'd1;
end
/* main: %roundFunction.exit*/
/*   %335 = load i16* %12, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_237))
begin
memory_controller_enable_b = 1'd1;
end
/* main: %roundFunction.exit*/
/*   %339 = load i16* %14, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_238))
begin
memory_controller_enable_b = 1'd1;
end
/* main: %roundFunction.exit*/
/*   %346 = load i16* %17, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_242))
begin
memory_controller_enable_b = 1'd1;
end
/* main: %roundFunction.exit*/
/*   %350 = load i16* %19, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_243))
begin
memory_controller_enable_b = 1'd1;
end
/* main: %roundFunction.exit*/
/*   %352 = load i16* %20, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_244))
begin
memory_controller_enable_b = 1'd1;
end
/* main: %roundFunction.exit*/
/*   %357 = load i16* %22, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_247))
begin
memory_controller_enable_b = 1'd1;
end
/* main: %roundFunction.exit*/
/*   %361 = load i16* %24, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_248))
begin
memory_controller_enable_b = 1'd1;
end
/* main: %roundFunction.exit*/
/*   %368 = load i16* %27, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_252))
begin
memory_controller_enable_b = 1'd1;
end
/* main: %roundFunction.exit*/
/*   %372 = load i16* %29, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_253))
begin
memory_controller_enable_b = 1'd1;
end
/* main: %roundFunction.exit*/
/*   %374 = load i16* %30, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_254))
begin
memory_controller_enable_b = 1'd1;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_b = 0;
end
/* main: %legup_memset_2.exit*/
/*   store i16 1, i16* %7, align 2*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_2_exit_4))
begin
memory_controller_address_b = main_legup_memset_2_exit_7;
end
/* main: %legup_memset_2.exit*/
/*   store i16 1, i16* %9, align 2*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_2_exit_5))
begin
memory_controller_address_b = main_legup_memset_2_exit_9_reg;
end
/* main: %legup_memset_2.exit*/
/*   store i16 1, i16* %10, align 2*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_2_exit_6))
begin
memory_controller_address_b = main_legup_memset_2_exit_10_reg;
end
/* main: %69*/
/*   %71 = load i16* %scevgep46.i, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_69_8))
begin
memory_controller_address_b = main_69_scevgep46_i;
end
/* main: %69*/
/*   %73 = load i16* %scevgep48.i, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_69_9))
begin
memory_controller_address_b = main_69_scevgep48_i_reg;
end
/* main: %69*/
/*   store i16 %78, i16* %scevgep50.i, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_69_13))
begin
memory_controller_address_b = main_69_scevgep50_i_reg;
end
/* main: %80*/
/*   %83 = load i16* %32, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_80_14))
begin
memory_controller_address_b = main_legup_memset_2_exit_32_reg;
end
/* main: %80*/
/*   %87 = load i16* %34, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_80_15))
begin
memory_controller_address_b = main_legup_memset_2_exit_34_reg;
end
/* main: %92*/
/*   %101 = load i16* %100, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_92_53))
begin
memory_controller_address_b = main_92_100;
end
/* main: %103*/
/*   %106 = load i16* %37, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_103_57))
begin
memory_controller_address_b = main_legup_memset_2_exit_37_reg;
end
/* main: %103*/
/*   %110 = load i16* %39, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_103_58))
begin
memory_controller_address_b = main_legup_memset_2_exit_39_reg;
end
/* main: %103*/
/*   %112 = load i16* %40, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_103_59))
begin
memory_controller_address_b = main_legup_memset_2_exit_40_reg;
end
/* main: %116*/
/*   %117 = load i16* %scevgep35.i, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_116_63))
begin
memory_controller_address_b = main_116_scevgep35_i;
end
/* main: %116*/
/*   store i16 %118, i16* %scevgep35.i, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_116_66))
begin
memory_controller_address_b = main_116_scevgep35_i_reg;
end
/* main: %122*/
/*   %126 = load i16* %7, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_122_72))
begin
memory_controller_address_b = main_legup_memset_2_exit_7_reg;
end
/* main: %122*/
/*   %130 = load i16* %9, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_122_73))
begin
memory_controller_address_b = main_legup_memset_2_exit_9_reg;
end
/* main: %122*/
/*   %132 = load i16* %10, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_122_74))
begin
memory_controller_address_b = main_legup_memset_2_exit_10_reg;
end
/* main: %122*/
/*   %137 = load i16* %12, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_122_77))
begin
memory_controller_address_b = main_legup_memset_2_exit_12_reg;
end
/* main: %122*/
/*   %141 = load i16* %14, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_122_78))
begin
memory_controller_address_b = main_legup_memset_2_exit_14_reg;
end
/* main: %122*/
/*   %148 = load i16* %17, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_122_82))
begin
memory_controller_address_b = main_legup_memset_2_exit_17_reg;
end
/* main: %122*/
/*   %152 = load i16* %19, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_122_83))
begin
memory_controller_address_b = main_legup_memset_2_exit_19_reg;
end
/* main: %122*/
/*   %154 = load i16* %20, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_122_84))
begin
memory_controller_address_b = main_legup_memset_2_exit_20_reg;
end
/* main: %122*/
/*   %159 = load i16* %22, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_122_87))
begin
memory_controller_address_b = main_legup_memset_2_exit_22_reg;
end
/* main: %122*/
/*   %163 = load i16* %24, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_122_88))
begin
memory_controller_address_b = main_legup_memset_2_exit_24_reg;
end
/* main: %122*/
/*   %170 = load i16* %27, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_122_92))
begin
memory_controller_address_b = main_legup_memset_2_exit_27_reg;
end
/* main: %122*/
/*   %174 = load i16* %29, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_122_93))
begin
memory_controller_address_b = main_legup_memset_2_exit_29_reg;
end
/* main: %122*/
/*   %176 = load i16* %30, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_122_94))
begin
memory_controller_address_b = main_legup_memset_2_exit_30_reg;
end
/* main: %179*/
/*   %181 = load i16* %scevgep21.i, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_179_98))
begin
memory_controller_address_b = main_179_scevgep21_i;
end
/* main: %194*/
/*   %198 = load i16* %42, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_194_137))
begin
memory_controller_address_b = main_legup_memset_2_exit_42_reg;
end
/* main: %194*/
/*   %202 = load i16* %44, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_194_138))
begin
memory_controller_address_b = main_legup_memset_2_exit_44_reg;
end
/* main: %194*/
/*   %204 = load i16* %45, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_194_139))
begin
memory_controller_address_b = main_legup_memset_2_exit_45_reg;
end
/* main: %194*/
/*   %209 = load i16* %47, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_194_142))
begin
memory_controller_address_b = main_legup_memset_2_exit_47_reg;
end
/* main: %194*/
/*   %213 = load i16* %49, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_194_143))
begin
memory_controller_address_b = main_legup_memset_2_exit_49_reg;
end
/* main: %194*/
/*   %215 = load i16* %50, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_194_144))
begin
memory_controller_address_b = main_legup_memset_2_exit_50_reg;
end
/* main: %194*/
/*   %220 = load i16* %52, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_194_147))
begin
memory_controller_address_b = main_legup_memset_2_exit_52_reg;
end
/* main: %194*/
/*   %224 = load i16* %54, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_194_148))
begin
memory_controller_address_b = main_legup_memset_2_exit_54_reg;
end
/* main: %194*/
/*   %231 = load i16* %57, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_194_152))
begin
memory_controller_address_b = main_legup_memset_2_exit_57_reg;
end
/* main: %194*/
/*   %235 = load i16* %59, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_194_153))
begin
memory_controller_address_b = main_legup_memset_2_exit_59_reg;
end
/* main: %194*/
/*   %237 = load i16* %60, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_194_154))
begin
memory_controller_address_b = main_legup_memset_2_exit_60_reg;
end
/* main: %194*/
/*   %242 = load i16* %62, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_194_157))
begin
memory_controller_address_b = main_legup_memset_2_exit_62_reg;
end
/* main: %194*/
/*   %246 = load i16* %64, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_194_158))
begin
memory_controller_address_b = main_legup_memset_2_exit_64_reg;
end
/* main: %253*/
/*   %255 = load i16* %scevgep11.i, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_253_196))
begin
memory_controller_address_b = main_253_scevgep11_i;
end
/* main: %253*/
/*   %257 = load i16* %scevgep12.i, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_253_197))
begin
memory_controller_address_b = main_253_scevgep12_i_reg;
end
/* main: %roundFunction.exit*/
/*   %265 = load i16* %7, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_203))
begin
memory_controller_address_b = main_legup_memset_2_exit_7_reg;
end
/* main: %roundFunction.exit*/
/*   %269 = load i16* %9, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_204))
begin
memory_controller_address_b = main_legup_memset_2_exit_9_reg;
end
/* main: %roundFunction.exit*/
/*   %271 = load i16* %10, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_205))
begin
memory_controller_address_b = main_legup_memset_2_exit_10_reg;
end
/* main: %roundFunction.exit*/
/*   %276 = load i16* %12, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_208))
begin
memory_controller_address_b = main_legup_memset_2_exit_12_reg;
end
/* main: %roundFunction.exit*/
/*   %280 = load i16* %14, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_209))
begin
memory_controller_address_b = main_legup_memset_2_exit_14_reg;
end
/* main: %roundFunction.exit*/
/*   %287 = load i16* %17, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_213))
begin
memory_controller_address_b = main_legup_memset_2_exit_17_reg;
end
/* main: %roundFunction.exit*/
/*   %291 = load i16* %19, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_214))
begin
memory_controller_address_b = main_legup_memset_2_exit_19_reg;
end
/* main: %roundFunction.exit*/
/*   %293 = load i16* %20, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_215))
begin
memory_controller_address_b = main_legup_memset_2_exit_20_reg;
end
/* main: %roundFunction.exit*/
/*   %298 = load i16* %22, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_218))
begin
memory_controller_address_b = main_legup_memset_2_exit_22_reg;
end
/* main: %roundFunction.exit*/
/*   %302 = load i16* %24, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_219))
begin
memory_controller_address_b = main_legup_memset_2_exit_24_reg;
end
/* main: %roundFunction.exit*/
/*   %309 = load i16* %27, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_223))
begin
memory_controller_address_b = main_legup_memset_2_exit_27_reg;
end
/* main: %roundFunction.exit*/
/*   %313 = load i16* %29, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_224))
begin
memory_controller_address_b = main_legup_memset_2_exit_29_reg;
end
/* main: %roundFunction.exit*/
/*   %315 = load i16* %30, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_225))
begin
memory_controller_address_b = main_legup_memset_2_exit_30_reg;
end
/* main: %roundFunction.exit*/
/*   %319 = load i16* %scevgep, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_228))
begin
memory_controller_address_b = main_66_scevgep_reg;
end
/* main: %roundFunction.exit*/
/*   %324 = load i16* %7, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_232))
begin
memory_controller_address_b = main_legup_memset_2_exit_7_reg;
end
/* main: %roundFunction.exit*/
/*   %328 = load i16* %9, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_233))
begin
memory_controller_address_b = main_legup_memset_2_exit_9_reg;
end
/* main: %roundFunction.exit*/
/*   %330 = load i16* %10, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_234))
begin
memory_controller_address_b = main_legup_memset_2_exit_10_reg;
end
/* main: %roundFunction.exit*/
/*   %335 = load i16* %12, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_237))
begin
memory_controller_address_b = main_legup_memset_2_exit_12_reg;
end
/* main: %roundFunction.exit*/
/*   %339 = load i16* %14, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_238))
begin
memory_controller_address_b = main_legup_memset_2_exit_14_reg;
end
/* main: %roundFunction.exit*/
/*   %346 = load i16* %17, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_242))
begin
memory_controller_address_b = main_legup_memset_2_exit_17_reg;
end
/* main: %roundFunction.exit*/
/*   %350 = load i16* %19, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_243))
begin
memory_controller_address_b = main_legup_memset_2_exit_19_reg;
end
/* main: %roundFunction.exit*/
/*   %352 = load i16* %20, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_244))
begin
memory_controller_address_b = main_legup_memset_2_exit_20_reg;
end
/* main: %roundFunction.exit*/
/*   %357 = load i16* %22, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_247))
begin
memory_controller_address_b = main_legup_memset_2_exit_22_reg;
end
/* main: %roundFunction.exit*/
/*   %361 = load i16* %24, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_248))
begin
memory_controller_address_b = main_legup_memset_2_exit_24_reg;
end
/* main: %roundFunction.exit*/
/*   %368 = load i16* %27, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_252))
begin
memory_controller_address_b = main_legup_memset_2_exit_27_reg;
end
/* main: %roundFunction.exit*/
/*   %372 = load i16* %29, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_253))
begin
memory_controller_address_b = main_legup_memset_2_exit_29_reg;
end
/* main: %roundFunction.exit*/
/*   %374 = load i16* %30, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_254))
begin
memory_controller_address_b = main_legup_memset_2_exit_30_reg;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_b = 1'd0;
end
/* main: %legup_memset_2.exit*/
/*   store i16 1, i16* %7, align 2*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_2_exit_4))
begin
memory_controller_write_enable_b = 1'd1;
end
/* main: %legup_memset_2.exit*/
/*   store i16 1, i16* %9, align 2*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_2_exit_5))
begin
memory_controller_write_enable_b = 1'd1;
end
/* main: %legup_memset_2.exit*/
/*   store i16 1, i16* %10, align 2*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_2_exit_6))
begin
memory_controller_write_enable_b = 1'd1;
end
/* main: %69*/
/*   %71 = load i16* %scevgep46.i, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_69_8))
begin
memory_controller_write_enable_b = 1'd0;
end
/* main: %69*/
/*   %73 = load i16* %scevgep48.i, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_69_9))
begin
memory_controller_write_enable_b = 1'd0;
end
/* main: %69*/
/*   store i16 %78, i16* %scevgep50.i, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_69_13))
begin
memory_controller_write_enable_b = 1'd1;
end
/* main: %80*/
/*   %83 = load i16* %32, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_80_14))
begin
memory_controller_write_enable_b = 1'd0;
end
/* main: %80*/
/*   %87 = load i16* %34, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_80_15))
begin
memory_controller_write_enable_b = 1'd0;
end
/* main: %92*/
/*   %101 = load i16* %100, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_92_53))
begin
memory_controller_write_enable_b = 1'd0;
end
/* main: %103*/
/*   %106 = load i16* %37, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_103_57))
begin
memory_controller_write_enable_b = 1'd0;
end
/* main: %103*/
/*   %110 = load i16* %39, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_103_58))
begin
memory_controller_write_enable_b = 1'd0;
end
/* main: %103*/
/*   %112 = load i16* %40, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_103_59))
begin
memory_controller_write_enable_b = 1'd0;
end
/* main: %116*/
/*   %117 = load i16* %scevgep35.i, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_116_63))
begin
memory_controller_write_enable_b = 1'd0;
end
/* main: %116*/
/*   store i16 %118, i16* %scevgep35.i, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_116_66))
begin
memory_controller_write_enable_b = 1'd1;
end
/* main: %122*/
/*   %126 = load i16* %7, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_122_72))
begin
memory_controller_write_enable_b = 1'd0;
end
/* main: %122*/
/*   %130 = load i16* %9, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_122_73))
begin
memory_controller_write_enable_b = 1'd0;
end
/* main: %122*/
/*   %132 = load i16* %10, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_122_74))
begin
memory_controller_write_enable_b = 1'd0;
end
/* main: %122*/
/*   %137 = load i16* %12, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_122_77))
begin
memory_controller_write_enable_b = 1'd0;
end
/* main: %122*/
/*   %141 = load i16* %14, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_122_78))
begin
memory_controller_write_enable_b = 1'd0;
end
/* main: %122*/
/*   %148 = load i16* %17, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_122_82))
begin
memory_controller_write_enable_b = 1'd0;
end
/* main: %122*/
/*   %152 = load i16* %19, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_122_83))
begin
memory_controller_write_enable_b = 1'd0;
end
/* main: %122*/
/*   %154 = load i16* %20, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_122_84))
begin
memory_controller_write_enable_b = 1'd0;
end
/* main: %122*/
/*   %159 = load i16* %22, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_122_87))
begin
memory_controller_write_enable_b = 1'd0;
end
/* main: %122*/
/*   %163 = load i16* %24, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_122_88))
begin
memory_controller_write_enable_b = 1'd0;
end
/* main: %122*/
/*   %170 = load i16* %27, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_122_92))
begin
memory_controller_write_enable_b = 1'd0;
end
/* main: %122*/
/*   %174 = load i16* %29, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_122_93))
begin
memory_controller_write_enable_b = 1'd0;
end
/* main: %122*/
/*   %176 = load i16* %30, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_122_94))
begin
memory_controller_write_enable_b = 1'd0;
end
/* main: %179*/
/*   %181 = load i16* %scevgep21.i, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_179_98))
begin
memory_controller_write_enable_b = 1'd0;
end
/* main: %194*/
/*   %198 = load i16* %42, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_194_137))
begin
memory_controller_write_enable_b = 1'd0;
end
/* main: %194*/
/*   %202 = load i16* %44, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_194_138))
begin
memory_controller_write_enable_b = 1'd0;
end
/* main: %194*/
/*   %204 = load i16* %45, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_194_139))
begin
memory_controller_write_enable_b = 1'd0;
end
/* main: %194*/
/*   %209 = load i16* %47, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_194_142))
begin
memory_controller_write_enable_b = 1'd0;
end
/* main: %194*/
/*   %213 = load i16* %49, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_194_143))
begin
memory_controller_write_enable_b = 1'd0;
end
/* main: %194*/
/*   %215 = load i16* %50, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_194_144))
begin
memory_controller_write_enable_b = 1'd0;
end
/* main: %194*/
/*   %220 = load i16* %52, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_194_147))
begin
memory_controller_write_enable_b = 1'd0;
end
/* main: %194*/
/*   %224 = load i16* %54, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_194_148))
begin
memory_controller_write_enable_b = 1'd0;
end
/* main: %194*/
/*   %231 = load i16* %57, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_194_152))
begin
memory_controller_write_enable_b = 1'd0;
end
/* main: %194*/
/*   %235 = load i16* %59, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_194_153))
begin
memory_controller_write_enable_b = 1'd0;
end
/* main: %194*/
/*   %237 = load i16* %60, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_194_154))
begin
memory_controller_write_enable_b = 1'd0;
end
/* main: %194*/
/*   %242 = load i16* %62, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_194_157))
begin
memory_controller_write_enable_b = 1'd0;
end
/* main: %194*/
/*   %246 = load i16* %64, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_194_158))
begin
memory_controller_write_enable_b = 1'd0;
end
/* main: %253*/
/*   %255 = load i16* %scevgep11.i, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_253_196))
begin
memory_controller_write_enable_b = 1'd0;
end
/* main: %253*/
/*   %257 = load i16* %scevgep12.i, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_253_197))
begin
memory_controller_write_enable_b = 1'd0;
end
/* main: %roundFunction.exit*/
/*   %265 = load i16* %7, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_203))
begin
memory_controller_write_enable_b = 1'd0;
end
/* main: %roundFunction.exit*/
/*   %269 = load i16* %9, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_204))
begin
memory_controller_write_enable_b = 1'd0;
end
/* main: %roundFunction.exit*/
/*   %271 = load i16* %10, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_205))
begin
memory_controller_write_enable_b = 1'd0;
end
/* main: %roundFunction.exit*/
/*   %276 = load i16* %12, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_208))
begin
memory_controller_write_enable_b = 1'd0;
end
/* main: %roundFunction.exit*/
/*   %280 = load i16* %14, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_209))
begin
memory_controller_write_enable_b = 1'd0;
end
/* main: %roundFunction.exit*/
/*   %287 = load i16* %17, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_213))
begin
memory_controller_write_enable_b = 1'd0;
end
/* main: %roundFunction.exit*/
/*   %291 = load i16* %19, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_214))
begin
memory_controller_write_enable_b = 1'd0;
end
/* main: %roundFunction.exit*/
/*   %293 = load i16* %20, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_215))
begin
memory_controller_write_enable_b = 1'd0;
end
/* main: %roundFunction.exit*/
/*   %298 = load i16* %22, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_218))
begin
memory_controller_write_enable_b = 1'd0;
end
/* main: %roundFunction.exit*/
/*   %302 = load i16* %24, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_219))
begin
memory_controller_write_enable_b = 1'd0;
end
/* main: %roundFunction.exit*/
/*   %309 = load i16* %27, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_223))
begin
memory_controller_write_enable_b = 1'd0;
end
/* main: %roundFunction.exit*/
/*   %313 = load i16* %29, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_224))
begin
memory_controller_write_enable_b = 1'd0;
end
/* main: %roundFunction.exit*/
/*   %315 = load i16* %30, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_225))
begin
memory_controller_write_enable_b = 1'd0;
end
/* main: %roundFunction.exit*/
/*   %319 = load i16* %scevgep, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_228))
begin
memory_controller_write_enable_b = 1'd0;
end
/* main: %roundFunction.exit*/
/*   %324 = load i16* %7, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_232))
begin
memory_controller_write_enable_b = 1'd0;
end
/* main: %roundFunction.exit*/
/*   %328 = load i16* %9, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_233))
begin
memory_controller_write_enable_b = 1'd0;
end
/* main: %roundFunction.exit*/
/*   %330 = load i16* %10, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_234))
begin
memory_controller_write_enable_b = 1'd0;
end
/* main: %roundFunction.exit*/
/*   %335 = load i16* %12, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_237))
begin
memory_controller_write_enable_b = 1'd0;
end
/* main: %roundFunction.exit*/
/*   %339 = load i16* %14, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_238))
begin
memory_controller_write_enable_b = 1'd0;
end
/* main: %roundFunction.exit*/
/*   %346 = load i16* %17, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_242))
begin
memory_controller_write_enable_b = 1'd0;
end
/* main: %roundFunction.exit*/
/*   %350 = load i16* %19, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_243))
begin
memory_controller_write_enable_b = 1'd0;
end
/* main: %roundFunction.exit*/
/*   %352 = load i16* %20, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_244))
begin
memory_controller_write_enable_b = 1'd0;
end
/* main: %roundFunction.exit*/
/*   %357 = load i16* %22, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_247))
begin
memory_controller_write_enable_b = 1'd0;
end
/* main: %roundFunction.exit*/
/*   %361 = load i16* %24, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_248))
begin
memory_controller_write_enable_b = 1'd0;
end
/* main: %roundFunction.exit*/
/*   %368 = load i16* %27, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_252))
begin
memory_controller_write_enable_b = 1'd0;
end
/* main: %roundFunction.exit*/
/*   %372 = load i16* %29, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_253))
begin
memory_controller_write_enable_b = 1'd0;
end
/* main: %roundFunction.exit*/
/*   %374 = load i16* %30, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_254))
begin
memory_controller_write_enable_b = 1'd0;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_b = 64'd0;
end
/* main: %legup_memset_2.exit*/
/*   store i16 1, i16* %7, align 2*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_2_exit_4))
begin
memory_controller_in_b = 16'd1;
end
/* main: %legup_memset_2.exit*/
/*   store i16 1, i16* %9, align 2*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_2_exit_5))
begin
memory_controller_in_b = 16'd1;
end
/* main: %legup_memset_2.exit*/
/*   store i16 1, i16* %10, align 2*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_2_exit_6))
begin
memory_controller_in_b = 16'd1;
end
/* main: %69*/
/*   store i16 %78, i16* %scevgep50.i, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_69_13))
begin
memory_controller_in_b = {main_69_78_reg};
end
/* main: %116*/
/*   store i16 %118, i16* %scevgep35.i, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_116_66))
begin
memory_controller_in_b = {main_116_118_reg};
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_b = 2'd0;
end
/* main: %legup_memset_2.exit*/
/*   store i16 1, i16* %7, align 2*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_2_exit_4))
begin
memory_controller_size_b = 2'd1;
end
/* main: %legup_memset_2.exit*/
/*   store i16 1, i16* %9, align 2*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_2_exit_5))
begin
memory_controller_size_b = 2'd1;
end
/* main: %legup_memset_2.exit*/
/*   store i16 1, i16* %10, align 2*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_2_exit_6))
begin
memory_controller_size_b = 2'd1;
end
/* main: %69*/
/*   %71 = load i16* %scevgep46.i, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_69_8))
begin
memory_controller_size_b = 2'd1;
end
/* main: %69*/
/*   %73 = load i16* %scevgep48.i, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_69_9))
begin
memory_controller_size_b = 2'd1;
end
/* main: %69*/
/*   store i16 %78, i16* %scevgep50.i, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_69_13))
begin
memory_controller_size_b = 2'd1;
end
/* main: %80*/
/*   %83 = load i16* %32, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_80_14))
begin
memory_controller_size_b = 2'd1;
end
/* main: %80*/
/*   %87 = load i16* %34, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_80_15))
begin
memory_controller_size_b = 2'd1;
end
/* main: %92*/
/*   %101 = load i16* %100, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_92_53))
begin
memory_controller_size_b = 2'd1;
end
/* main: %103*/
/*   %106 = load i16* %37, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_103_57))
begin
memory_controller_size_b = 2'd1;
end
/* main: %103*/
/*   %110 = load i16* %39, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_103_58))
begin
memory_controller_size_b = 2'd1;
end
/* main: %103*/
/*   %112 = load i16* %40, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_103_59))
begin
memory_controller_size_b = 2'd1;
end
/* main: %116*/
/*   %117 = load i16* %scevgep35.i, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_116_63))
begin
memory_controller_size_b = 2'd1;
end
/* main: %116*/
/*   store i16 %118, i16* %scevgep35.i, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_116_66))
begin
memory_controller_size_b = 2'd1;
end
/* main: %122*/
/*   %126 = load i16* %7, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_122_72))
begin
memory_controller_size_b = 2'd1;
end
/* main: %122*/
/*   %130 = load i16* %9, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_122_73))
begin
memory_controller_size_b = 2'd1;
end
/* main: %122*/
/*   %132 = load i16* %10, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_122_74))
begin
memory_controller_size_b = 2'd1;
end
/* main: %122*/
/*   %137 = load i16* %12, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_122_77))
begin
memory_controller_size_b = 2'd1;
end
/* main: %122*/
/*   %141 = load i16* %14, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_122_78))
begin
memory_controller_size_b = 2'd1;
end
/* main: %122*/
/*   %148 = load i16* %17, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_122_82))
begin
memory_controller_size_b = 2'd1;
end
/* main: %122*/
/*   %152 = load i16* %19, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_122_83))
begin
memory_controller_size_b = 2'd1;
end
/* main: %122*/
/*   %154 = load i16* %20, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_122_84))
begin
memory_controller_size_b = 2'd1;
end
/* main: %122*/
/*   %159 = load i16* %22, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_122_87))
begin
memory_controller_size_b = 2'd1;
end
/* main: %122*/
/*   %163 = load i16* %24, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_122_88))
begin
memory_controller_size_b = 2'd1;
end
/* main: %122*/
/*   %170 = load i16* %27, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_122_92))
begin
memory_controller_size_b = 2'd1;
end
/* main: %122*/
/*   %174 = load i16* %29, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_122_93))
begin
memory_controller_size_b = 2'd1;
end
/* main: %122*/
/*   %176 = load i16* %30, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_122_94))
begin
memory_controller_size_b = 2'd1;
end
/* main: %179*/
/*   %181 = load i16* %scevgep21.i, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_179_98))
begin
memory_controller_size_b = 2'd1;
end
/* main: %194*/
/*   %198 = load i16* %42, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_194_137))
begin
memory_controller_size_b = 2'd1;
end
/* main: %194*/
/*   %202 = load i16* %44, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_194_138))
begin
memory_controller_size_b = 2'd1;
end
/* main: %194*/
/*   %204 = load i16* %45, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_194_139))
begin
memory_controller_size_b = 2'd1;
end
/* main: %194*/
/*   %209 = load i16* %47, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_194_142))
begin
memory_controller_size_b = 2'd1;
end
/* main: %194*/
/*   %213 = load i16* %49, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_194_143))
begin
memory_controller_size_b = 2'd1;
end
/* main: %194*/
/*   %215 = load i16* %50, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_194_144))
begin
memory_controller_size_b = 2'd1;
end
/* main: %194*/
/*   %220 = load i16* %52, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_194_147))
begin
memory_controller_size_b = 2'd1;
end
/* main: %194*/
/*   %224 = load i16* %54, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_194_148))
begin
memory_controller_size_b = 2'd1;
end
/* main: %194*/
/*   %231 = load i16* %57, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_194_152))
begin
memory_controller_size_b = 2'd1;
end
/* main: %194*/
/*   %235 = load i16* %59, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_194_153))
begin
memory_controller_size_b = 2'd1;
end
/* main: %194*/
/*   %237 = load i16* %60, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_194_154))
begin
memory_controller_size_b = 2'd1;
end
/* main: %194*/
/*   %242 = load i16* %62, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_194_157))
begin
memory_controller_size_b = 2'd1;
end
/* main: %194*/
/*   %246 = load i16* %64, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_194_158))
begin
memory_controller_size_b = 2'd1;
end
/* main: %253*/
/*   %255 = load i16* %scevgep11.i, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_253_196))
begin
memory_controller_size_b = 2'd1;
end
/* main: %253*/
/*   %257 = load i16* %scevgep12.i, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_253_197))
begin
memory_controller_size_b = 2'd1;
end
/* main: %roundFunction.exit*/
/*   %265 = load i16* %7, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_203))
begin
memory_controller_size_b = 2'd1;
end
/* main: %roundFunction.exit*/
/*   %269 = load i16* %9, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_204))
begin
memory_controller_size_b = 2'd1;
end
/* main: %roundFunction.exit*/
/*   %271 = load i16* %10, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_205))
begin
memory_controller_size_b = 2'd1;
end
/* main: %roundFunction.exit*/
/*   %276 = load i16* %12, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_208))
begin
memory_controller_size_b = 2'd1;
end
/* main: %roundFunction.exit*/
/*   %280 = load i16* %14, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_209))
begin
memory_controller_size_b = 2'd1;
end
/* main: %roundFunction.exit*/
/*   %287 = load i16* %17, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_213))
begin
memory_controller_size_b = 2'd1;
end
/* main: %roundFunction.exit*/
/*   %291 = load i16* %19, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_214))
begin
memory_controller_size_b = 2'd1;
end
/* main: %roundFunction.exit*/
/*   %293 = load i16* %20, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_215))
begin
memory_controller_size_b = 2'd1;
end
/* main: %roundFunction.exit*/
/*   %298 = load i16* %22, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_218))
begin
memory_controller_size_b = 2'd1;
end
/* main: %roundFunction.exit*/
/*   %302 = load i16* %24, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_219))
begin
memory_controller_size_b = 2'd1;
end
/* main: %roundFunction.exit*/
/*   %309 = load i16* %27, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_223))
begin
memory_controller_size_b = 2'd1;
end
/* main: %roundFunction.exit*/
/*   %313 = load i16* %29, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_224))
begin
memory_controller_size_b = 2'd1;
end
/* main: %roundFunction.exit*/
/*   %315 = load i16* %30, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_225))
begin
memory_controller_size_b = 2'd1;
end
/* main: %roundFunction.exit*/
/*   %319 = load i16* %scevgep, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_228))
begin
memory_controller_size_b = 2'd1;
end
/* main: %roundFunction.exit*/
/*   %324 = load i16* %7, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_232))
begin
memory_controller_size_b = 2'd1;
end
/* main: %roundFunction.exit*/
/*   %328 = load i16* %9, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_233))
begin
memory_controller_size_b = 2'd1;
end
/* main: %roundFunction.exit*/
/*   %330 = load i16* %10, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_234))
begin
memory_controller_size_b = 2'd1;
end
/* main: %roundFunction.exit*/
/*   %335 = load i16* %12, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_237))
begin
memory_controller_size_b = 2'd1;
end
/* main: %roundFunction.exit*/
/*   %339 = load i16* %14, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_238))
begin
memory_controller_size_b = 2'd1;
end
/* main: %roundFunction.exit*/
/*   %346 = load i16* %17, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_242))
begin
memory_controller_size_b = 2'd1;
end
/* main: %roundFunction.exit*/
/*   %350 = load i16* %19, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_243))
begin
memory_controller_size_b = 2'd1;
end
/* main: %roundFunction.exit*/
/*   %352 = load i16* %20, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_244))
begin
memory_controller_size_b = 2'd1;
end
/* main: %roundFunction.exit*/
/*   %357 = load i16* %22, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_247))
begin
memory_controller_size_b = 2'd1;
end
/* main: %roundFunction.exit*/
/*   %361 = load i16* %24, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_248))
begin
memory_controller_size_b = 2'd1;
end
/* main: %roundFunction.exit*/
/*   %368 = load i16* %27, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_252))
begin
memory_controller_size_b = 2'd1;
end
/* main: %roundFunction.exit*/
/*   %372 = load i16* %29, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_253))
begin
memory_controller_size_b = 2'd1;
end
/* main: %roundFunction.exit*/
/*   %374 = load i16* %30, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_roundFunction_exit_254))
begin
memory_controller_size_b = 2'd1;
end
end

endmodule 
`timescale 1 ns / 1 ns
module ram_dual_port
(
	clk,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	q_a,
	q_b,
	byteena_a,
	byteena_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
output [(width_a-1):0] q_a;
output [(width_b-1):0] q_b;
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;
reg  clk_wire;


altsyncram altsyncram_component (
	.clock0 (clk_wire),
	.clock1 (1'd1),
	.clocken0 (1'd1),
	.clocken1 (1'd1),
	.clocken2 (1'd1),
	.clocken3 (1'd1),
	.aclr0 (1'd0),
	.aclr1 (1'd0),
	.addressstall_a (1'd0),
	.addressstall_b (1'd0),
	.eccstatus (),
	.address_a (address_a),
	.address_b (address_b),
	.wren_a (wren_a),
	.wren_b (wren_b),
	.rden_a (1'd1),
	.rden_b (1'd1),
	.data_a (data_a),
	.data_b (data_b),
	.q_a (q_a),
	.q_b (q_b),
	.byteena_a (byteena_a),
	.byteena_b (byteena_b)
);

defparam
	altsyncram_component.operation_mode = "BIDIR_DUAL_PORT",
	altsyncram_component.read_during_write_mode_mixed_ports = "OLD_DATA",
	altsyncram_component.init_file = init_file,
	altsyncram_component.lpm_hint = "ENABLE_RUNTIME_MOD=NO",
	altsyncram_component.lpm_type = "altsyncram",
	altsyncram_component.power_up_uninitialized = "FALSE",
	altsyncram_component.intended_device_family = "Cyclone II",
	altsyncram_component.clock_enable_input_a = "BYPASS",
	altsyncram_component.clock_enable_input_b = "BYPASS",
	altsyncram_component.clock_enable_output_a = "BYPASS",
	altsyncram_component.clock_enable_output_b = "BYPASS",
	altsyncram_component.outdata_aclr_a = "NONE",
	altsyncram_component.outdata_aclr_b = "NONE",
	altsyncram_component.outdata_reg_a = "UNREGISTERED",
	altsyncram_component.outdata_reg_b = "UNREGISTERED",
	altsyncram_component.numwords_a = numwords_a,
	altsyncram_component.numwords_b = numwords_b,
	altsyncram_component.widthad_a = widthad_a,
	altsyncram_component.widthad_b = widthad_b,
	altsyncram_component.width_a = width_a,
	altsyncram_component.width_b = width_b,
	altsyncram_component.address_reg_b = "CLOCK0",
	altsyncram_component.byteena_reg_b = "CLOCK0",
	altsyncram_component.indata_reg_b = "CLOCK0",
	altsyncram_component.wrcontrol_wraddress_reg_b = "CLOCK0",
	altsyncram_component.width_byteena_a = width_be_a,
	altsyncram_component.width_byteena_b = width_be_b;


always @(*) begin
clk_wire = clk;
end

endmodule 
module de2 (CLOCK_50, KEY, SW, HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7, LEDG);
    input CLOCK_50;
    output [7:0] LEDG;
    input [1:0] KEY;
    input [15:0] SW;
    output [6:0] HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7;

    wire  clk;
    wire reset = ~KEY[0];
    wire go = ~KEY[1];

    wire  start;
    wire [31:0] return_val;
    wire  finish;

    reg [31:0] return_val_reg;
    
    hex_digits h7( .x(return_val_reg[31:28]), .hex_LEDs(HEX7));
    hex_digits h6( .x(return_val_reg[27:24]), .hex_LEDs(HEX6));
    hex_digits h5( .x(return_val_reg[23:20]), .hex_LEDs(HEX5));
    hex_digits h4( .x(return_val_reg[19:16]), .hex_LEDs(HEX4));
    hex_digits h3( .x(return_val_reg[15:12]), .hex_LEDs(HEX3));
    hex_digits h2( .x(return_val_reg[11:8]), .hex_LEDs(HEX2));
    hex_digits h1( .x(return_val_reg[7:4]), .hex_LEDs(HEX1));
    hex_digits h0( .x(return_val_reg[3:0]), .hex_LEDs(HEX0));


    top top_inst (
        .clk (clk),
        .reset (reset),
        .start (start),
        .finish (finish),
        .return_val (return_val)
    );

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);
endmodule

module de4 (
	OSC_50_BANK2,
    BUTTON,
    LED,
	SEG0_D,
	SEG1_D
);
    input OSC_50_BANK2;
    input [1:0] BUTTON;
    output [6:0] SEG0_D;
    output [6:0] SEG1_D;
    output [7:0] LED;

    de2 de2_inst (
        .CLOCK_50 (OSC_50_BANK2),
        .LEDG (LED),
        .KEY (BUTTON),
        .SW (),
        .HEX0 (SEG0_D),
        .HEX1 (SEG1_D),
        .HEX2 (),
        .HEX3 (),
        .HEX4 (),
        .HEX5 (),
        .HEX6 (),
        .HEX7 ()
    );

endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.finish (finish),
	.return_val (return_val)
);




initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;

end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

endmodule 
